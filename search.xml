<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo加git搭建个人博客</title>
      <link href="/aiyblog/2023/02/26/hexo%E5%8A%A0git%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/aiyblog/2023/02/26/hexo%E5%8A%A0git%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-使用"><a href="#hexo-使用" class="headerlink" title="hexo 使用"></a>hexo 使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 安装 hexo</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"># 进入blog目录，创建测试页及本地启动查看效果</span><br><span class="line">hexo new test_my_site</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"># 安装git 部署插件</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"># 重新生成并部署</span><br><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line"># 访问 http://GitHub用户名.github.io/仓库名 如：</span><br><span class="line">http://xiaoaiying-i.github.io/aiyblog</span><br><span class="line"></span><br><span class="line"># 更换主题 参考如下：</span><br><span class="line">http://theme-next.iissnan.com/getting-started.html</span><br><span class="line">https://hexo.io/zh-cn/docs/themes</span><br><span class="line">https://hexo.io/themes/</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>可能发生git错误，参考:<a href="#git_err">git错误处理</a><br>hexo d 部署成功后，访问404，git【actions】查看是否创建了查看workflows并运行了，不理解workflows可查询学习一下</p></blockquote><h2 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line">命令简写</span><br><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h2 id="git错误处理"><a href="#git错误处理" class="headerlink" title="git错误处理"></a><span id="git_err">git错误处理</span></h2><h3 id="去除代理"><a href="#去除代理" class="headerlink" title="去除代理"></a>去除代理</h3><blockquote><p>错误：错误：fatal: unable to access ‘<a href="https://github.com/xiaoaiying-i/aiyblog.git/&#39;">https://github.com/xiaoaiying-i/aiyblog.git/&#39;</a>: OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify false</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h3 id="密码认证改成token"><a href="#密码认证改成token" class="headerlink" title="密码认证改成token"></a>密码认证改成token</h3><blockquote><p>错误：fatal: Authentication failed for ‘<a href="https://github.com/xiaoaiying-i/aiyblog.git/&#39;">https://github.com/xiaoaiying-i/aiyblog.git/&#39;</a></p></blockquote><p>2021年 8 月 13日，github中通过 用户名然后输入密码的认证方式被移除了，只能通过个人访问码的方式进行认证。</p><p><strong>解决方案</strong>：在github上创建访问码，步骤如下：</p><ul><li>点击settings</li><li>点击developer settings</li><li>找到tokens（classic） </li><li>全部勾选 点击Generate token</li><li>得到token，输入username，密码替换成token</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于s3</title>
      <link href="/aiyblog/2023/02/26/%E5%85%B3%E4%BA%8Es3/"/>
      <url>/aiyblog/2023/02/26/%E5%85%B3%E4%BA%8Es3/</url>
      
        <content type="html"><![CDATA[<h3 id="s3问题"><a href="#s3问题" class="headerlink" title="s3问题"></a>s3问题</h3><ul><li>key斜杠只能用【\】</li><li>key前不要带斜杠</li><li>key最后带斜杠是目录， 不带斜杠是文件</li><li>注意如果key最后是双斜杠,会在目录下创建多一层空白目录，再用单斜杠去获取会获取不到story， 需要用双斜杠才行</li><li>目录也作为一个story，删除目录，目录下有子文件，则查询不到目录的story，但是子文件story还存储，结构上看目录还存在，但目录story已经被删除</li></ul><h3 id="路径风格参数-PathStyleAccess"><a href="#路径风格参数-PathStyleAccess" class="headerlink" title="路径风格参数 PathStyleAccess"></a>路径风格参数 PathStyleAccess</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AmazonS3ClientBuilder</span> <span class="variable">s3Builder</span> <span class="operator">=</span> AmazonS3ClientBuilder.standard()</span><br><span class="line">            .withCredentials(<span class="keyword">new</span> <span class="title class_">AWSStaticCredentialsProvider</span>(credentials))</span><br><span class="line">            .withClientConfiguration(clientConfiguration)</span><br><span class="line">            .withEndpointConfiguration(<span class="keyword">new</span> <span class="title class_">AwsClientBuilder</span>.EndpointConfiguration(hisS3Config.getEndpoint(), Regions.CN_NORTH_1.getName()));</span><br><span class="line"><span class="keyword">if</span> (pathStyleAcc)&#123;</span><br><span class="line">    s3Builder.enablePathStyleAccess();</span><br><span class="line">&#125;</span><br><span class="line">s3Client = s3Builder.build();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">---- PathStyleAccess = true，  objectKey可以多级目录，   </span></span><br><span class="line"><span class="comment">&quot;endpoint&quot; : &quot;s3-beta-hc-kwe.hics.huawei.com&quot;, </span></span><br><span class="line"><span class="comment">&quot;ak&quot; : &quot;******&quot;,</span></span><br><span class="line"><span class="comment">&quot;sk&quot; : &quot;******&quot;,</span></span><br><span class="line"><span class="comment">&quot;pathStyle&quot;: true,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&quot;bucket&quot; : &quot;test&quot;,</span></span><br><span class="line"><span class="comment">&quot;objectKey&quot; : &quot;/temp/b2b/testdmz.txt&quot;,  </span></span><br><span class="line"><span class="comment">或者  </span></span><br><span class="line"><span class="comment">&quot;bucket&quot; : &quot;test/temp/b2b&quot;,</span></span><br><span class="line"><span class="comment">&quot;objectKey&quot; : &quot;/testdmz.txt&quot;,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">---- PathStyleAccess = false， objectKey不支持多级目录， 目录需放到bucket</span></span><br><span class="line"><span class="comment">&quot;endpoint&quot; : &quot;s3-beta-hc-kwe.hics.huawei.com&quot;, </span></span><br><span class="line"><span class="comment">&quot;ak&quot; : &quot;******&quot;,</span></span><br><span class="line"><span class="comment">&quot;sk&quot; : &quot;******&quot;,</span></span><br><span class="line"><span class="comment">&quot;pathStyle&quot;: false,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只支持</span></span><br><span class="line"><span class="comment">&quot;bucket&quot; : &quot;test/temp/b2b&quot;,</span></span><br><span class="line"><span class="comment">&quot;objectKey&quot; : &quot;/testdmz.txt&quot;,</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>objectKey 需以 <code>/</code> 开头</p></blockquote><h3 id="marker参数"><a href="#marker参数" class="headerlink" title="marker参数"></a>marker参数</h3><p><a href="http://docs.amazonwebservices.com/AmazonS3/2006-03-01/">http://docs.amazonwebservices.com/AmazonS3/2006-03-01/</a></p><h3 id="分页搜索参数"><a href="#分页搜索参数" class="headerlink" title="分页搜索参数"></a>分页搜索参数</h3><p>S3提供的4个参数，可以让我们方便快捷的将数据取出来，这4个参数是基于key操作的。key的概念参见文章一。</p><ul><li>1、<code>prefix</code>。比如<a href="http://bucket.s3.amazonaws.com/?prefix=123%EF%BC%8C%E5%88%99%E5%B0%86key%E4%B8%AD%E4%BB%A5123%E5%BC%80%E5%A4%B4%E7%9A%84%E5%88%97%E5%87%BA%E6%9D%A5%E3%80%82">http://bucket.s3.amazonaws.com/?prefix=123，则将key中以123开头的列出来。</a></li><li>2、<code>delimiter</code>。比如<a href="http://bucket.s3.amazonaws.com/?delimiter=/%EF%BC%8C%E6%AD%A4%E6%97%B6%EF%BC%8CS3%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%BF%94%E5%9B%9ECommonPrefixes%EF%BC%8C%E5%B0%86key%E4%B8%AD%E9%87%87%E7%94%A8%E2%80%9C/%E2%80%9D%E5%88%86%E9%9A%94%E7%9A%84%E5%88%97%E5%87%BA%E6%9D%A5%E3%80%82">http://bucket.s3.amazonaws.com/?delimiter=/，此时，S3可能会返回CommonPrefixes，将key中采用“/”分隔的列出来。</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Contents&gt;</span><br><span class="line">&lt;Key&gt;123/zzz.txt&lt;/Key&gt;</span><br><span class="line">&lt;LastModified&gt;2007-12-11T07:41:51.000Z&lt;/LastModified&gt;</span><br><span class="line">&lt;ETag&gt;&quot;d725dfc2167445d1db23067de33ebd28&quot;&lt;/ETag&gt;</span><br><span class="line">&lt;Size&gt;203&lt;/Size&gt;</span><br><span class="line">&lt;StorageClass&gt;STANDARD&lt;/StorageClass&gt;</span><br><span class="line">&lt;/Contents&gt;</span><br><span class="line">&lt;Contents&gt;</span><br><span class="line">&lt;Key&gt;abc/ooo/yxx.txt&lt;/Key&gt;</span><br><span class="line">&lt;LastModified&gt;2007-12-12T05:34:35.000Z&lt;/LastModified&gt;</span><br><span class="line">&lt;ETag&gt;&quot;4fdf8a4dd42bd4d24855eebd5c9b9434&quot;&lt;/ETag&gt;</span><br><span class="line">&lt;Size&gt;41&lt;/Size&gt;</span><br><span class="line">&lt;StorageClass&gt;STANDARD&lt;/StorageClass&gt;</span><br><span class="line">&lt;/Contents&gt;</span><br></pre></td></tr></table></figure><p>用了“delimiter=/”返回，告诉你 有prefix为123/和abc/可用。<br>这时输入<a href="http://bucket.s3.amazonaws.com/?delimiter=/&amp;prefix=123/%E5%88%99%E5%B0%86prefix%E4%B8%AD%E6%9C%89123/%E7%9A%84%E5%85%A8%E9%83%A8%E5%88%97%E5%87%BA%E6%9D%A5%E3%80%82">http://bucket.s3.amazonaws.com/?delimiter=/&amp;prefix=123/则将prefix中有123/的全部列出来。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;CommonPrefixes&gt;</span><br><span class="line">&lt;Prefix&gt;123/&lt;/Prefix&gt;</span><br><span class="line">&lt;/CommonPrefixes&gt;</span><br><span class="line">&lt;CommonPrefixes&gt;</span><br><span class="line">&lt;Prefix&gt;abc/&lt;/Prefix&gt;</span><br><span class="line">&lt;/CommonPrefixes&gt;</span><br></pre></td></tr></table></figure><ul><li><p>3、<code>MaxKeys</code>。这个告诉S3一次性返回多少数据，默认返回1000个。URL输入<a href="http://bucket.s3.amazonaws.com/?delimiter=/&amp;prefix=123/&amp;max-keys=10%EF%BC%8C%E5%88%99%E8%BF%94%E5%9B%9E%EF%BC%9A">http://bucket.s3.amazonaws.com/?delimiter=/&amp;prefix=123/&amp;max-keys=10，则返回：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">如果key有这样的形式：ms_vb_5_src/sss.frm，ms_vb_6_src/ddd.frm，你可以把delimiter设为“_”来取数据。通过不同的delimiter和prefix可以非常灵活的获取数据。</span><br><span class="line">如果数据量很大，则可以用第三个和第四个参数</span><br><span class="line">里面IsTruncated为true，表示按照delimiter和prefix和max-keys取出的数据不止10个；余下的数据怎么取？就用到了NextMarker元素中数据。</span><br><span class="line"></span><br><span class="line">&lt;Name&gt;bucket&lt;/Name&gt;</span><br><span class="line">&lt;Prefix&gt;123/&lt;/Prefix&gt;</span><br><span class="line">&lt;Marker /&gt;</span><br><span class="line">&lt;NextMarker&gt;123/10.txt&lt;/NextMarker&gt;</span><br><span class="line">&lt;MaxKeys&gt;10&lt;/MaxKeys&gt;</span><br><span class="line">&lt;Delimiter&gt;/&lt;/Delimiter&gt;</span><br><span class="line">&lt;IsTruncated&gt;true&lt;/IsTruncated&gt;</span><br><span class="line">&lt;Contents&gt;</span><br><span class="line">&lt;Key&gt;123/1.txt&lt;/Key&gt;</span><br><span class="line">&lt;LastModified&gt;2007-12-12T06:02:33.000Z&lt;/LastModified&gt;</span><br><span class="line">&lt;ETag&gt;&quot;9dd4e461268c8034f5c8564e155c67a6&quot;&lt;/ETag&gt;</span><br><span class="line">&lt;Size&gt;1&lt;/Size&gt;</span><br><span class="line">&lt;StorageClass&gt;STANDARD&lt;/StorageClass&gt;</span><br><span class="line">&lt;/Contents&gt;</span><br></pre></td></tr></table></figure></li><li><p>4、<code>Marker</code>。 URL输入<a href="http://bucket.s3.amazonaws.com/?delimiter=/&amp;prefix=123/&amp;max">http://bucket.s3.amazonaws.com/?delimiter=/&amp;prefix=123/&amp;max</a> -keys=10&amp;marker=123/10.txt，marker的值就是NextMarker元素中数据。这样S3就返回了下10条数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">如果IsTruncated仍为true，则表示还有数据，我们把marker改为marker=123/19.txt便可以继续取下10条数据；如果IsTruncated为false，则表示按照条件已经将数据全部取出来了。</span><br><span class="line"></span><br><span class="line">&lt;Name&gt;bucket&lt;/Name&gt;</span><br><span class="line">&lt;Prefix&gt;123/&lt;/Prefix&gt;</span><br><span class="line">&lt;Marker&gt;123/10.txt&lt;/Marker&gt;</span><br><span class="line">&lt;NextMarker&gt;123/19.txt&lt;/NextMarker&gt;</span><br><span class="line">&lt;MaxKeys&gt;10&lt;/MaxKeys&gt;</span><br><span class="line">&lt;Delimiter&gt;/&lt;/Delimiter&gt;</span><br><span class="line">&lt;IsTruncated&gt;true&lt;/IsTruncated&gt;</span><br><span class="line">&lt;Contents&gt;</span><br><span class="line">&lt;Key&gt;123/1.txt&lt;/Key&gt;</span><br><span class="line">&lt;LastModified&gt;2007-12-12T06:02:33.000Z&lt;/LastModified&gt;</span><br><span class="line">&lt;ETag&gt;&quot;9dd4e461268c8034f5c8564e155c67a6&quot;&lt;/ETag&gt;</span><br><span class="line">&lt;Size&gt;1&lt;/Size&gt;</span><br><span class="line">&lt;StorageClass&gt;STANDARD&lt;/StorageClass&gt;</span><br><span class="line">&lt;/Contents&gt;</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="left"><strong>参数名称</strong></th><th align="left"><strong>描述</strong></th><th align="left">是否必选</th></tr></thead><tbody><tr><td align="left">prefix</td><td align="left">列举以指定的字符串prefix开头的对象。类型：String</td><td align="left">否</td></tr><tr><td align="left">marker</td><td align="left">列举桶内对象列表时，指定一个标识符，从该标识符以后按字典顺序返回对象列表。该字段仅用于非多版本列举。类型：String</td><td align="left">否</td></tr><tr><td align="left">max-keys</td><td align="left">指定返回的最大对象数，返回的对象列表将是按照字典顺序的最多前max-keys个对象，范围是[1，1000]，超出范围时，按照默认的1000进行处理。类型：Integer</td><td align="left">否</td></tr><tr><td align="left">delimiter</td><td align="left">将对象名进行分组的分隔符。如果指定了prefix，从prefix到第一次出现delimiter间具有相同字符串的对象名会被分成一组，形成一条CommonPrefixes；如果没有指定prefix，从对象名的首字符到第一次出现delimiter间具有相同字符串的对象名会被分成一组，形成一条CommonPrefixes。例如，桶中有3个对象，分别为abcd、abcde、bbcde。如果指定delimiter为d，prefix为a，abcd、abcde会被分成一组，形成一条前缀为abcd的CommonPrefixes；如果只指定delimiter为d，abcd、abcde会被分成一组，形成一条前缀为abcd的CommonPrefixes，而bbcde会被单独分成一组，形成一条前缀为bbcd的CommonPrefixes。类型：String</td><td align="left">否</td></tr><tr><td align="left">key-marker</td><td align="left">列举对象时的起始位置。该字段仅用于多版本列举。类型：String有效值：上次请求返回体的NextKeyMarker值</td><td align="left">否</td></tr><tr><td align="left">version-id-marker</td><td align="left">本参数只适用于多版本列举场景与请求中的key-marker配合使用，返回的对象列表将是按照字典顺序排序后在该标识符以后的对象(单次返回最大为1000个)。如果version-id-marker不是key-marker对应的一个版本号，则该参数无效。类型：String有效值：对象的版本号，即上次请求返回体的NextVersionIdMarker值</td><td align="left">否</td></tr><tr><td align="left">encoding-type</td><td align="left">对响应中的部分元素进行指定类型的编码。如果Delimiter、Marker（或KeyMarker）、Prefix、NextMarker（或NextKeyMarker）和Key包含xml 1.0标准不支持的控制字符，可通过设置encoding-type对响应中的Delimiter、Marker（或KeyMarker）、Prefix（包括CommonPrefixes中的Prefix）、NextMarker（或NextKeyMarker）和Key进行编码。类型：String可选值：url</td><td align="left">否</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 对象存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Apache commons】vfs简单使用</title>
      <link href="/aiyblog/2023/02/26/%E3%80%90Apache%20commons%E3%80%91vfs%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/aiyblog/2023/02/26/%E3%80%90Apache%20commons%E3%80%91vfs%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ul><li>参考：<a href="https://www.jianshu.com/p/1f2f851b61c5">https://www.jianshu.com/p/1f2f851b61c5</a></li></ul><h2 id="vfs-虚拟文件系统"><a href="#vfs-虚拟文件系统" class="headerlink" title="vfs 虚拟文件系统"></a>vfs 虚拟文件系统</h2><h3 id="Commons-VFS-支持文件系统"><a href="#Commons-VFS-支持文件系统" class="headerlink" title="Commons VFS 支持文件系统"></a>Commons VFS 支持文件系统</h3><p><strong>1.本地文件</strong></p><ul><li>[file://]absolute-path</li></ul><p><strong>2. Zip, Jar and Tar</strong></p><ul><li>[zip://arch-file-uri<a href="https://links.jianshu.com/go?to=zip://arch-file-uri%5B!absolute-path%5D">!absolute-path]</a></li><li>[jar://arch-file-uri<a href="https://links.jianshu.com/go?to=jar://arch-file-uri%5B!absolute-path%5D">!absolute-path]</a></li><li>[tar://arch-file-uri<a href="https://links.jianshu.com/go?to=tar://arch-file-uri%5B!absolute-path%5D">!absolute-path]</a></li><li>[tgz://arch-file-uri<a href="https://links.jianshu.com/go?to=tgz://arch-file-uri%5B!absolute-path%5D">!absolute-path]</a></li><li>[tbz2://arch-file-uri<a href="https://links.jianshu.com/go?to=tbz2://arch-file-uri%5B!absolute-path%5D">!absolute-path]</a></li></ul><p><strong>3. gzip and bzip2</strong></p><ul><li><a href="https://links.jianshu.com/go?to=gz://compressed-file-uri">gz://compressed-file-uri</a></li><li><a href="https://links.jianshu.com/go?to=bz2://compressed-file-uri">bz2://compressed-file-uri</a></li></ul><p><strong>4. HDFS</strong></p><ul><li>[hdfs://hostname<a href="https://links.jianshu.com/go?to=hdfs://hostname%5B:port%5D%5Babsolute-path%5D">:port][absolute-path]</a></li></ul><p><strong>5. HTTP and HTTPS</strong></p><ul><li>http://[username[:password]@]hostname[:port][absolute-path]</li><li>https://[username[:password]@]hostname[:port][absolute-path]</li></ul><p><strong>6. WebDAV</strong></p><ul><li>webdav://[username[:password]@]hostname[:port][absolute-path]</li></ul><p>通过 commons-vfs2-jackrabbit1 和 commons-vfs2-jackrabbit2 模块提供对 WebDAV 服务器上文件的访问。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-vfs2-jackrabbit1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>7. FTP and FTPS</strong></p><ul><li>ftp://[user[:pass]@]host[:port][relative-path]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下，路径相对于用户的主目录。可通过以下方式进行更改：</span></span><br><span class="line">FtpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(options, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><strong>8. SFTP</strong></p><ul><li>sftp://[user[:pass]@]hostname[:port][relative-path]</li></ul><p>提供对 SFTP 服务器（即 SSH 或 SCP 服务器）上的文件的访问。需要添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jcraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.55<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>9. Temporary Files</strong>：提供对临时文件系统的访问，该文件系统在 Commons VFS 关闭时被删除。临时文件系统由本地文件系统支持</p><ul><li>tmp://[absolute-path]    示例：<a href="https://links.jianshu.com/go?to=tmp://dir/somefile.txt">tmp://dir/somefile.txt</a></li></ul><p><strong>10. RAM</strong>：在内存中存储所有数据的文件系统（每个文件内容一个字节数组）</p><ul><li>ram://[path]    示例：ram:///any/path/to/file.txt</li></ul><p><strong>11. Resource</strong> ：实际上不是一个文件系统，它使用 ClassLoader.getResource() 查找资源，并创建一个 VFS url 以供进一步处理</p><ul><li>res://[path]</li></ul><p><strong>12. CIFS</strong></p><ul><li>smb://[username[:password]@]hostname[:port][absolute-path]</li></ul><p><strong>13. MIME</strong>：可以读取邮件及其附件，比如归档文件。如果已解析邮件中的某个部分没有名称，则将生成一个伪名称。虚拟名称是：_body_part_X，其中X将被零件号替换。</p><ul><li>[mime://mime-file-uri<a href="https://links.jianshu.com/go?to=mime://mime-file-uri%5B!absolute-path%5D">!absolute-path]</a></li></ul><p><strong>14. 自定义扩展</strong></p><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><h4 id="FileSystemManager"><a href="#FileSystemManager" class="headerlink" title="FileSystemManager"></a><strong>FileSystemManager</strong></h4><p>管理一组文件系统。此接口用于按名称从这些文件系统之一中定位获取 org.apache.commons.vfs2.FileObject 。</p><h4 id="FileProvider"><a href="#FileProvider" class="headerlink" title="FileProvider"></a><strong>FileProvider</strong></h4><p>文件提供者。每个文件提供者负责处理特定 URI 的文件。</p><h4 id="FileNameParser"><a href="#FileNameParser" class="headerlink" title="FileNameParser"></a><strong>FileNameParser</strong></h4><p>提供将文件名解析为 org.apache.commons.vfs2.FileName 的方法。</p><h4 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a><strong>FileSystem</strong></h4><p>一个文件系统，由文件的层次结构组成。</p><h4 id="FileObject"><a href="#FileObject" class="headerlink" title="FileObject"></a><strong>FileObject</strong></h4><p>代表一个文件，用于访问文件的内容和结构。有两种类型的文件：文件夹，包含其他文件；普通文件，包含数据或内容。一个文件夹可能没有任何内容，普通文件不能包含其他文件。</p><h4 id="FilesCache"><a href="#FilesCache" class="headerlink" title="FilesCache"></a><strong>FilesCache</strong></h4><p>文件缓存接口。VFS 内置一下几种实现，SoftRefFilesCache（软引用，默认值），WeakRefFilesCache（弱引用），DefaultFilesCache（没有过期和限制），LRUFilesCache（LRU实现，默认容量100个），NullFilesCache（空实现，不做任何缓存）。</p><h4 id="FileSelector"><a href="#FileSelector" class="headerlink" title="FileSelector"></a><strong>FileSelector</strong></h4><p>该接口用于查找子文件时定义选择规则，使用方式 FileObject.findFiles(FileSelector) 。VFS 内置了 7 种选择器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">FileSelector</span> <span class="variable">SELECT_SELF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDepthSelector</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">FileSelector</span> <span class="variable">SELECT_SELF_AND_CHILDREN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDepthSelector</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">FileSelector</span> <span class="variable">SELECT_CHILDREN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDepthSelector</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">FileSelector</span> <span class="variable">EXCLUDE_SELF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDepthSelector</span>(<span class="number">1</span>, <span class="number">2147483647</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FileSelector SELECT_FILES;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FileSelector SELECT_FOLDERS;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FileSelector SELECT_ALL;</span><br></pre></td></tr></table></figure><p>Apache VFS 提供四个FileSelector实现类：</p><ul><li><code>AllFileSelector</code> 顾名思义，将选择所有文件</li><li><code>FileDepthSelector (int minDepth, int maxDepth)</code> 选择特定深度的所有文件,以最小深度，最大深度为参数</li><li><code>FileFilterSelector</code> 选择所有给定文件对象的子文件。和FileFilter非常象。（那还要这个干什么？？），可以接受一个FileFilter作为参数</li><li><code>FileTypeSelector (FileType type)</code> 选择特定类型的文件。 Apache VFS的文件类型FileType对象只有四种类型：<ul><li>FILE  文件</li><li>FILE_OR_FOLDER  文件或目录</li><li>FOLDER  目录</li><li>FILE_IMAGINARY  尚不存在的文件</li></ul></li></ul><p><strong>加载流程</strong></p><blockquote><p>VFS 加载文件流程大致如下：FileSystemManager 解析文件名，通过文件名中的协议（如ftp://中的ftp）获取对应 FileProvider 对象，FileProvider 通过 FileNameParser 对象解析文件名获取对应的 FileSystem 对象，通过 FileSystem 对象的 resolveFile 方法获取文件（默认先从缓存中查找，不存在再调用 createFile 方法创建 FileObject 对象，FileObject 就是实体文件的抽象，提供读取和修改等相关能力）</p></blockquote><h3 id="使用apache-commons-vfs"><a href="#使用apache-commons-vfs" class="headerlink" title="使用apache-commons-vfs"></a>使用apache-commons-vfs</h3><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- other --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vfs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-net<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-net<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-vfs2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--访问Sftp服务器文件时需要引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jcraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.55<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--访问Http服务器文件时需要引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.apache_vfs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.provider.ftp.FtpFileSystemConfigBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.vfs2.provider.sftp.SftpFileSystemConfigBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021-10-24 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyVfsTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyVfsTest.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">FileSystemManager</span> <span class="variable">fsMng</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化vfs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileSystemException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> FileSystemManager <span class="title function_">vfsInit</span><span class="params">()</span> <span class="keyword">throws</span> FileSystemException &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;vfs使用,初始化信息...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (fsMng == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FTPSetting();</span><br><span class="line">                SFTPSetting();</span><br><span class="line">                fsMng = VFS.getManager();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileSystemException ex) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;vfs使用,初始化信息...失败&quot;</span>,ex);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSystemException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fsMng;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FileSystemOptions <span class="title function_">FTPSetting</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FtpFileSystemConfigBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> FtpFileSystemConfigBuilder.getInstance();</span><br><span class="line">        <span class="type">FileSystemOptions</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemOptions</span>();</span><br><span class="line">        <span class="comment">//解决中文乱码</span></span><br><span class="line">        builder.setControlEncoding(options, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        builder.setServerLanguageCode(options, <span class="string">&quot;zh&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FileSystemOptions <span class="title function_">SFTPSetting</span><span class="params">()</span> <span class="keyword">throws</span> FileSystemException &#123;</span><br><span class="line">        <span class="type">FileSystemOptions</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemOptions</span>();</span><br><span class="line">        <span class="type">SftpFileSystemConfigBuilder</span> <span class="variable">sftpBuilder</span> <span class="operator">=</span> SftpFileSystemConfigBuilder.getInstance();</span><br><span class="line">        <span class="comment">// 设false时，URI要传绝对路径,设true时，URI传相对于远程用户根目录的相对路径</span></span><br><span class="line">        sftpBuilder.setUserDirIsRoot(options, <span class="literal">true</span>);</span><br><span class="line">        sftpBuilder.setStrictHostKeyChecking(options, <span class="string">&quot;no&quot;</span>);</span><br><span class="line"><span class="comment">//        sftpBuilder.setTimeout(options, 10000);</span></span><br><span class="line">        <span class="keyword">return</span> options;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileObject</span> <span class="variable">fo</span> <span class="operator">=</span> fsMng.resolveFile(path);</span><br><span class="line">            fo.delete();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileSystemException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileObject</span> <span class="variable">fo</span> <span class="operator">=</span> fsMng.resolveFile(path);</span><br><span class="line">            <span class="keyword">return</span> fo.getType().equals(FileType.FOLDER);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileSystemException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取输入流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title function_">getFileToInputStream</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileObject</span> <span class="variable">fo</span> <span class="operator">=</span> fsMng.resolveFile(url);</span><br><span class="line">            <span class="keyword">return</span> fo.getContent().getInputStream();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileSystemException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OutputStream <span class="title function_">getOutputStream</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileObject</span> <span class="variable">fo</span> <span class="operator">=</span> fsMng.resolveFile(path);</span><br><span class="line">            <span class="keyword">return</span> fo.getContent().getOutputStream();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileSystemException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取字节数组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getFileToByte(String url) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getFileToInputStream(url);</span><br><span class="line">        <span class="keyword">return</span> IOUtils.toByteArray(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadURL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">uploadFileToByte</span><span class="params">(String uploadURL,<span class="type">byte</span>[] bytes)</span>&#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">output</span>  <span class="operator">=</span>  <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileObject</span> <span class="variable">ftpFile</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">byteLength</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">            ftpFile = fsMng.resolveFile(uploadURL);</span><br><span class="line">            <span class="keyword">if</span>(ftpFile != <span class="literal">null</span> &amp;&amp; ftpFile.exists() == <span class="literal">false</span>)&#123;</span><br><span class="line">                ftpFile.createFile();</span><br><span class="line">            &#125;</span><br><span class="line">            output = ftpFile.getContent().getOutputStream();</span><br><span class="line">            IOUtils.write(bytes,output);</span><br><span class="line">            <span class="keyword">if</span>(ftpFile.isFile())&#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> ftpFile.getContent().getSize();</span><br><span class="line">                <span class="keyword">if</span>(byteLength == size)&#123;</span><br><span class="line">                    logger.debug(<span class="string">&quot;文件上传成功size:&#123;&#125;&quot;</span>,size);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;创建文件夹成功getURL：&#123;&#125;&quot;</span>,ftpFile.getURL());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(output != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    output.close();</span><br><span class="line">                    output.flush();</span><br><span class="line">                    ftpFile.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">                   var2.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileObject</span> <span class="variable">fo</span> <span class="operator">=</span> fsMng.resolveFile(path);</span><br><span class="line">            <span class="keyword">return</span> fo.getType().equals(FileType.FILE);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileSystemException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数描述：根据传入的文件路径创建文件夹(包括各级父文件夹)。如果路径中有文件，会自动去掉文件名。 （文件的判断是</span></span><br><span class="line"><span class="comment">     * 以最后一个&quot;/&quot;之后是否有&quot;.&quot;为标识的，）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果创建成功，返回true；否则，返回false;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        path = path.replaceAll(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果该路径已&quot;/&quot;结尾，则整个字符串都是路径</span></span><br><span class="line">        <span class="keyword">if</span> (path.endsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">            realPath = path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fileNamePoint</span> <span class="operator">=</span> path.lastIndexOf(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取真正的路径</span></span><br><span class="line">            <span class="keyword">if</span> (fileNamePoint &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                realPath = path.substring(<span class="number">0</span>, fileNamePoint);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 读取文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> path.substring(fileNamePoint + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 如果读取的文件名中没有&quot;.&quot;，说明整个字符串都是路径</span></span><br><span class="line">            <span class="keyword">if</span> (fileName.indexOf(<span class="string">&quot;.&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                realPath = path;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileObject</span> <span class="variable">fo</span> <span class="operator">=</span> fsMng.resolveFile(realPath);</span><br><span class="line">            fo.createFolder();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数描述：对文件进行copy</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceFilePath 源文件的全部路径+文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetFilePath 目标文件的全部路径+文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> overWrite      如果目标文件存在，是否覆盖。true:覆盖；false:不覆盖(当源文件和目标文件都存在并且不覆盖时,返回true)。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:成功；false:失败; (当源文件和目标文件都存在并且不覆盖时,返回true)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">copyFile</span><span class="params">(String sourceFilePath, String targetFilePath, <span class="type">boolean</span> overWrite)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(sourceFilePath) || StringUtils.isBlank(targetFilePath)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;源文件或者目标文件为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">FileObject</span> <span class="variable">from</span> <span class="operator">=</span> fsMng.resolveFile(sourceFilePath);</span><br><span class="line">        <span class="type">FileObject</span> <span class="variable">to</span> <span class="operator">=</span> fsMng.resolveFile(targetFilePath);</span><br><span class="line">        <span class="keyword">if</span> (to.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (to.getType() == FileType.FILE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (overWrite &amp;&amp; !to.delete()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;目标文件[&quot;</span> + targetFilePath + <span class="string">&quot;]被保护，不能被覆盖！&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!overWrite) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;目标文件[&quot;</span> + targetFilePath + <span class="string">&quot;]已经存在！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        to.copyFrom(from, Selectors.SELECT_ALL);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Moving a File to Another File ,没有进行磁盘空间大小的判断</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFile    源文件 eg: c:\windows\abc.txt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetFile 目标文件 eg: c:\temp\abc.txt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> overWrite  如果目标文件存在，是否覆盖</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> success</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">moveFile</span><span class="params">(String srcFile, String targetFile, <span class="type">boolean</span> overWrite)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (srcFile.equals(targetFile)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">FileObject</span> <span class="variable">src</span> <span class="operator">=</span> fsMng.resolveFile(srcFile);</span><br><span class="line">        <span class="comment">// File (or directory) to be moved</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(srcFile) &amp;&amp; !src.exists()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;源文件[&quot;</span> + srcFile + <span class="string">&quot;]不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Destination directory</span></span><br><span class="line">        <span class="type">FileObject</span> <span class="variable">to</span> <span class="operator">=</span> fsMng.resolveFile(targetFile);</span><br><span class="line">        <span class="keyword">if</span> (to.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (to.getType() == FileType.FILE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (overWrite &amp;&amp; !to.delete()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;目标文件[&quot;</span> + targetFile + <span class="string">&quot;]被保护，不能被覆盖！&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!overWrite) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;目标文件[&quot;</span> + targetFile + <span class="string">&quot;]已经存在！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        src.moveTo(to);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        print(path,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String path,  String printPath)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileSystemManager</span> <span class="variable">fsManager</span> <span class="operator">=</span> VFS.getManager();</span><br><span class="line">            <span class="type">FileSystemOptions</span> <span class="variable">opts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemOptions</span>();</span><br><span class="line">            <span class="keyword">if</span> (path.startsWith(<span class="string">&quot;sftp:&quot;</span>)) &#123;</span><br><span class="line">                FTPSetting();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">FileObject</span> <span class="variable">fileObject</span> <span class="operator">=</span> fsManager.resolveFile(path, opts);</span><br><span class="line">            <span class="keyword">if</span> (fileObject.isFolder()) &#123;</span><br><span class="line">                FileObject[] childs = fileObject.getChildren();</span><br><span class="line">                <span class="keyword">for</span> (FileObject child : childs) &#123;</span><br><span class="line">                    print(child,printPath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                print(fileObject,printPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(FileObject fileObject, String printPath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (printPath != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(printPath));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n----------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;url：&quot;</span> + fileObject.getPublicURIString());</span><br><span class="line">        System.out.println(<span class="string">&quot;ModifiedTime：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(fileObject.getContent().getLastModifiedTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;---------- content ----------&quot;</span>);</span><br><span class="line">        System.out.println(IOUtils.toString(fileObject.getContent().getInputStream(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> FileSystemException &#123;</span><br><span class="line">        vfsInit();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        fsMng.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testResolve</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileObject</span> <span class="variable">fo</span> <span class="operator">=</span> fsMng.resolveFile(<span class="string">&quot;D:\\tem2\\test\\temp2.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileObject</span> <span class="variable">foFolder</span> <span class="operator">=</span> fsMng.resolveFile(<span class="string">&quot;D:\\tem2\\test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取属性</span></span><br><span class="line"><span class="comment">         * 结果：</span></span><br><span class="line"><span class="comment">         * org.apache.commons.vfs2.provider.local.LocalFileSystem@4f970963</span></span><br><span class="line"><span class="comment">         * parent：file:///D:/tem2/test</span></span><br><span class="line"><span class="comment">         * name：file:///D:/tem2/test/temp2.txt</span></span><br><span class="line"><span class="comment">         * path：D:\tem2\test\temp2.txt</span></span><br><span class="line"><span class="comment">         * pubURI：file:///D:/tem2/test/temp2.txt</span></span><br><span class="line"><span class="comment">         * URI：file:///D:/tem2/test/temp2.txt</span></span><br><span class="line"><span class="comment">         * URL：file:///D:/tem2/test/temp2.txt</span></span><br><span class="line"><span class="comment">         * 是否文件：true</span></span><br><span class="line"><span class="comment">         * 是否文件夹：false</span></span><br><span class="line"><span class="comment">         * 是否符号链接：false</span></span><br><span class="line"><span class="comment">         * 是否可执行：true</span></span><br><span class="line"><span class="comment">         * 是否隐藏：false</span></span><br><span class="line"><span class="comment">         * type：file</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;/n----------&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(fo.getFileSystem()); // LocalFileSystem</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;parent：&quot;+fo.getParent().toString());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;name：&quot;+fo.getName());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;path：&quot;+fo.getPath());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;pubURI：&quot;+fo.getPublicURIString());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;URI：&quot;+fo.getURI().toString());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;URL：&quot;+fo.getURL());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否文件：&quot; + fo.isFile());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否文件夹：&quot; + fo.isFolder());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否符号链接：&quot; + fo.isSymbolicLink());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否可执行：&quot; + fo.isExecutable());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;是否隐藏：&quot; + fo.isHidden());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;type：&quot;+fo.getType());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 读取内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (fo.isFile()) &#123;</span><br><span class="line">            <span class="type">FileContent</span> <span class="variable">fc</span> <span class="operator">=</span> fo.getContent();</span><br><span class="line">            <span class="comment">// fc.getInputStream();</span></span><br><span class="line">            <span class="comment">// fc.getByteArray();</span></span><br><span class="line">            <span class="comment">// 获取内容 - 字符串形式</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> fc.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 查找文件  获取子文件</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 结果：</span></span><br><span class="line"><span class="comment">         * --file:///D:/tem2/test/temp2.txt</span></span><br><span class="line"><span class="comment">         * --file:///D:/tem2/test/test1</span></span><br><span class="line"><span class="comment">         * --file:///D:/tem2/test</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;/n----------&quot;);</span></span><br><span class="line"><span class="comment">//        if (foFolder.isFolder()) &#123;</span></span><br><span class="line"><span class="comment">//            FileObject[] files = foFolder.findFiles(Selectors.SELECT_ALL);</span></span><br><span class="line"><span class="comment">//            for (int i = 0; i &lt; files.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;--&quot; + files[i].getName());</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            // 获取所有子文件</span></span><br><span class="line"><span class="comment">//            FileObject[] foArr = fo.getChildren();</span></span><br><span class="line"><span class="comment">//            // 获取子文件（名称为test）</span></span><br><span class="line"><span class="comment">//            FileObject test = fo.getChild(&quot;a.txt&quot;);</span></span><br><span class="line"><span class="comment">//            // 从所有后代中获取类型是文件的文件</span></span><br><span class="line"><span class="comment">//            FileObject[] files = fo.findFiles(Selectors.SELECT_FILES);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 删除文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (fo.isFolder()) &#123;</span><br><span class="line">            <span class="comment">// 删除此文件和所有子文件, 返回删除的数量</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">delCount</span> <span class="operator">=</span> fo.deleteAll();<span class="comment">// 同fo.delete(Selectors.SELECT_ALL);</span></span><br><span class="line"><span class="comment">// 只删除所有子文件</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">del2</span> <span class="operator">=</span> fo.delete(Selectors.EXCLUDE_SELF);</span><br><span class="line">            <span class="comment">// 只删除直接子文件和空目录</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">del3</span> <span class="operator">=</span> fo.delete(Selectors.SELECT_CHILDREN);</span><br><span class="line">            <span class="comment">// 只删除文件</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">del4</span> <span class="operator">=</span> fo.delete(Selectors.SELECT_FILES);</span><br><span class="line">            <span class="comment">// 只删除空的子目录</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">del5</span> <span class="operator">=</span> fo.delete(Selectors.SELECT_FOLDERS);</span><br><span class="line">            <span class="comment">// 删除目录本身（如果包含子文件则删除失败返回0）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">del6</span> <span class="operator">=</span> fo.delete(Selectors.SELECT_SELF);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 目录不为空则删除失败返回false</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">suc</span> <span class="operator">=</span> fo.delete();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fo.isFile()) &#123;</span><br><span class="line">            <span class="comment">// 删除文件本身</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">suc</span> <span class="operator">=</span> fo.delete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭</span></span><br><span class="line">        fo.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListener</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 监听文件创建，修改或删除</span></span><br><span class="line">        <span class="type">FileSystemManager</span> <span class="variable">fsMgr</span> <span class="operator">=</span> VFS.getManager();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;D:\\tem2\\test\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileObject</span> <span class="variable">fo</span> <span class="operator">=</span> fsMgr.toFileObject(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line">        <span class="comment">// 添加监听器</span></span><br><span class="line">        fo.getFileSystem().addListener(fo, <span class="keyword">new</span> <span class="title class_">MyListener</span>());</span><br><span class="line">        <span class="keyword">if</span> (!fo.exists()) &#123;</span><br><span class="line">            fo.createFile();</span><br><span class="line">        &#125;</span><br><span class="line">        fo.setWritable(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//        fo.delete();</span></span><br><span class="line">        fo.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">FileListener</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileCreated</span><span class="params">(FileChangeEvent event)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;fileCreated：&quot;</span>+event.getFileObject().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileDeleted</span><span class="params">(FileChangeEvent event)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;fileDeleted：&quot;</span>+event.getFileObject().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileChanged</span><span class="params">(FileChangeEvent event)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;fileChanged：&quot;</span>+event.getFileObject().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDownForByte</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取</span></span><br><span class="line">            System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line"><span class="comment">//            String url = &quot;file:///D:/tem2/temp.txt&quot;;</span></span><br><span class="line"><span class="comment">//  String url = &quot;zip://file:///D:/tem2/晚安玫瑰.rar!/原始风景.txt&quot;;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;sftp://root:root@192.168.43.128:22/temp/temp.txt&quot;</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = getFileToByte(url);</span><br><span class="line">            System.out.println(<span class="string">&quot;读取：&quot;</span> + url);</span><br><span class="line">            System.out.println(<span class="string">&quot;读取到长度：&quot;</span> + bytes.length);</span><br><span class="line">            System.out.println(<span class="string">&quot;读取到内容：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 写入</span></span><br><span class="line">            System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pathUrl</span> <span class="operator">=</span> <span class="string">&quot;sftp://root:root@192.168.43.128/temp/temp2.txt&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;写入：&quot;</span> + pathUrl);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> uploadFileToByte(pathUrl, <span class="string">&quot;hello temp2 &gt; java:xiaoai&quot;</span>.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;result:&quot;</span> + (result ? <span class="string">&quot;writer success!&quot;</span> : <span class="string">&quot;writer failed!&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//  copyFile(&quot;D:/tem2/java.jpeg&quot;,&quot;D:/tem2/javaCope.jpeg&quot;,true);</span></span><br><span class="line"><span class="comment">//        moveFile(&quot;D:/tem2/javaCope.jpeg&quot;,&quot;D:/tem2/javaCopeMove.jpeg&quot;,true);</span></span><br><span class="line"><span class="comment">//        print(&quot;D:\\tem2\\test&quot;);</span></span><br><span class="line"><span class="comment">//        print(&quot;https://www.baidu.com/index.html&quot;);</span></span><br><span class="line">        print(<span class="string">&quot;https://www.baidu.com/index.html&quot;</span>,<span class="string">&quot;D:\\tem2\\test\\temp2.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-maven打包部署</title>
      <link href="/aiyblog/2023/02/26/java/java-maven%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2/"/>
      <url>/aiyblog/2023/02/26/java/java-maven%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>打包参考：</p><ul><li>打zip包包含class：<a href="https://www.cnblogs.com/jimmyfan/p/11340899.html">https://www.cnblogs.com/jimmyfan/p/11340899.html</a></li><li>打zip包包含jar：<a href="https://blog.csdn.net/u011177064/article/details/104038302">https://blog.csdn.net/u011177064/article/details/104038302</a></li></ul><h2 id="maven项目打包"><a href="#maven项目打包" class="headerlink" title="maven项目打包"></a>maven项目打包</h2><h3 id="1-打成jar包"><a href="#1-打成jar包" class="headerlink" title="1.打成jar包"></a>1.打成jar包</h3><p>正常maven打包配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>maven命令打包：<code>mvn package</code>  或 <code>mvn -Dmaven.test.skip=true package</code></li><li>idea图像化界面</li></ul><p><img src="../img/image-20211027232734890.png" alt="image-20211027232734890"></p><h3 id="2-1-打zip包：包内包含class文件"><a href="#2-1-打zip包：包内包含class文件" class="headerlink" title="2-1.打zip包：包内包含class文件"></a>2-1.打zip包：包内包含class文件</h3><p>使用maven的<code>assembly</code>打包插件。</p><ul><li>pom添加配置：pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>compile-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--只对yml文件进行替换--&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--只对yml文件进行替换--&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/conf<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- springboot maven打包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/resources/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--添加配置跳过测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加配置跳过测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加打包配置文件：resources/assembly.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>package<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    $&#123;groupId&#125;:$&#123;artifactId&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>bin<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/bin<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>777<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/conf<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/conf<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/classes<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.class<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>META-INF/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动脚本：编写后可添加压缩到bin目录下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -----./bin/start.sh</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">java程序所在目录</span></span><br><span class="line">APP_HOME=..</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要启动的java主程序</span></span><br><span class="line">APP_MAIN_CLASS=&quot;com.xiaoai.PoiTestApplication&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拼凑完整classpath参数，包括指定lib目录下所有jar</span></span><br><span class="line">CLASSPATH=&quot;$APP_HOME/conf:$APP_HOME/lib/*:$APP_HOME/classes&quot;</span><br><span class="line">s_pid=0</span><br><span class="line">checkPid() &#123;</span><br><span class="line">  java_ps=`jps -l | grep $APP_MAIN_CLASS`</span><br><span class="line">  if [ -n &quot;$java_ps&quot; ];then</span><br><span class="line">    s_pid=`echo $java_ps | awk &#x27;&#123;print %1&#125;&#x27;`</span><br><span class="line">  else</span><br><span class="line">    s_pid=0</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">  checkPid</span><br><span class="line">  if [ $s_pid -ne 0 ];then</span><br><span class="line">    echo &quot;================================================================&quot;</span><br><span class="line">    echo &quot;warn: $APP_MAIN_CLASS already started! (pid=$s_pid)&quot;</span><br><span class="line">    echo &quot;================================================================&quot;</span><br><span class="line">  else</span><br><span class="line">    echo -n &quot;Starting $APP_MAIN_CLASS ...&quot;</span><br><span class="line">    nohup java -classpath $CLASSPATH $APP_MAIN_CLASS &gt;./st.out 2&gt;&amp;1 &amp;</span><br><span class="line">    checkPid</span><br><span class="line">    if [ $s_pid -ne 0 ]; then</span><br><span class="line">        echo &quot;(pid=$s_pid)[ok]&quot;</span><br><span class="line">    else</span><br><span class="line">      echo &quot;[Failed]&quot;</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;start project......&quot;</span><br><span class="line">start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -----./bin/start.cmd</span></span></span><br><span class="line">@echo off</span><br><span class="line">set APP_HOME=..</span><br><span class="line">set CLASS_PATH=%APP_HOME%/lib/*;%APP_HOME%/classes;%APP_HOME%/conf;</span><br><span class="line">set APP_MAIN_CLASS=【主类路径 如：com.xiaoai.PoiTestApplication】</span><br></pre></td></tr></table></figure><ul><li>目录结构：上传zip解压到一个目录下。<ul><li>bin：启停脚本</li><li>classes：编译后文件</li><li>conf：编译后相关配置配置文件 如：application.yml等</li><li>lib：依赖jar</li></ul></li></ul><p><img src="../img/image-20211027235939695.png" alt="image-20211027235939695"></p><h3 id="2-2-打zip包：包内包含jar文件"><a href="#2-2-打zip包：包内包含jar文件" class="headerlink" title="2-2. 打zip包：包内包含jar文件"></a>2-2. 打zip包：包内包含jar文件</h3><p>使用maven的<code>assembly</code>打包插件。</p><p>相当于打包进行配置分离，避免配置修改每次都需要从新打jar包上传服务器部署。</p><ul><li>pom添加配置：pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定启动类，将依赖打成外部jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 是否要把第三方jar放到manifest的classpath中 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 外部依赖jar包的最终位置 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 项目启动类 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xiaoai.PoiTestApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用assembly打包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- assembly配置文件位置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/resources/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 打包发布时，跳过单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加打包配置文件：resources/assembly.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        必须写，否则打包时会有 assembly ID must be present and non-empty 错误</span></span><br><span class="line"><span class="comment">        这个名字最终会追加到打包的名字的末尾，如项目的名字为 speed-api-0.0.1-SNAPSHOT,</span></span><br><span class="line"><span class="comment">        则最终生成的包名为 speed-api-0.0.1-SNAPSHOT-bin.zip</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>bin<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 打包后的文件格式,可以是zip,tar,tar.gz,tar.bz2,jar,war,dir --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 压缩包下是否生成和项目名相同的根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不使用项目的artifact，第三方jar不要解压，打包进zip文件的lib目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 把项目相关的说明文件，打包进zip文件的根目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>README*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>LICENSE*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>NOTICE*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 把项目的配置文件，打包进zip文件的config目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 把项目的脚本文件，打包进zip文件的bin目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/bin<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>bin<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 把项目自己编译出来的jar文件，打包进zip文件的根目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -----./bin/start.sh</span></span></span><br><span class="line">nohup java -jar -Dloader.path=..,../lib,../config ../poitest-0.0.1-SNAPSHOT.jar &gt;../console.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -----在jar包当前目录下重启动命令：指定配置文件</span></span></span><br><span class="line">nohup java -jar -Dloader.path=.,./lib,./config -Dspring.config.location=./config/application.yml ./poitest-0.0.1-SNAPSHOT.jar &gt;./console.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>目录结构：上传zip解压到一个目录下。<ul><li>bin：启停脚本</li><li>config：编译后配置文件 如：application.yml等</li><li>lib：依赖jar</li><li>文件console.log：运行日志</li><li>文件info.txt：记录重启命令</li><li>jar包：打包的项目jar</li></ul></li></ul><p><img src="../img/image-20211028005948523.png" alt="image-20211028005948523"></p><blockquote><p>项目的jar包也可以移动到lib目录下和其他jar包放一起，但需要注意启动时候的命令。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射、函数式编程、注解</title>
      <link href="/aiyblog/2023/02/26/java/java%E5%8F%8D%E5%B0%84%E3%80%81%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E3%80%81%E6%B3%A8%E8%A7%A3/"/>
      <url>/aiyblog/2023/02/26/java/java%E5%8F%8D%E5%B0%84%E3%80%81%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E3%80%81%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="反射笔记"><a href="#反射笔记" class="headerlink" title="反射笔记"></a>反射笔记</h2><p>java三阶段：</p><ul><li>1-源码 </li><li>2-class </li><li>3-runtime</li></ul><h3 id="获取Class对象的方式"><a href="#获取Class对象的方式" class="headerlink" title="获取Class对象的方式"></a>获取Class对象的方式</h3><table><thead><tr><th align="left">方式</th><th align="left"></th></tr></thead><tbody><tr><td align="left">Class.forName(“全类名”)</td><td align="left">将自己吗文件加载进内存，返回Class对象<br/>多用于配置文件，将类名定义在配置文件中，读取文件，加载类</td></tr><tr><td align="left">类名.class</td><td align="left">通过类名的属性class获取<br/>多用于参数传递</td></tr><tr><td align="left">对象.getClass()</td><td align="left">getClass()方法在 Object类中定义着<br/>多用于对象的获取字节码的方式</td></tr></tbody></table><blockquote><p>结论：同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个</p></blockquote><h3 id="Class对象功能"><a href="#Class对象功能" class="headerlink" title="Class对象功能"></a>Class对象功能</h3><p><strong>暴力反射</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 忽略访问权限修饰符的安全检查</span></span><br><span class="line">Field/Constructor/Method对象.setAccessible(<span class="literal">true</span>) </span><br></pre></td></tr></table></figure><blockquote><p>Declared 不考虑修饰符</p></blockquote><p><strong>获取构造方法/们</strong></p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">Constructor&lt;?&gt;[]   getConstructors()</td><td align="left">获取构造方法</td></tr><tr><td align="left">Constructor<T>     getConstructor(类&lt;?&gt;… parameterTypes)</td><td align="left">获取指定参数的构造方法</td></tr><tr><td align="left">Constructor<T>     getDeclaredConstructor(类&lt;?&gt;… parameterTypes)</td><td align="left"></td></tr><tr><td align="left">Constructor&lt;?&gt;[]   getDeclaredConstructors()</td><td align="left"></td></tr><tr><td align="left"><strong>[操作]</strong></td><td align="left"></td></tr><tr><td align="left">T    Construct对象.newInstance(Object… initargs)</td><td align="left"></td></tr><tr><td align="left">T    Class对象.newInstance()</td><td align="left">空参数构造方法创建对象可这样简化</td></tr></tbody></table><blockquote><p> T表示返回对象类型</p></blockquote><p><strong>获取成员变量/们</strong></p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">Field[]     getFields()</td><td align="left">获取所有public修饰的成员变量</td></tr><tr><td align="left">Field        getField(String name)</td><td align="left">获取指定名称的public修饰的成员变量</td></tr><tr><td align="left">Field[]     getDeclaredFields()</td><td align="left">获取所有的成员变量，不考虑修饰符</td></tr><tr><td align="left">Field        getDeclaredField(String name)</td><td align="left">获取指定名称的，不考虑修饰符</td></tr><tr><td align="left"><strong>[操作]</strong></td><td align="left"></td></tr><tr><td align="left">void      set(Object obj, Object value)</td><td align="left">设置值</td></tr><tr><td align="left">Object     get(Object obj)</td><td align="left">获取值</td></tr></tbody></table><p><strong>获取成员方法/们</strong></p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">Method[]  getMethods()</td><td align="left">获取public修饰的所有方法</td></tr><tr><td align="left">Method     getMethod(String name, 类&lt;?&gt;… parameterTypes)</td><td align="left">name 方法名称<br/>parameterTypes 参数类型列表</td></tr><tr><td align="left">Method[]    getDeclaredMethods()</td><td align="left"></td></tr><tr><td align="left">Method     getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)</td><td align="left"></td></tr><tr><td align="left"><strong>[操作]</strong></td><td align="left"></td></tr><tr><td align="left">Object invoke(Object obj, Object… args)</td><td align="left">执行方法<br/>参数obj：方法类的对<br/>参数args：方法参数列表</td></tr><tr><td align="left">String getName()</td><td align="left">获取方法名称</td></tr></tbody></table><p><strong>获取全类名</strong></p><blockquote><p>String getName()     </p></blockquote><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p> 通过匿名内部类和lambda表达式完成</p><h3 id="匿名内部类："><a href="#匿名内部类：" class="headerlink" title="匿名内部类："></a>匿名内部类：</h3><p>定义一个接口，该接口定义一个未实现的方法，当其他类方法参数用到该接口类型时，可以直接new该接口并实现方法即可。</p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式:"></a>Lambda表达式:</h3><p>当某个方法需要一个参数，这个参数类可以是一个接口并且接口只有一个方法时可用Lambda。</p><ul><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ul><p><strong>格式：</strong>(参数列表)-&gt;{一些重写方法的代码};<br><strong>可省略内容：</strong></p><ul><li>括号中参数列表的数据类型，可省略</li><li>括号中的参数如果只有一个，那么类型和括号都可以省略</li><li>如果{}中代码只有一行，无论是否有返回值，都可以省略（{}，return，分号）<pre><code>- 注意：要省略&#123;&#125;，return，分号必须一起省略</code></pre></li></ul><p><strong>两者实现都是：</strong>定义一个接口，接口只定义一个方法，</p><ul><li>直接创建接口并重写方法作为参数传入需要相应类型参数的方法中</li><li>匿名内部类需要重写方法和方法体，</li></ul><p><strong>区别：</strong>Lambda表达式更加简洁一些，在Lambda表达式中不需重写方法，</p><h3 id="Lambda引用"><a href="#Lambda引用" class="headerlink" title="Lambda引用"></a>Lambda引用</h3><p>可以简化lambda表达式来简化代码</p><ul><li>使用前提是对象名是已经存在的,成员方法也存在</li></ul><p>执行过程</p><ul><li>创建函数式接口–&gt;lambda实现接口方法–&gt;普通方法调用接口方法</li></ul><p><strong>【方法引用】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">// 函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Printabe</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printString</span><span class="params">(Printabe p)</span> &#123;</span><br><span class="line">    p.print(<span class="string">&quot;helloword&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里p调用的print(&quot;helloword&quot;)即等于调用了arg-&gt;System.out.println(arg)</span></span><br><span class="line">    <span class="comment">// &quot;helloword&quot;赋值给参数arg，方法体System.out.println(arg)打印了arg(即helloword)出来</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span>&#123;</span><br><span class="line">    <span class="comment">// Lambda表达式实现</span></span><br><span class="line">    <span class="comment">// p即print()方法的参数str,System.out.println(arg)即相当于该方法的方法体</span></span><br><span class="line">    printString(p-&gt;System.out.println(arg));  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 引用实现</span></span><br><span class="line">    printString(System.out::println); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【定义类对象引用方法】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span>&#123;</span><br><span class="line">    <span class="comment">// Lambda表达式实现</span></span><br><span class="line">    printString((s)-&gt;&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        t05_1MethodRerObj_方法引用 obj = <span class="keyword">new</span> <span class="title class_">t05_1MethodRerObj_</span>方法引用();</span><br><span class="line">        obj.printUpperCaseString(s);</span><br><span class="line">    &#125;); </span><br><span class="line">    <span class="comment">// 引用实现</span></span><br><span class="line">    t05_1MethodRerObj_方法引用 obj = <span class="keyword">new</span> <span class="title class_">t05_1MethodRerObj_</span>方法引用();</span><br><span class="line">    printString(obj::printUpperCaseString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【类名引用静态方法】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数式编程所需接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Calcable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calsABs</span><span class="params">(<span class="type">int</span> number)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> number,Calcable c)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.calsABs(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arg[])</span>&#123;</span><br><span class="line"><span class="comment">//  Lambda表达式实现</span></span><br><span class="line"><span class="type">int</span> <span class="variable">numberabs</span> <span class="operator">=</span> method(-<span class="number">10</span>, (n)-&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> Math.abs(n);  <span class="comment">// 这里相当于calsABs的方法体</span></span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 引用实现</span></span><br><span class="line"><span class="type">int</span> <span class="variable">numberabs2</span> <span class="operator">=</span> method(-<span class="number">10</span>, Math::abs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>【super引用父类方法】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>::父类方法名</span><br></pre></td></tr></table></figure><p><strong>【this引用本类方法】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>::本类方法名</span><br></pre></td></tr></table></figure><p><strong>【类引用构造方法】</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数式编程所需接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonBuilder</span>&#123;</span><br><span class="line">   builPerson(String name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个方法，参数传w递姓名和PsesonBuilder接口，方法中通过姓名创建Person对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">(String name,PersonBuilder pb)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> pb.builPerson(name);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda表达式实现</span></span><br><span class="line">printName(<span class="string">&quot;迪丽热巴&quot;</span>, (String name)-&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name); <span class="comment">//这里相当 于builPerson的方法体</span></span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 引用实现</span></span><br><span class="line"><span class="comment">//创建对象已知，new</span></span><br><span class="line"><span class="comment">//使用Person类的带参构造方法，通过传递的姓名创建对象</span></span><br><span class="line">printName(<span class="string">&quot;古力娜扎&quot;</span>, Person::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子<span class="number">2</span>：创建数组------------------------------------------------</span><br><span class="line"><span class="comment">// 函数式编程所需接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AarryBuilder</span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个创建int类型数组的方法，参数传递数组场地，返回创建好的int类型数组</span></span><br><span class="line">    <span class="type">int</span>[] builderAray(<span class="type">int</span> length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] CreateArray(<span class="type">int</span> length,AarryBuilder ab) &#123;</span><br><span class="line"><span class="keyword">return</span> ab.builderAray(length);<span class="comment">//该语句相当于使用了lambda表达式内分方法体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda表达式</span></span><br><span class="line">CreateArray(<span class="number">10</span>, (len)-&gt;&#123;<span class="comment">//第二参数相当于实现接口方法便于创建方法调用该方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用实现</span></span><br><span class="line"><span class="comment">// int[]引用new 根据参数传递的长度来创建数组</span></span><br><span class="line">CreateArray(<span class="number">10</span>,<span class="type">int</span>[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><strong>相关命令用到注解：</strong>javadoc–生成文档  javap–反编译</p><ul><li>jdk1.5后新特性</li><li>说明程序的</li><li>定义注解--@interface </li><li>使用注解--@注解名称</li></ul><p><strong>注解本质</strong> 就是一个接口，默认继承annotation接口</p><p><strong>jdk预定义注解</strong></p><ul><li>@Override  ：检测被该注解标注的方法是否继承自父类(接口)</li><li>@Deprecated ：表示该注解标注的内容已过时</li><li>@SuppressWarnings ：压制警告</li></ul><p><strong>自定义注解</strong>  属性：接口中的抽象方法 其返回值类型有如下：</p><ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型数组    </li></ul><blockquote><p>定义属性 使用default关键字给属性赋初始值 使用注解时有默认值的属性可不赋值<br>使用注解时 只赋值一个属性且属性名叫value则value可省略<br>数组赋值 值用{}包裹，单个值{}可省</p></blockquote><p><strong>元注解</strong>：描述注解的注解</p><ul><li>@Target 描述注解能够作用位置<ul><li>ElementType.TYPE 表示只能作用到类上</li><li>ElementType.METHOD 可以作用到方法上</li><li>ElementType.FIELD可以作用到成员变量上</li></ul></li><li>@Retention 描述注解被保留的阶段<ul><li>RetentionPolicy.RUNTIME 被描述的注解会保留到class字节码文件中被jvm读取到</li></ul></li><li>@Documented 描述注解是否被抽取到api文档中</li><li>@Inherited 描述注解是否被子类继承</li></ul><h4 id="解析注解-获取属性中定义的属性值"><a href="#解析注解-获取属性中定义的属性值" class="headerlink" title="解析注解 获取属性中定义的属性值"></a>解析注解 获取属性中定义的属性值</h4><ul><li><p>获取加了注解的类字节码class文件对象  即.class等</p></li><li><p>获取注解对象  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其实就是在内存中生成了一个该注解接口的子类实现对象</span></span><br><span class="line">字节码文件对象.getAnnotation(注解字节码 即注解名.class)  </span><br></pre></td></tr></table></figure></li><li><p>调用注解对象中定义的抽象方法(即注解的属性)获取属性值 </p></li></ul><p><img src="https://img2020.cnblogs.com/blog/1594818/202009/1594818-20200918003254916-155626343.png"></p><p><img src="https://img2020.cnblogs.com/blog/1594818/202009/1594818-20200918003335116-1150423109.png"></p><p><img src="https://img2020.cnblogs.com/blog/1594818/202009/1594818-20200918003450166-507088100.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安全随机数</title>
      <link href="/aiyblog/2023/02/26/linux/linux%E5%AE%89%E5%85%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%86%B5/"/>
      <url>/aiyblog/2023/02/26/linux/linux%E5%AE%89%E5%85%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%86%B5/</url>
      
        <content type="html"><![CDATA[<ul><li>java生成安全随机数导致进程一直阻塞</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">randomSalt</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> SecureRandom.getInstanceStrong();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>) % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">&quot;num&quot;</span> : <span class="string">&quot;char&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;char&quot;</span>.equalsIgnoreCase(str)) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">nextInt</span> <span class="operator">=</span> random.nextInt(<span class="number">2</span>) % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">65</span> : <span class="number">97</span>;</span><br><span class="line">                    val.append((<span class="type">char</span>) (nextInt + random.nextInt(<span class="number">26</span>)));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;num&quot;</span>.equalsIgnoreCase(str)) &#123;</span><br><span class="line">                    val.append(random.nextInt(<span class="number">10</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> val.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>服务器运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看熵值</span></span><br><span class="line">cat /proc/sys/kernel/random/entropy_avail</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询haveged服务</span></span><br><span class="line">service haveged status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启haveged服务</span></span><br><span class="line">systemctl start haveged.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令记录</title>
      <link href="/aiyblog/2023/02/26/linux/linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/aiyblog/2023/02/26/linux/linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.secure日志</span><br><span class="line">/var/log/secure日志用来记录登录成功和失败</span><br><span class="line"></span><br><span class="line">2.wtmp日志</span><br><span class="line">/var/log/wtmp：该日志文件永久记录每个用户登录、注销及系统的启动、停机的事件，使用last命令查看</span><br><span class="line"></span><br><span class="line">3.utmp日志</span><br><span class="line">/var/run/utmp：该日志文件记录有关当前登录的每个用户的信息。如 who、w、users、finger等就需要访问这个文件</span><br><span class="line"></span><br><span class="line">4.lastlog日志</span><br><span class="line">/var/log/lastlog ：记录最后一次用户成功登陆的时间、登陆IP等信息</span><br></pre></td></tr></table></figure><p>Centos的rsyslog日志系统（三）：rsyslog配置文件：<a href="https://blog.csdn.net/weixin_38924500/article/details/114408537">https://blog.csdn.net/weixin_38924500/article/details/114408537</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在linux中创建文件和目录时，单个用户创建的目录权限都是一致的，创建的文件权限也都是一致的，控制这个创建权限的叫做权限掩码。</span><br><span class="line">权限掩码的作用就是规范初创文件和目录时候的权限设置，免去了创建后再次修改权限的问题。</span><br><span class="line">查看用户的权限掩码命令：umask</span><br><span class="line">目录的最大权限是777，减去umask的后三位(022)，该用户创建的目录权限即默认是755</span><br><span class="line">文件的权限必须为偶数，如果是奇数，则需-1变成偶数777-022=755，每一位都-1变成偶数，即为644</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改用户权限掩码  ***可以是1-3位数，每位数值必须&lt;=7</span><br><span class="line">umask ***</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="端口查看"><a href="#端口查看" class="headerlink" title="端口查看"></a>端口查看</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">## 端口查询</span><br><span class="line">一、查看哪些端口被打开  netstat -anp</span><br><span class="line">二、关闭端口号:iptables -A INPUT -p tcp --drop 端口号-j DROP</span><br><span class="line">　　iptables -A OUTPUT -p tcp --dport 端口号-j DROP</span><br><span class="line">三、打开端口号：iptables -A INPUT -ptcp --dport  端口号-j ACCEPT</span><br><span class="line">四、以下是linux打开端口命令的使用方法。</span><br><span class="line">　　nc -lp 23 &amp;(打开23端口，即telnet)</span><br><span class="line">　　netstat -an | grep 23 (查看是否打开23端口)</span><br><span class="line">五、linux打开端口命令每一个打开的端口，都需要有相应的监听程序才可以</span><br><span class="line"></span><br><span class="line">## 关闭端口</span><br><span class="line">第一获取端口号：使用 netstat -tnl 命令查看哪些端口打开了</span><br><span class="line">第二获取PID：使用 lsof -i:端口号 获取要封杀端口好的PID</span><br><span class="line">第三关闭：用 kill -9 PID号 关闭指定的端口</span><br><span class="line"></span><br><span class="line">## 端口占用 例如：80</span><br><span class="line">ps -ef |grep 80 </span><br><span class="line">lsof -i:80</span><br><span class="line">netstat -anp |grep :80 </span><br><span class="line">netstat -tunlp |grep :80</span><br></pre></td></tr></table></figure><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><ul><li><p>关闭linux sftp服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Subsystem sftp /usr/libexec/openssh/sftp-server注释掉</span><br><span class="line"># override default of no subsystems</span><br><span class="line">#Subsystem sftp /usr/libexec/openssh/sftp-server</span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">#重启ssh服务</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure></li><li><p>禁用root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 新增管理账户</span><br><span class="line">useradd osadmin</span><br><span class="line">passwd osadmin</span><br><span class="line"></span><br><span class="line"># 编辑/etc/sudoers文件添加权限</span><br><span class="line">root ALL=(ALL)  ALL</span><br><span class="line">osadmin ALL=(ALL)  ALL</span><br><span class="line"></span><br><span class="line"># 编辑/etc/ssh/sshd_config 禁用root</span><br><span class="line">PermitRootLogin no</span><br><span class="line"></span><br><span class="line"># 重启ssh服务</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure></li><li><p>sudo 免密码输入 例如用户：osadmin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">平时工作使用过程中，每次执行 sudo vim vimrc 的时候，还需要输入 MyUser 的密码，还是比较麻烦，也可以做如下设置：</span><br><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line">osadmin ALL=(ALL)    NOPASSWD: ALL      #可以让 osadmin账号在操作时不输入密码！(nopasswd:)</span><br><span class="line"></span><br><span class="line">#查看账号属性</span><br><span class="line">id osadmin </span><br><span class="line"></span><br><span class="line"># 添加用户组</span><br><span class="line"># 新增管理员账号也可以把 /etc/sudoers 中 管理员组wheel注释放开，把用户添加到管理员组</span><br><span class="line">usermod -G wheel osadmin </span><br></pre></td></tr></table></figure></li></ul><h3 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">搜索umask后发现如下的生效方式</span><br><span class="line">Configuration fileType of settingTargeted userWhen appliedShell access type</span><br><span class="line">/etc/profileDefault settingAll users including rootWhile user loginLogin shell</span><br><span class="line">/etc/bashrcDefault settingAll users including rootWhile user access additional shellNon-login shell</span><br><span class="line">/etc/profile.d/umask.sh   Custom settingAll users including rootWhile user login and while user access additional shell.Both Login shell and non-login shell</span><br><span class="line">/home/[user-name]/.bashrcCustom settingIndividual userWhile individual user login and access additional shellBoth Login shell and non-login shell</span><br></pre></td></tr></table></figure><h3 id="文件批量操作"><a href="#文件批量操作" class="headerlink" title="文件批量操作"></a>文件批量操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type f -mtime -1 -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><h3 id="查看pid"><a href="#查看pid" class="headerlink" title="查看pid"></a>查看pid</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">1.使用 ss 查看端口.  ss 一般用于转储套接字统计信息。它还可以显示所有类型的套接字统计信息，包括 PACKET、TCP、UDP、DCCP、RAW、Unix 域等。</span><br><span class="line">$ ss -lntpd | grep :22</span><br><span class="line"></span><br><span class="line">2.使用 netstat 查看. netstat 能够显示网络连接、路由表、接口统计信息、伪装连接以及多播成员。目前netstat 已经过时了，都推荐使用ss来代替。</span><br><span class="line">$ netstat -tnlp | grep :22</span><br><span class="line"></span><br><span class="line">3.使用 lsof 查看.lsof(list open files)是一个列出系统上被进程打开的文件的相关信息。</span><br><span class="line">$ lsof -i tcp:22</span><br><span class="line"></span><br><span class="line">4.使用 fuser 查看.fuser 可以显示出当前哪个程序在使用磁盘上的某个文件、挂载点、甚至网络端口，并给出程序进程的详细信息。fuser只把PID输出到标准输出，其他的都输出到标准错误输出。</span><br><span class="line">$ fuser 22/tcp</span><br><span class="line">22/tcp: 6806</span><br><span class="line"></span><br><span class="line">Linux 查看进程运行的完整路径方法通过ps及top命令查看进程信息时，只能查到相对路径，查不到的进程的详细信息，如绝对路径等。通过以下的方法来查看进程的详细信息：</span><br><span class="line">Linux在启动一个进程时，系统会在/proc下创建一个以PID命名的文件夹，在该文件夹下会有我们的进程的信息，其中包括一个名为exe的文件即记录了绝对路径，通过ll命令即可查看。</span><br><span class="line">$ ls -al /proc/PID</span><br><span class="line"></span><br><span class="line">/proc/pid目录下的有一些重要文件，挑几个使用频率高的讲一讲。 </span><br><span class="line">/proc/pid/environ 包含了进程的可用环境变量的列表 。程序出问题了如果不确定环境变量是否设置生效，可以cat这个文件出来查看确认一下。</span><br><span class="line">/proc/pid/fd/ 这个目录包含了进程打开的每一个文件的链接。从这里可以查看进程打开的文件描述符信息，包括标准输入、输出、错误流，进程打开的socket连接文件描述符也能看到，lsof命令也有类似的作用。</span><br><span class="line">/proc/pid/stat包含了进程的所有状态信息，进程号、父进程号、 线程组号、 该任务在用户态运行的时间 、 该任务在用内核态运行的时间、 虚拟地址空间的代码段、 阻塞信号的位图等等信息应有尽有。</span><br><span class="line">/proc/pid/cmdline 包含了用于开始进程的命令</span><br><span class="line">/proc/pid/cwd包含了当前进程工作目录的一个链接</span><br><span class="line">/proc/pid/exe包含了正在进程中运行的程序链接</span><br><span class="line">/proc/pid/mem包含了进程在内存中的内容</span><br><span class="line">/proc/pid/statm包含了进程的内存使用信息</span><br><span class="line"></span><br><span class="line">ps查看进程id，看看进程还在不在以及进程状态</span><br><span class="line">如果在的话strace、psstack看下进程当前信息，是不卡死在哪个位置，对比各帧最后调用信息找到异常点</span><br><span class="line">如果进程不再了，如果有corefile文件，直接上gdb查看corefile信息</span><br><span class="line">其他疑难杂症怀疑进程状态信息的时候，看看/proc/pid下面的进程状态信息，可能会给你启发。</span><br></pre></td></tr></table></figure><h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><p>参考：<a href="https://blog.csdn.net/DarrenXf/article/details/82970809">https://blog.csdn.net/DarrenXf/article/details/82970809</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">一、什么是defunct进程(僵尸进程)?</span><br><span class="line">在 Linux 系统中,一个进程结束了,但是他的父进程没有等待(调用wait / waitpid)他,那么他将变成一个僵尸进程。当用ps命令观察进程的执行状态时,看到这些进程的状态栏为defunct。僵尸进程是一个早已死亡的进程,但在进程表(processs table)中仍占了一个位置(slot)。</span><br><span class="line">但是如果该进程的父进程已经先结束了,那么该进程就不会变成僵尸进程。因为每个进程结束的时候,系统都会扫描当前系统中所运行的所有进程,看看有没有哪个进程是刚刚结束的这个进程的子进程,如果是的话,就由Init进程来接管他,成为他的父进程,从而保证每个进程都会有一个父进程。而Init进程会自动wait其子进程,因此被Init接管的所有进程都不会变成僵尸进程。</span><br><span class="line"></span><br><span class="line">二、 Linux下进程的运作方式</span><br><span class="line">每个 Linux进程在进程表里都有一个进入点(entry),核心进程执行该进程时使用到的一切信息都存储在进入点。当用 ps 命令察看系统中的进程信息时,看到的就是进程表中的相关数据。当以fork()系统调用建立一个新的进程后,核心进程就会在进程表中给这个新进程分配一个进入点,然后将相关信息存储在该进入点所对应的进程表内。这些信息中有一项是其父进程的识别码。</span><br><span class="line">子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程到底什么时候结束。那么会不会因为父进程太忙来不及 wait 子进程,或者说不知道子进程什么时候结束,而丢失子进程结束时的状态信息呢?</span><br><span class="line">不会。因为 Linux提供了一种机制可以保证,只要父进程想知道子进程结束时的状态信息,就可以得到。这种机制就是:当子进程走完了自己的生命周期后,它会执行exit()系统调用,内核释放该进程所有的资源,包括打开的文件,占用的内存等。但是仍然为其保留一定的信息(包括进程号the process ID,退出码exit code,退出状态the terminationstatus of the process,运行时间the amount of CPU time taken by the process等),这些数据会一直保留到系统将它传递给它的父进程为止,直到父进程通过wait / waitpid来取时才释放。</span><br><span class="line">也就是说,当一个进程死亡时,它并不是完全的消失了。进程终止,它不再运行,但是还有一些残留的数据等待父进程收回。当父进程 fork() 一个子进程后,它必须用 wait() (或者 waitpid())等待子进程退出。正是这个 wait() 动作来让子进程的残留数据消失。</span><br><span class="line">三、僵尸进程的危害</span><br><span class="line">如果父进程不调用wait / waitpid的话,那么保留的那段信息就不会释放,其进程号就会一直被占用,但是系统的进程表容量是有限的,所能使用的进程号也是有限的,如果大量的产生僵尸进程,将因为没有可用的进程号而导致系统不能产生新的进程。</span><br><span class="line">所以,defunct进程不仅占用系统的内存资源,影响系统的性能,而且如果其数目太多,还会导致系统瘫痪。而且,由于调度程序无法选中Defunct 进程,所以不能用kill命令删除Defunct 进程,惟一的方法只有重启系统。</span><br><span class="line">四、如何杀死defunct进程</span><br><span class="line">defunct进程是指出错损坏的进程,父子进程之间不会再通信。有时,它们会演变成“僵尸进程”,存留在你的系统中,直到系统重启。可以尝试 “kill -9” 命令来清除,但多数时候不管用。</span><br><span class="line">为了杀死这些defunct进程,你有两个选择:</span><br><span class="line">1.重启你的计算机</span><br><span class="line">2.继续往下读…</span><br><span class="line">我们先看看系统中是否存在defunct进程:</span><br><span class="line"></span><br><span class="line">$ ps -A|grep defunct</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">5259 ?        00:00:00 sd_cicero &lt;defunct&gt;</span><br><span class="line">12214 pts/18   00:01:14 python &lt;defunct&gt;</span><br><span class="line">16989 pts/18   00:04:43 python &lt;defunct&gt;</span><br><span class="line">20610 pts/18   00:23:12 python &lt;defunct&gt;</span><br><span class="line">看看这些进程的ID及其父进程ID:</span><br><span class="line"></span><br><span class="line">$ ps -ef | grep defunct | more</span><br><span class="line"></span><br><span class="line">UID PID PPID ...</span><br><span class="line">==========================================================================</span><br><span class="line">yourname     4653  6128  0 17:07 pts/18   00:00:00 grep --color=auto defunct</span><br><span class="line">yourname     5259  5258  0 15:58 ?        00:00:00 [sd_cicero] &lt;defunct&gt;</span><br><span class="line">yourname    12214 12211  4 16:41 pts/18   00:01:14 [python] &lt;defunct&gt;</span><br><span class="line">yourname    16989 16986 20 16:45 pts/18   00:04:43 [python] &lt;defunct&gt;</span><br><span class="line">yourname    20610 18940 99 16:48 pts/18   00:23:12 [python] &lt;defunct&gt;</span><br><span class="line">UID:用户ID</span><br><span class="line">PID:进程ID</span><br><span class="line">PPID:父进程ID</span><br><span class="line"></span><br><span class="line">如果你使用命令 “kill -9 12214” 尝试杀死ID为12214的进程,可能会没效果。</span><br><span class="line">我们来试一下</span><br><span class="line"></span><br><span class="line">$ kill -9 12214</span><br><span class="line">$ ps -A|grep defunct</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line"> 5259 ?        00:00:00 sd_cicero &lt;defunct&gt;</span><br><span class="line">12214 pts/18   00:01:14 python &lt;defunct&gt;</span><br><span class="line">16989 pts/18   00:04:43 python &lt;defunct&gt;</span><br><span class="line">20610 pts/18   00:23:12 python &lt;defunct&gt;</span><br><span class="line">进程12214 仍然存才，说明用kill杀不掉它。</span><br><span class="line"></span><br><span class="line">要想成功杀死该进程,需要对其父进程(ID为12211)执行kill命令($ kill -9 12211)。对所有这些进程的父进程ID应用kill命令,并验证结果($ ps -A | grep defunct)。</span><br><span class="line">我们来试一下</span><br><span class="line"></span><br><span class="line">$ kill -9 12211</span><br><span class="line">$ ps -A|grep defunct</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">5259 ?        00:00:00 sd_cicero &lt;defunct&gt;</span><br><span class="line">16989 pts/18   00:04:43 python &lt;defunct&gt;</span><br><span class="line">20610 pts/18   00:23:12 python &lt;defunct&gt;</span><br><span class="line">[1]   Killed                  bash main.sh</span><br><span class="line"></span><br><span class="line">进程12214消失，说明可以通过kill僵尸进程的父进程来杀死僵尸进程。</span><br><span class="line"></span><br><span class="line">如果前一个命令显示无结果,那么搞定!否则,可能你需要重启一下系统</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-crotab服务重启</title>
      <link href="/aiyblog/2023/02/26/linux/linux-crontab/"/>
      <url>/aiyblog/2023/02/26/linux/linux-crontab/</url>
      
        <content type="html"><![CDATA[<ul><li>添加重启脚本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># watchapp.sh</span><br><span class="line">work_dir=/data/apps</span><br><span class="line">log_dir=/data/logs</span><br><span class="line">app_version=1.0</span><br><span class="line">check_and_restart () &#123;</span><br><span class="line">  app_name=$1</span><br><span class="line">  app_regex=&quot;libs/$app_name-$app_version.jar&quot;</span><br><span class="line">  app_home=&quot;$work_dir/$app_name&quot;</span><br><span class="line">  </span><br><span class="line">  HOSTNAME=`hostname`</span><br><span class="line">  num_proc=`ps -ef | grep $app_regex | grep -v grep |wc -l`</span><br><span class="line">  echo &quot;[$(date +%Y%m%d%H%M)][check] $app_name $num_proc&quot;</span><br><span class="line"></span><br><span class="line">  if [ &quot;$num_proc&quot; -eq 0 ];</span><br><span class="line">  then</span><br><span class="line">      if [ -f &quot;/data/apps/conf/rasp/rasp.jar&quot; ]; </span><br><span class="line">      then</span><br><span class="line">        JAVA_OPTS=&quot;-javaagent:/data/apps/conf/rasp/rasp.jar&quot;</span><br><span class="line">        export rasp_app_id=&quot;myapp_id&quot;</span><br><span class="line">        export rasp_app_name=&quot;myapp_name&quot;</span><br><span class="line">        export rasp_subapp_name=&quot;$app_name&quot;</span><br><span class="line">      fi</span><br><span class="line">      cd &quot;$app_home&quot;</span><br><span class="line">      nohup java $JAVA_OPTS -Dlog.path=&quot;$log_dir/$app_name&quot; -jar &quot;./libs/$app_name-$app_version.jar&quot; &gt; ./console.log 2&gt;&amp;1 &amp;</span><br><span class="line">      echo &quot;[$(date +%Y%m%d%H%M)][restart] $app_name&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">source /etc/profile</span><br><span class="line">check_and_restart &#x27;myapp-starter&#x27;</span><br></pre></td></tr></table></figure><ul><li>添加linux定时任务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 添加任务</span><br><span class="line">//* * * * *  bash /data/myapp/daemon/watchapp.sh &gt;&gt; /data/myapp/daemon/watchapp.log</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">// 查看任务</span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows相关</title>
      <link href="/aiyblog/2023/02/26/windows%E7%9B%B8%E5%85%B3/"/>
      <url>/aiyblog/2023/02/26/windows%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="端口查询"><a href="#端口查询" class="headerlink" title="端口查询"></a>端口查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 查询端口占用</span><br><span class="line">//  TCP    0.0.0.0:8085           0.0.0.0:0              LISTENING       504</span><br><span class="line">//  TCP    [::]:8085              [::]:0                 LISTENING       504</span><br><span class="line">netstat -ano | findstr &quot;8085&quot;</span><br><span class="line"></span><br><span class="line">// 根据pid查询端口应用</span><br><span class="line">// java.exe    18324 Console                    1     11,252 K</span><br><span class="line">tasklist |findstr &quot;504&quot;</span><br><span class="line"></span><br><span class="line">// 结束应用 </span><br><span class="line">// 成功: 已终止 PID 为 504 的进程。</span><br><span class="line">taskkill /f /pid 504</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 系统设置</span><br><span class="line">sysdm.cpl</span><br><span class="line"></span><br><span class="line"># 注册表</span><br><span class="line">regedit</span><br><span class="line"></span><br><span class="line"># 笔记本</span><br><span class="line">notepad</span><br><span class="line"></span><br><span class="line"># 计数器</span><br><span class="line">calc</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaUML图</title>
      <link href="/aiyblog/2023/02/15/java2/javaUML%E5%9B%BE/"/>
      <url>/aiyblog/2023/02/15/java2/javaUML%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>idea：<a href="https://blog.csdn.net/weixin_44688973/article/details/119733370">https://blog.csdn.net/weixin_44688973/article/details/119733370</a><br><a href="https://blog.csdn.net/weixin_57504000/article/details/124218420">https://blog.csdn.net/weixin_57504000/article/details/124218420</a><br><a href="https://blog.csdn.net/w_cheng/article/details/109708310">https://blog.csdn.net/w_cheng/article/details/109708310</a></p><p>与其所画UML图不如说是写UML图。因为我们是使用 统一建模语言 (Unified Modeling Language，UML) 来“画”UML图的。</p><p>截止UML2.0一共有13种图形（UML1.5定义了9种，2.0增加了4种）。分别是：用例图、类图、对象图、状态图、活动图、顺序图、协作图、构件图、部署图9种，包图、组合结构图、交互概览图3种。 [1] </p><ul><li>用例图：从用户角度描述系统功能。</li><li>类图：描述系统中类的静态结构。</li><li>对象图：系统中的多个对象在某一时刻的状态。</li><li>状态图：是描述状态到状态控制流，常用于动态特性建模</li><li>活动图：描述了业务实现用例的工作流程</li><li>顺序图：对象之间的动态合作关系，强调对象发送消息的顺序，同时显示对象之间的交互</li><li>协作图：描述对象之间的协助关系</li><li>构件图：一种特殊的UML图来描述系统的静态实现视图</li><li>部署图：定义系统中软硬件的物理体系结构</li><li>包图：对构成系统的模型元素进行分组整理的图</li><li>组合结构图：表示类或者构建内部结构的图</li><li>交互概览图：用活动图来表示多个交互之间的控制关系的图</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><ul><li>类图表示</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">类的表示方式, 如：</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">|ClassName                                                 |</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">|- attr1 : String                                          |</span><br><span class="line">|+ attr2 : int                                             |</span><br><span class="line">|# attr3 : boolean                                         |</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">|- methoed1() : void                                       |</span><br><span class="line">|+ methoed2() : String                                     |</span><br><span class="line">|# methoed2(String parm1, int parm2) : int                 |</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">接口表示方法，如：</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">|&lt;IntefaceName&gt;                                            |</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">|+ methoed1() : void                                       |</span><br><span class="line">|+ methoed2() : String                                     |</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">属性的完整表示方式是： 可见性 名称 ：类型 [ = 缺省值]</span><br><span class="line">方法的完整表示方式是： 可见性 名称(参数列表) [ ： 返回类型]</span><br><span class="line"></span><br><span class="line">+：表示public</span><br><span class="line">-：表示private</span><br><span class="line">#：表示protected</span><br><span class="line"></span><br><span class="line">聚合关系：带空心菱形的实线      (成员对象是整体对象的一部分，成员对象可独立， 如：学校和老师，学校可以没有老师)</span><br><span class="line">组合(包含)关系：用带实心菱形的实线    (整体对象可以控制成员对象的生命周期, 如：头和嘴，头不可以没有嘴)</span><br><span class="line"></span><br><span class="line">实现关系：带三角箭头的虚线</span><br><span class="line">继承关系：带三角箭头的实线</span><br><span class="line"></span><br><span class="line">依赖关系：带箭头的虚线 </span><br><span class="line">单向关联：带箭头的实线</span><br><span class="line">双向关联：不带箭头的实线</span><br><span class="line">自关联：带有箭头且指向自身的实线</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>idea插件：PlantUML</li></ul><p>如何使用idea画uml:<a href="https://blog.csdn.net/qq_41575507/article/details/117908372">https://blog.csdn.net/qq_41575507/article/details/117908372</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">title 类图</span><br><span class="line">scale 1.5</span><br><span class="line">/&#x27;</span><br><span class="line">public：+</span><br><span class="line">private：-</span><br><span class="line">protected：#</span><br><span class="line">聚合：o--</span><br><span class="line">包含：*--</span><br><span class="line">实线：--</span><br><span class="line">虚线：..</span><br><span class="line">实心箭头：&gt;</span><br><span class="line">空心箭头：|&gt;</span><br><span class="line">关系说明：:</span><br><span class="line">上下左右位置：up、down、left、right</span><br><span class="line">实线虚线实心箭头：关联、依赖</span><br><span class="line">实线虚线空心箭头：继承、实现</span><br><span class="line">&#x27;/</span><br><span class="line"></span><br><span class="line">/&#x27;组合关系(composition)&#x27;/</span><br><span class="line">class Human &#123;</span><br><span class="line">    - Head mHead;</span><br><span class="line">    - Heart mHeart;</span><br><span class="line">    ..</span><br><span class="line">    - CreditCard mCard;</span><br><span class="line">    --</span><br><span class="line">    + void travel(Vehicle vehicle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Human *-up- Head : contains &gt;</span><br><span class="line">Human *-up- Heart : contains &gt;</span><br><span class="line"></span><br><span class="line">/&#x27;聚合关系(aggregation)&#x27;/</span><br><span class="line">Human o-left- CreditCard : owns &gt;</span><br><span class="line"></span><br><span class="line">/&#x27;依赖关系(dependency)&#x27;/</span><br><span class="line">Human .down.&gt; Vehicle : dependent</span><br><span class="line"></span><br><span class="line">/&#x27;关联关系(association&#x27;/</span><br><span class="line">Human -down-&gt; Company : associate</span><br><span class="line"></span><br><span class="line">/&#x27;继承关系(extention)&#x27;/</span><br><span class="line">interface IProgram &#123;</span><br><span class="line">    - void program();</span><br><span class="line">&#125;</span><br><span class="line">class Programmer &#123;</span><br><span class="line">    + void program();</span><br><span class="line">&#125;</span><br><span class="line">Programmer -left-|&gt; Human : extend</span><br><span class="line">Programmer .up.|&gt; IProgram : implement</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">:Main Admin: as Admin</span><br><span class="line">(Use the application) as (Use)</span><br><span class="line"></span><br><span class="line">User -&gt; (Start)</span><br><span class="line">User -&gt; (Use)</span><br><span class="line"></span><br><span class="line">Admin ---&gt; (Use)</span><br><span class="line"></span><br><span class="line">note right of Admin : This is an example.</span><br><span class="line"></span><br><span class="line">note right of (Use) </span><br><span class="line">    A note can also be on several lines</span><br><span class="line">end note</span><br><span class="line"></span><br><span class="line">note &quot;This note is connected\nto several&quot; as N2</span><br><span class="line"></span><br><span class="line">(Start) .. N2</span><br><span class="line">N2 .. (Use)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouterConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">PathMatcher</span> <span class="variable">pathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; routerMappings = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Cache&lt;String, ResponseEntity&lt;String&gt;&gt;&gt; routerCacheMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRouterConfigs</span><span class="params">(Map&lt;String, Object&gt; routerConfigs)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : routerConfigs.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">routerName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Map&lt;String, Object&gt; configMap = ProxyUtils.getObjToMap(entry.getValue());</span><br><span class="line">                <span class="type">String</span> <span class="variable">paths</span> <span class="operator">=</span> MapUtils.getString(configMap, <span class="string">&quot;path&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (paths == <span class="literal">null</span>) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;router mapping path is null. the router name is : &quot;</span> + routerName);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">&quot;[proxy] load router config : &#123;&#125; - &#123;&#125;&quot;</span>, routerName, paths);</span><br><span class="line">                routerMappings.put(routerName, paths);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">catchConfig</span> <span class="operator">=</span> configMap.getOrDefault(<span class="string">&quot;cache&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (catchConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Map&lt;String, Object&gt; catchConfigMap = ProxyUtils.getObjToMap(catchConfig);</span><br><span class="line">                <span class="keyword">if</span> (MapUtils.getBoolean(catchConfigMap, <span class="string">&quot;enable&quot;</span>, <span class="literal">false</span>))&#123;</span><br><span class="line">                    Cache&lt;String, ResponseEntity&lt;String&gt;&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">                        .maximumSize(MapUtils.getLong(catchConfigMap, <span class="string">&quot;maximum-size&quot;</span>, <span class="number">300L</span>))</span><br><span class="line">                        .expireAfterAccess(MapUtils.getLong(catchConfigMap, <span class="string">&quot;expire-after-access&quot;</span>,<span class="number">300000L</span>), TimeUnit.MILLISECONDS)</span><br><span class="line">                        .build();</span><br><span class="line">                    routerCacheMap.put(routerName, cache);</span><br><span class="line">                    log.info(<span class="string">&quot;[proxy] create router cache : &#123;&#125;&quot;</span>, routerName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">                log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cache&lt;String, ResponseEntity&lt;String&gt;&gt; <span class="title function_">getRouterCatch</span><span class="params">(String routerName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> routerCacheMap.get(routerName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RouterMapping <span class="title function_">getRouterMapping</span><span class="params">(String uri)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : routerMappings.entrySet()) &#123;</span><br><span class="line">            String[] paths = entry.getValue().split(Constants.SEMICOLON);</span><br><span class="line">            <span class="keyword">for</span> (String path : paths) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pathMatcher.match(path, uri))&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">routerName</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RouterMapping</span>(routerName, uri, path, ProxyUtils.getObjToMap(routerConfigs.get(routerName)))</span><br><span class="line">                        .setCache(getRouterCatch(routerName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;no mapping found.&quot;</span> + uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">─proxy</span><br><span class="line">│  ProxyApplication.java</span><br><span class="line">│</span><br><span class="line">├─config</span><br><span class="line">│      BackendEnum.java</span><br><span class="line">│      ProxyConfig.java</span><br><span class="line">│      RouterConfig.java</span><br><span class="line">│      RouterMapping.java</span><br><span class="line">│</span><br><span class="line">├─configuration</span><br><span class="line">│      ProxyConfiguration.java</span><br><span class="line">│</span><br><span class="line">├─controller</span><br><span class="line">│      ProxyController.java</span><br><span class="line">│</span><br><span class="line">├─proxy</span><br><span class="line">ProxyServer.java</span><br><span class="line">│  │</span><br><span class="line">│  └─impl</span><br><span class="line">│          ProxyServerImpl.java</span><br><span class="line">│</span><br><span class="line">├─server</span><br><span class="line">AbstractServer.java</span><br><span class="line">│  │</span><br><span class="line">│  ├─http</span><br><span class="line">    HttpServer.java</span><br><span class="line">│  │</span><br><span class="line">│  └─s3</span><br><span class="line">│       S3Server.java</span><br><span class="line">│</span><br><span class="line">└─utils</span><br><span class="line">        ProxyUtils.java</span><br><span class="line">│</span><br><span class="line">└─resources</span><br><span class="line">        application.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go中使用 Protobuf</title>
      <link href="/aiyblog/2022/12/26/go/go%E4%B8%AD%E4%BD%BF%E7%94%A8%20Protobuf/"/>
      <url>/aiyblog/2022/12/26/go/go%E4%B8%AD%E4%BD%BF%E7%94%A8%20Protobuf/</url>
      
        <content type="html"><![CDATA[<p>【go】go中使用 Protobuf</p><h2 id="protobuf编译生成go文件"><a href="#protobuf编译生成go文件" class="headerlink" title="protobuf编译生成go文件"></a>protobuf编译生成go文件</h2><p>ProtoBuf （Google Protocol Buffer）是由google公司用于数据交换的序列结构化数据格式，具有跨平台、跨语言、可扩展特性，类型于常用的XML及JSON，但具有更小的传输体积、更高的编码、解码能力，特别适合于数据存储、网络数据传输等对存储体积、实时性要求高的领域。以 .proto为后缀，有自己的编译器。</p><p><strong>1-安装并添加环境变量</strong>：</p><ul><li><p><a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a>下载安装包</p></li><li><p>下载解压后在bin目录下有程序：protoc.exe</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把bin目录添加到环境变量，  如：D:\CurriculumNeeds\SelfTaught\19go\bin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加环境变量后，cmd查看版本：输出：libprotoc 3.19.4</span></span><br><span class="line">protoc --version   </span><br></pre></td></tr></table></figure><p><strong>2-准备中间文件 xxx.proto</strong></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如：中间文件所在目录：src/proto/Prod.proto</span></span><br><span class="line">syntax=<span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> go_package=<span class="string">&quot;./;proto&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> services;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">ProdRequest</span> &#123;</span><br><span class="line"><span class="type">int32</span> prod id =<span class="number">1</span>; <span class="comment">//传入的商品 1=确认顺序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">ProdResponse</span>&#123;</span><br><span class="line"><span class="type">int32</span> prod stock=<span class="number">1</span>;<span class="comment">//商品库存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">ProdService</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetProdStock(ProdRequest) <span class="keyword">returns</span> (ProdResponse)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3-添加go编译器插件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装插件 执行命令会在GOPATH的bin目录下生成可执行文件protobuf的编译器插件protoc-gen-go.exe</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等下执行protoc命令时就会自动调用这个插件进行编译 把.proto文件编译为.go文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译时提示<span class="string">&#x27;protoc-gen-go&#x27;</span> 不是内部或外部命令，也不是可运行的程序或批处理文件。可以加一下环境变量</span></span><br><span class="line">go get github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure><p><strong>4- protoc编译.proto为go文件件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将中间文件生成为grpc的go文件</span></span><br><span class="line">protoc --go_out=./src/proto ./src/Prod.proto     # 这个生成后没有client 用如下命令</span><br><span class="line">protoc --go_out=plugins=grpc:./src/proto/ ./src/proto/Prod.proto</span><br></pre></td></tr></table></figure><blockquote><p>需要注意go_out和prod.proto的路径要正常才行</p></blockquote><h2 id="go使用生成的grpc"><a href="#go使用生成的grpc" class="headerlink" title="go使用生成的grpc"></a>go使用生成的grpc</h2><p><strong>服务端实现：server.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Server</span><span class="params">()</span></span> &#123;</span><br><span class="line">rpcServer := grpc.NewServer()</span><br><span class="line">proto.RegisterProdServiceServer(rpcServer, &amp;GrpcService&#123;&#125;)</span><br><span class="line">lis, _ := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8089&quot;</span>)</span><br><span class="line">log.Printf(<span class="string">&quot;lis ip.[%s]&quot;</span>, lis.Addr().String())</span><br><span class="line">rpcServer.Serve(lis)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GrpcService <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务具体实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(grpcSv *GrpcService)</span></span> GetProdStock(ctx context.Context, req *proto.ProdRequest) (*proto.ProdResponse, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;proto.ProdResponse&#123;</span><br><span class="line">ProdStock: <span class="number">20</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建客户端测试：client_test.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGrpcClient</span><span class="params">(fsOpt *FsOpration)</span></span> proto.JhFsClient &#123;</span><br><span class="line">conn, err := grpc.Dial(fsOpt.Targer, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">rpcClient := proto.NewJhFsClient(conn)</span><br><span class="line"><span class="keyword">return</span> rpcClient</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGrpc</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">fsOpt := &amp;FsOpration&#123;</span><br><span class="line">Targer: <span class="string">&quot;0.0.0.0:8089&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">grpcClient := GetGrpcClient(fsOpt)</span><br><span class="line"><span class="keyword">if</span> grpcClient == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;grpcClient is nil...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp,err := grpcClient.GetProdStock(context.Background(),&amp;proto.ProdRequest&#123;ProdId: <span class="number">10001</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(resp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-http服务</title>
      <link href="/aiyblog/2022/10/21/go/go-http%E6%9C%8D%E5%8A%A1/"/>
      <url>/aiyblog/2022/10/21/go/go-http%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="启动一个http"><a href="#启动一个http" class="headerlink" title="启动一个http"></a>启动一个http</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义服务</span></span><br><span class="line"><span class="keyword">type</span> MetricHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">ctx    context.Context</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MetricHandler)</span></span> ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">promhttp.Handler().ServeHTTP(w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadinessHandler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReadinessHandler)</span></span> ServeHTTP(w http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">status := http.StatusInternalServerError</span><br><span class="line">    status = http.StatusOK</span><br><span class="line">resp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">resp[<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;success&quot;</span></span><br><span class="line">w.WriteHeader(status)</span><br><span class="line">text, err := json.Marshal(resp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">_, err = w.Write(text)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHttpServer</span><span class="params">(ctx context.Context)</span></span> *HttpServer &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.Handle(<span class="string">&quot;/metrics&quot;</span>, &amp;MetricHandler&#123;ctx:ctx&#125;)</span><br><span class="line">mux.Handle(<span class="string">&quot;/health/readiness&quot;</span>, &amp;ReadinessHandler&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    server := &amp;http.Server&#123;</span><br><span class="line">Addr:         fmt.Sprintf(<span class="string">&quot;:%d&quot;</span>, <span class="number">8080</span>),</span><br><span class="line">ReadTimeout:  <span class="number">3</span> * time.Second,</span><br><span class="line">WriteTimeout: <span class="number">3</span> * time.Second,</span><br><span class="line">Handler:      mux,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;HttpServer&#123;</span><br><span class="line">svr: server,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">NewHttpServer(ctx).Start()</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>Go语言提供了http包，可以很轻松的开发http接口。以下为示例代码：</p><ul><li>NewBaseJsonBean用于创建一个struct对象:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webserver</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BaseJsonBean <span class="keyword">struct</span> &#123;</span><br><span class="line">Code    <span class="type">int</span>         <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">Data    <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">Message <span class="type">string</span>      <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBaseJsonBean</span><span class="params">()</span></span> *BaseJsonBean &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;BaseJsonBean&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义服务：<a href="https://blog.csdn.net/books1958/article/details/41748719">https://blog.csdn.net/books1958/article/details/41748719</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webserver</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WebServerBase</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;This is webserver base!&quot;</span>)</span><br><span class="line"><span class="comment">//第一个参数为客户端发起http请求时的接口名，第二个参数是一个func，负责处理这个请求。</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/login&quot;</span>, loginTask)</span><br><span class="line"><span class="comment">//服务器要监听的主机地址和端口号</span></span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;192.168.1.27:8081&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;ListenAndServe error: &quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginTask</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;loginTask is running...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟延时</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取客户端通过GET/POST方式传递的参数</span></span><br><span class="line">req.ParseForm()</span><br><span class="line">param_userName, found1 := req.Form[<span class="string">&quot;userName&quot;</span>]</span><br><span class="line">param_password, found2 := req.Form[<span class="string">&quot;password&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !(found1 &amp;&amp; found2) &#123;</span><br><span class="line">fmt.Fprint(w, <span class="string">&quot;请勿非法访问&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result := NewBaseJsonBean()</span><br><span class="line">userName := param_userName[<span class="number">0</span>]</span><br><span class="line">password := param_password[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">s := <span class="string">&quot;userName:&quot;</span> + userName + <span class="string">&quot;,password:&quot;</span> + password</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> userName == <span class="string">&quot;zhangsan&quot;</span> &amp;&amp; password == <span class="string">&quot;123456&quot;</span> &#123;</span><br><span class="line">result.Code = <span class="number">100</span></span><br><span class="line">result.Message = <span class="string">&quot;登录成功&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result.Code = <span class="number">101</span></span><br><span class="line">result.Message = <span class="string">&quot;用户名或密码不正确&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向客户端返回JSON数据</span></span><br><span class="line">bytes, _ := json.Marshal(result)</span><br><span class="line">fmt.Fprint(w, <span class="type">string</span>(bytes))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-grpc服务</title>
      <link href="/aiyblog/2022/10/21/go/go-grpc%E6%9C%8D%E5%8A%A1/"/>
      <url>/aiyblog/2022/10/21/go/go-grpc%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="一个简单的grpc服务"><a href="#一个简单的grpc服务" class="headerlink" title="一个简单的grpc服务"></a>一个简单的grpc服务</h2><ul><li><p>mod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">module grpcgo</span><br><span class="line"></span><br><span class="line">go 1.17</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">google.golang.org/grpc v1.51.0</span><br><span class="line">google.golang.org/protobuf v1.28.1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">github.com/golang/protobuf v1.5.2 // indirect</span><br><span class="line">golang.org/x/net v0.0.0-20220722155237-a158d28d115b // indirect</span><br><span class="line">golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f // indirect</span><br><span class="line">golang.org/x/text v0.4.0 // indirect</span><br><span class="line">google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013 // indirect</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>add.proto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package mygrpc;</span><br><span class="line">option java_package = &quot;a.b.c&quot;;</span><br><span class="line">option java_outer_classname = &quot;AddServiceProto&quot;;</span><br><span class="line">option java_multiple_files = true;</span><br><span class="line"></span><br><span class="line">service AddService&#123;</span><br><span class="line">    rpc add(AddRequest) returns (AddReply)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AddRequest&#123;</span><br><span class="line">    int32 a = 1;</span><br><span class="line">    int32 b = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package mygrpc</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type MyService struct &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *MyService) Add(ctx context.Context, req *AddRequest) (*AddReply, error)&#123;</span><br><span class="line">log.Println(&quot;add:&quot;, req.A, req.B)</span><br><span class="line">res := myAdd(req.A, req.B)</span><br><span class="line">return &amp;AddReply&#123;Res:res&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func myAdd(a int32, b int32) int32&#123;</span><br><span class="line">return a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;google.golang.org/grpc&quot;</span><br><span class="line">&quot;google.golang.org/grpc/metadata&quot;</span><br><span class="line">&quot;grpcgo/mygrpc&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">//createServer()</span><br><span class="line">createClient()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func createServer()&#123;</span><br><span class="line">s,_:= net.Listen(&quot;tcp&quot;, &quot;:9999&quot;)</span><br><span class="line">ipAddr := s.Addr().String()</span><br><span class="line">log.Printf(&quot;Listen ip.[%s]&quot;, ipAddr)</span><br><span class="line">myService := mygrpc.MyService&#123;&#125;</span><br><span class="line">grpcServer := grpc.NewServer()</span><br><span class="line">mygrpc.RegisterAddServiceServer(grpcServer, &amp;myService)</span><br><span class="line">_ = grpcServer.Serve(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func createClient()&#123;</span><br><span class="line">md := metadata.Pairs(&quot;endpoint_id&quot;, &quot;endpoint_test-add&quot;)</span><br><span class="line">outgoingContext := metadata.NewOutgoingContext(context.Background(), md)</span><br><span class="line">conn,_ := grpc.Dial(&quot;127.0.0.1:9001&quot;, grpc.WithInsecure())</span><br><span class="line">c := mygrpc.NewAddServiceClient(conn)</span><br><span class="line">req := mygrpc.AddRequest&#123;</span><br><span class="line">A: 99,</span><br><span class="line">B: 98,</span><br><span class="line">&#125;</span><br><span class="line">reply,_ := c.Add(outgoingContext, &amp;req)</span><br><span class="line">println(reply.Res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>readme.md</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># grpc golang准备工作</span><br><span class="line">1 安装protoc</span><br><span class="line">https://github.com/protocolbuffers/protobuf/releases/tag/v3.14.0</span><br><span class="line"></span><br><span class="line">2 安装protoc-gen-go</span><br><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class="line"></span><br><span class="line">3 安装grpc</span><br><span class="line">go get google.golang.org/grpc</span><br><span class="line"></span><br><span class="line">4 编译</span><br><span class="line">protoc --go_out=plugins=grpc:. ./add.proto</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h2><ul><li><p>grpc服务端转发代理：<a href="https://github.com/mwitkow/grpc-proxy">https://github.com/mwitkow/grpc-proxy</a></p></li><li><p>grpc代理demo：<a href="https://www.cnblogs.com/voipman/p/15352001.html">https://www.cnblogs.com/voipman/p/15352001.html</a></p></li><li><p>dependency</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">require (</span><br><span class="line">github.com/golang/mock v1<span class="number">.6</span><span class="number">.0</span></span><br><span class="line">google.golang.org/grpc v1<span class="number">.43</span><span class="number">.0</span></span><br><span class="line">google.golang.org/protobuf v1<span class="number">.27</span><span class="number">.1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>生成代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 客户端和服务端生成在不同文件</span><br><span class="line">// 向前兼容性</span><br><span class="line">protoc --go_out=./proto --go-grpc_out=./proto ./proto/myproto.proto</span><br><span class="line">// 无向前兼容性</span><br><span class="line">protoc --go_out=./proto --go-grpc_out=require_unimplemented_servers=false:./proto ./proto/myproto.proto</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 客户端和服务端生成在相同文件</span></span></span><br><span class="line">protoc --go_out=plugins=grpc:. ./proto/myproto.proto</span><br></pre></td></tr></table></figure></li><li><p>method 配置文件解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">func Marshal(obj interface&#123;&#125;) string &#123;</span><br><span class="line">data, _ := json.Marshal(obj)</span><br><span class="line">return string(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Unmarshal(content string, obj interface&#123;&#125;) error &#123;</span><br><span class="line">return json.Unmarshal([]byte(content), obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func ReadFile(filename *string) (string, error) &#123;</span><br><span class="line">file, err := os.Open(*filename)</span><br><span class="line">defer file.Close()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return &quot;&quot;, err</span><br><span class="line">&#125;</span><br><span class="line">content, err := io.ReadAll(file)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return &quot;&quot;, nil</span><br><span class="line">&#125;</span><br><span class="line">return string(content), nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func readConfig(config *string, option interface&#123;&#125;) &#123;</span><br><span class="line">content, err := utils.ReadFile(config)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;cannot read config file&quot;)</span><br><span class="line">&#125;</span><br><span class="line">err = utils.Unmarshal(content, option)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;parse config file fail&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Option struct &#123;</span><br><span class="line">TestFiled   string            `json:&quot;test_filed&quot;`</span><br><span class="line">TestConfig  map[string]string `json:&quot;test_config&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// config.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_filed&quot;: &quot;testValue&quot;,</span><br><span class="line">  &quot;test_config&quot;: &#123;</span><br><span class="line">    &quot;test_filed1&quot;: &quot;testValue1&quot;,</span><br><span class="line">    &quot;test_filed2&quot;: &quot;testValue2&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="metedate"><a href="#metedate" class="headerlink" title="metedate"></a>metedate</h2><ul><li><a href="https://blog.csdn.net/hjxzb/article/details/88980186">https://blog.csdn.net/hjxzb/article/details/88980186</a></li></ul><p>项目源代码路径：google.golang.org/grpc/metadata</p><p>项目文档路径：<a href="https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md">https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md</a></p><ul><li><p>使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、创建metadata</span><br><span class="line"></span><br><span class="line">MD 类型实际上是<span class="keyword">map</span>，key是<span class="type">string</span>，value是<span class="type">string</span>类型的slice。</span><br><span class="line"><span class="keyword">type</span> MD <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span></span><br><span class="line"></span><br><span class="line">创建的时候可以像创建普通的<span class="keyword">map</span>类型一样使用<span class="built_in">new</span>关键字进行创建：</span><br><span class="line">md := metadata.New(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;key1&quot;</span>: <span class="string">&quot;val1&quot;</span>, <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;val2&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">或者使用Pairs创建，相同的key值会被组合成slice。</span><br><span class="line">md := metadata.Pairs(</span><br><span class="line">    <span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1-2&quot;</span>, <span class="comment">// &quot;key1&quot; will have map value []string&#123;&quot;val1&quot;, &quot;val1-2&quot;&#125;</span></span><br><span class="line">    <span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">key不区分大小写，会被统一转成小写。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>-发送metadata</span><br><span class="line">md := metadata.Pairs(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;val&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个有 metadata 的 context</span></span><br><span class="line">ctx := metadata.NewOutgoingContext(context.Background(), md)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单向 RPC</span></span><br><span class="line">response, err := client.SomeRPC(ctx, someRequest)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>-接收metadata</span><br><span class="line">利用函数 FromIncomingContext从context中获取metadata:</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SomeRPC(ctx context.Context, in *pb.SomeRequest) (*pb.SomeResponse, err) &#123;</span><br><span class="line">    md, ok := metadata.FromIncomingContext(ctx)</span><br><span class="line">    <span class="comment">// do something with metadata</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">官方测试项目：https:<span class="comment">//github.com/grpc/grpc-go/tree/master/examples/features/metadata</span></span><br><span class="line"></span><br><span class="line">详细的使用方法可以参考官方文档，下面是我写的一个简单练手的代码：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、proto文件编写</span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">package</span> protos;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line">service Greeter &#123;</span><br><span class="line">    <span class="comment">//   Sends a greeting</span></span><br><span class="line">    rpc SayHello (HelloRequest) returns (HelloReply) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">    <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line">message HelloReply &#123;</span><br><span class="line">    <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、server端编写</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;flag&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;log&quot;</span></span><br><span class="line">   <span class="string">&quot;net&quot;</span></span><br><span class="line">   pb <span class="string">&quot;github.com/zhanben/go_server/protos&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;golang.org/x/net/context&quot;</span></span><br><span class="line">   <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">   <span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   ServiceName = flag.String(<span class="string">&quot;ServiceName&quot;</span>, <span class="string">&quot;hello_service&quot;</span>, <span class="string">&quot;service name&quot;</span>)</span><br><span class="line">   Port        = flag.Int(<span class="string">&quot;Port&quot;</span>, <span class="number">50001</span>, <span class="string">&quot;listening port&quot;</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   flag.Parse()</span><br><span class="line"></span><br><span class="line">   lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;127.0.0.1:%d&quot;</span>, *Port))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatalf(<span class="string">&quot;failed to listen: %s&quot;</span>, err)</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;listen at:%d\n&quot;</span>, *Port)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> lis.Close()</span><br><span class="line"></span><br><span class="line">   s := grpc.NewServer()</span><br><span class="line">   <span class="keyword">defer</span> s.GracefulStop()</span><br><span class="line"></span><br><span class="line">   pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line">   addr := fmt.Sprintf(<span class="string">&quot;%s:%d&quot;</span>, host, *Port)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;server addr:%s\n&quot;</span>,addr)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;failed to serve: %s&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// server is used to implement helloworld.GreeterServer.</span></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SayHello implements helloworld.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, <span class="type">error</span>) &#123;</span><br><span class="line">   md, ok := metadata.FromIncomingContext(ctx)</span><br><span class="line">   <span class="keyword">if</span> !ok &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;get metadata error&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> t, ok := md[<span class="string">&quot;timestamp&quot;</span>]; ok &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;timestamp from metadata:\n&quot;</span>)</span><br><span class="line">      <span class="keyword">for</span> i, e := <span class="keyword">range</span> t &#123;</span><br><span class="line">         fmt.Printf(<span class="string">&quot; %d. %s\n&quot;</span>, i, e)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//fmt.Printf(&quot;%v: Receive is %s\n&quot;, time.Now(), in.Name)</span></span><br><span class="line">   <span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + in.Name&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、client端编写</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">   pb <span class="string">&quot;github.com/zhanben/go_client/protos&quot;</span></span><br><span class="line">   <span class="string">&quot;golang.org/x/net/context&quot;</span></span><br><span class="line">   <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">   <span class="string">&quot;google.golang.org/grpc/metadata&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">   timestampFormat = time.StampNano <span class="comment">// &quot;Jan _2 15:04:05.000&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   conn, err := grpc.Dial( <span class="string">&quot;127.0.0.1:50001&quot;</span>, grpc.WithInsecure())</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   client := pb.NewGreeterClient(conn)</span><br><span class="line">   md := metadata.Pairs(<span class="string">&quot;timestamp&quot;</span>, time.Now().Format(timestampFormat))</span><br><span class="line">   ctx := metadata.NewOutgoingContext(context.Background(), md)</span><br><span class="line">   resp, err := client.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: <span class="string">&quot;hello, world&quot;</span>&#125;)</span><br><span class="line">   <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;Reply is %s\n&quot;</span>, resp.Message)</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;call server error:%s\n&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root@localhost go_client # ./client</span><br><span class="line">Reply is Hello hello, world</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-tcp服务</title>
      <link href="/aiyblog/2022/10/21/go/go-tcp%E6%9C%8D%E5%8A%A1/"/>
      <url>/aiyblog/2022/10/21/go/go-tcp%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="Go语言实现TCP通信"><a href="#Go语言实现TCP通信" class="headerlink" title="Go语言实现TCP通信"></a>Go语言实现TCP通信</h3><p><a href="https://cloud.tencent.com/developer/article/1733034">https://cloud.tencent.com/developer/article/1733034</a></p><p>TCP协议: TCP/IP(Transmission Control Protocol/Internet Protocol) 即传输控制协议/网间协议，是一种面向连接（连接导向）的、可靠的、基于字节流的传输层（Transport layer）通信协议，因为是面向连接的协议，数据像水流一样传输，会存在黏包问题。</p><h3 id="TCP服务端"><a href="#TCP服务端" class="headerlink" title="TCP服务端"></a>TCP服务端</h3><p>一个TCP服务端可以同时连接很多个客户端。因为Go语言中创建多个goroutine实现并发非常方便和高效，所以我们可以每建立一次链接就创建一个goroutine去处理。</p><p>TCP服务端程序的处理流程：</p><ul><li>1.监听端口</li><li>2.接收客户端请求建立连接</li><li>3.创建goroutine处理连接。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bufio&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// TCP Server端测试</span><br><span class="line">// 处理函数</span><br><span class="line">func process(conn net.Conn) &#123;</span><br><span class="line">defer conn.Close() // 关闭连接</span><br><span class="line">for &#123;</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">var buf [128]byte</span><br><span class="line">n, err := reader.Read(buf[:]) // 读取数据</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;read from client failed, err: &quot;, err)</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">recvStr := string(buf[:n])</span><br><span class="line">fmt.Println(&quot;收到Client端发来的数据：&quot;, recvStr)</span><br><span class="line">conn.Write([]byte(recvStr)) // 发送数据</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">listen, err := net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:9999&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;Listen() failed, err: &quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">for &#123;</span><br><span class="line">conn, err := listen.Accept() // 监听客户端的连接请求</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;Accept() failed, err: &quot;, err)</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">go process(conn) // 启动一个goroutine来处理客户端的连接请求</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>将上面的代码保存之后编译成server或server.exe可执行文件。</li></ul><h3 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h3><p>一个TCP客户端进行TCP通信的流程如下：</p><ul><li>1.建立与服务端的连接</li><li>2.进行数据收发</li><li>3.关闭连接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bufio&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// TCP 客户端</span><br><span class="line">func main() &#123;</span><br><span class="line">conn, err := net.Dial(&quot;tcp&quot;, &quot;127.0.0.1:9999&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;err : &quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">defer conn.Close() // 关闭TCP连接</span><br><span class="line">inputReader := bufio.NewReader(os.Stdin)</span><br><span class="line">for &#123;</span><br><span class="line">input, _ := inputReader.ReadString(&#x27;\n&#x27;) // 读取用户输入</span><br><span class="line">inputInfo := strings.Trim(input, &quot;\r\n&quot;)</span><br><span class="line">if strings.ToUpper(inputInfo) == &quot;Q&quot; &#123; // 如果输入q就退出</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">_, err := conn.Write([]byte(inputInfo)) // 发送数据</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">buf := [512]byte&#123;&#125;</span><br><span class="line">n, err := conn.Read(buf[:])</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;recv failed, err:&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(string(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将上面的代码保存之后编译成client或client.exe可执行文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-cobra命令开源组件</title>
      <link href="/aiyblog/2022/10/21/go/go-cobra%E5%91%BD%E4%BB%A4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
      <url>/aiyblog/2022/10/21/go/go-cobra%E5%91%BD%E4%BB%A4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>dependency<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">require (</span><br><span class="line">github.com/spf13/cobra v1.1.3</span><br><span class="line">go.etcd.io/etcd/client/pkg/v3 v3.5.4</span><br><span class="line">go.etcd.io/etcd/client/v3 v3.5.4</span><br><span class="line">go.etcd.io/etcd/etcdctl/v3 v3.5.4</span><br><span class="line">go.etcd.io/etcd/pkg/v3 v3.5.4</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>示例:</p><ul><li><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main commond</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">cliName        = <span class="string">&quot;cmdexample&quot;</span></span><br><span class="line">cliDescription = <span class="string">&quot;A simple command line client&quot;</span></span><br><span class="line">defaultDialTimeout      = <span class="number">2</span> * time.Second</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">globalFlags = command.GlobalFlags&#123;&#125;  <span class="comment">// 自定义全局参数对象</span></span><br><span class="line">rootCmd     = &amp;cobra.Command&#123;</span><br><span class="line">Use:        cliName,</span><br><span class="line">Short:      cliDescription,</span><br><span class="line">SuggestFor: []<span class="type">string</span>&#123;<span class="string">&quot;etcdctl&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">rootCmd.PersistentFlags().StringSliceVar(&amp;globalFlags.Endpoints, <span class="string">&quot;endpoints&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;127.0.0.1:2379&quot;</span>&#125;, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">rootCmd.PersistentFlags().BoolVar(&amp;globalFlags.Debug, <span class="string">&quot;debug&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">rootCmd.PersistentFlags().DurationVar(&amp;globalFlags.DialTimeout, <span class="string">&quot;dial-timeout&quot;</span>, defaultDialTimeout, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">rootCmd.AddCommand(</span><br><span class="line">command_me.GetMyCommon(),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := rootCmd.Execute(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;ERROR:[etcdmirror] &quot;</span>, err)</span><br><span class="line">log.Println(<span class="string">&quot;Forward commands to [etcd etcdctl]&quot;</span>)</span><br><span class="line">ctlv3.MustStart()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>command_me.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// children command</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">strArg      <span class="type">string</span></span><br><span class="line">int64Arg <span class="type">bool</span></span><br><span class="line">boolArg     <span class="type">int64</span></span><br><span class="line">intArg      <span class="type">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMyCommon</span><span class="params">()</span></span> *cobra.Command &#123;</span><br><span class="line">c := &amp;cobra.Command&#123;</span><br><span class="line">Use:   <span class="string">&quot;cdcmd [options] &lt;destination&gt;&quot;</span>,</span><br><span class="line">Short: <span class="string">&quot;a simple children command&quot;</span>,</span><br><span class="line">RunE:  cdcmdFun,</span><br><span class="line">&#125;</span><br><span class="line">c.Flags().StringVar(&amp;strArg, <span class="string">&quot;strArg&quot;</span>, <span class="string">&quot;defValue&quot;</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">c.Flags().Int64Var(&amp;int64Arg, <span class="string">&quot;int64Arg&quot;</span>, <span class="number">0</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">c.Flags().BoolVar(&amp;boolArg, <span class="string">&quot;boolArg&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">c.Flags().IntVar(&amp;intArg, <span class="string">&quot;intArg&quot;</span>, <span class="number">90</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cdcmdFun</span><span class="params">()</span></span> <span class="type">error</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-网络测试工具nettest</title>
      <link href="/aiyblog/2022/10/21/go/go-%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7nettest/"/>
      <url>/aiyblog/2022/10/21/go/go-%E7%BD%91%E7%BB%9C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7nettest/</url>
      
        <content type="html"><![CDATA[<ul><li>gomod</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// gomod commond</span><br><span class="line">go mod init nettest/m/v2</span><br><span class="line"></span><br><span class="line">// content</span><br><span class="line">module nettest</span><br><span class="line"></span><br><span class="line">go 1.17</span><br></pre></td></tr></table></figure><ul><li>main<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;flag&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;nettest/utils&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">HTTP = &quot;http&quot;</span><br><span class="line">HTTPS = &quot;https&quot;</span><br><span class="line">IP_MAIN = &quot;main&quot;</span><br><span class="line">IP_STANDBY = &quot;standby&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">mainIps  = flag.String(&quot;main-ips&quot;, &quot;&quot;, &quot;comma seperated list of test main ip&quot;)</span><br><span class="line">standbyIps = flag.String(&quot;standby-ips&quot;, &quot;&quot;, &quot;comma seperated list of test standby ip&quot;)</span><br><span class="line">interfc = flag.String(&quot;interfc&quot;, &quot;&quot;, &quot;comma seperated list of test standby ip&quot;)</span><br><span class="line">method = flag.String(&quot;method&quot;, &quot;POST&quot;, &quot;test interface method&quot;)</span><br><span class="line">headers = flag.String(&quot;headers&quot;, &quot;&quot;, &quot;test interface headers format json&quot;)</span><br><span class="line">body = flag.String(&quot;body&quot;, &quot;&quot;, &quot;test interface body format json&quot;)</span><br><span class="line">httpsTest = flag.Bool(&quot;https&quot;, true, &quot;enable https test&quot;)</span><br><span class="line">issync = flag.Bool(&quot;sync&quot;, false, &quot;enable https test&quot;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func help()  &#123;</span><br><span class="line">help := `</span><br><span class="line">    Usage:</span><br><span class="line">nettest [arguments]</span><br><span class="line">Arguments:</span><br><span class="line">main-ips        comma seperated list of test main ip</span><br><span class="line">standby-ips     comma seperated list of test standby ip</span><br><span class="line">interfc comma seperated list of test standby ip</span><br><span class="line">method test interface method</span><br><span class="line">headers test interface headers format json</span><br><span class="line">body test interface body format json</span><br><span class="line">https enable https test</span><br><span class="line">sync enable sync test</span><br><span class="line">    `</span><br><span class="line">fmt.Println(help)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func splicUir(protocol, ipPort, intterfc string) string  &#123;</span><br><span class="line">return protocol + &quot;://&quot; + ipPort + intterfc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func resHandle(typeTest, url, method string, headersMap map[string]string) &#123;</span><br><span class="line">resp, err := utils.HttpExchange(url, method, headersMap, *body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">if strings.EqualFold(IP_MAIN, typeTest) &#123;</span><br><span class="line">log.Printf(&quot;[ERROR] [%s] [%s]\n&quot;, typeTest, err)</span><br><span class="line"></span><br><span class="line">&#125;else &#123;</span><br><span class="line">log.Printf(&quot;[WARN] [%s] [%s]\n&quot;, typeTest, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">log.Printf(&quot;[RESULT] [%s] [%s] : %s-&gt;%s\n&quot;, typeTest, url, resp.Status, utils.Marshal(resp.Body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func testReq(ip,ipType, method string, headersMap map[string]string)  &#123;</span><br><span class="line">resHandle(ipType, splicUir(HTTP, ip, *interfc), method, headersMap)</span><br><span class="line">if *httpsTest &#123;</span><br><span class="line">resHandle(ipType, splicUir(HTTPS, ip, *interfc), method, headersMap)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func ipsTest(ips []string, ipType string, headersMap map[string]string)  &#123;</span><br><span class="line">for _, mip := range ips &#123;</span><br><span class="line">if *issync &#123;</span><br><span class="line">go testReq(mip, ipType, *method, headersMap)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">testReq(mip, ipType, *method, headersMap)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func testInfo(headers map[string]string) &#123;</span><br><span class="line">fmt.Println(&quot;----------- test info ----------&quot;)</span><br><span class="line">fmt.Printf(&quot;interfc：%s\n&quot;, *interfc)</span><br><span class="line">fmt.Printf(&quot;method：%s\n&quot;, *method)</span><br><span class="line">fmt.Printf(&quot;headers：%s\n&quot;, utils.Marshal(headers))</span><br><span class="line">fmt.Printf(&quot;body：%s\n&quot;, *body)</span><br><span class="line">fmt.Printf(&quot;https：%t\n&quot;, *httpsTest)</span><br><span class="line">fmt.Printf(&quot;issync：%t\n&quot;, *issync)</span><br><span class="line">fmt.Println(&quot;---------------------------------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">if len(os.Args) &lt;= 1 &#123;</span><br><span class="line">help()</span><br><span class="line">&#125;</span><br><span class="line">if len(*mainIps) &lt;= 0 &#123;</span><br><span class="line">log.Fatalln(errors.New(&quot;main ip is nil&quot;))</span><br><span class="line">help()</span><br><span class="line">&#125;else if len(*interfc) &lt; 0 &#123;</span><br><span class="line">log.Fatalln(errors.New(&quot;interface is nil&quot;))</span><br><span class="line">&#125;</span><br><span class="line">headersMap := make(map[string]string)</span><br><span class="line">err := utils.Unmarshal(*headers, &amp;headersMap)</span><br><span class="line">if err != nil&#123;</span><br><span class="line">log.Fatal(&quot;header unmarshal err.&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">testInfo(headersMap)</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;[main] ips：[%s]\n&quot;, *mainIps)</span><br><span class="line">ipsTest(strings.Split(*mainIps, &quot;;&quot;), IP_MAIN, headersMap)</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;[standby] ips：[%s]\n&quot;, *standbyIps)</span><br><span class="line">ipsTest(strings.Split(*standbyIps, &quot;;&quot;), IP_STANDBY, headersMap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>-http</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package utils</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;crypto/tls&quot;</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const APPLICATION_JSON = &quot;application/json&quot;</span><br><span class="line"></span><br><span class="line">func getClient(request *http.Request, headers map[string]string, certVerify bool) *http.Client &#123;</span><br><span class="line">setHead(request, headers)</span><br><span class="line">return &amp;http.Client&#123;</span><br><span class="line">Timeout: time.Minute * 30,</span><br><span class="line">Transport: &amp;http.Transport&#123;TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: !certVerify&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func setHead(request *http.Request, headers map[string]string) &#123;</span><br><span class="line">request.Header.Add(&quot;Content-Type&quot;, APPLICATION_JSON)</span><br><span class="line">request.Header.Add(&quot;Accept&quot;, APPLICATION_JSON)</span><br><span class="line">if headers != nil &amp;&amp; len(headers) &gt; 0 &#123;</span><br><span class="line">for key, value := range headers &#123;</span><br><span class="line">request.Header.Add(key, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func HttpGet(url string, headers map[string]string, body interface&#123;&#125;) (*http.Response, error) &#123;</span><br><span class="line">return HttpExchange(url, http.MethodGet, headers, body)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func HttpPost(url string, headers map[string]string, body interface&#123;&#125;) (*http.Response, error) &#123;</span><br><span class="line">return HttpExchange(url, http.MethodPost, headers, body)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func HttpExchange(url, method string, headers map[string]string, body interface&#123;&#125;) (*http.Response, error) &#123;</span><br><span class="line">return HttpsExchange(url, method, headers, body, false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func HttpsExchange(url, method string, headers map[string]string, body interface&#123;&#125;, httpsCertVerify bool) (*http.Response, error) &#123;</span><br><span class="line">request, err := http.NewRequest(method, url, strings.NewReader(Marshal(body)))</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">return getClient(request, headers, httpsCertVerify).Do(request)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Marshal(obj interface&#123;&#125;) string &#123;</span><br><span class="line">data, err := json.Marshal(obj)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">return string(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Unmarshal(content string, obj interface&#123;&#125;) error &#123;</span><br><span class="line">return json.Unmarshal([]byte(content), obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nettest"><a href="#nettest" class="headerlink" title="nettest"></a>nettest</h2><p>执行接口测试</p><p><strong>编译</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// windows</span><br><span class="line">go env -w GOOS=windows</span><br><span class="line">go build </span><br><span class="line"></span><br><span class="line">// linux</span><br><span class="line">go env -w GOOS=linux</span><br><span class="line">go build </span><br></pre></td></tr></table></figure><p><strong>参数示例</strong></p><ul><li><p>ide调试</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--main-ips=10.126.201.221</span><br><span class="line">--standby-ips=7.222.133.144;7.294.39.123;7.192.48.122</span><br><span class="line">--interfc=/test</span><br><span class="line">--method=POST</span><br><span class="line">--headers=&#123;\&quot;Content-Type\&quot;:\&quot;text/plain\&quot;,\&quot;Cookie\&quot;:\&quot;\&quot;&#125;</span><br><span class="line">--body=&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>linux</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./nettest</span><br><span class="line">./nettest -main-ips=10.126.201.221 -standby-ips=7.222.133.144;7.294.39.123;7.192.48.122 -interfc=/test -method=POST -headers=&#123;\&quot;Content-Type\&quot;:\&quot;text/plain\&quot;,\&quot;Cookie\&quot;:\&quot;\&quot;&#125; -body=&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>windows</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nettest.exe -main-ips=10.126.201.221 -standby-ips=7.222.133.144;7.294.39.123;7.192.48.122 -interfc=/test -method=POST -headers=&#123;\&quot;Content-Type\&quot;:\&quot;text/plain\&quot;,\&quot;Cookie\&quot;:\&quot;\&quot;&#125; -body=&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>nettest.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./nettest \</span><br><span class="line">-main-ips=10.126.201.221 \</span><br><span class="line">-standby-ips=7.222.133.144;7.294.39.123;7.192.48.122  \</span><br><span class="line">-interfc=/test \</span><br><span class="line">-method=POST  \</span><br><span class="line">-headers=&#123;\&quot;Content-Type\&quot;:\&quot;text/plain\&quot;,\&quot;Cookie\&quot;:\&quot;\&quot;&#125;  \</span><br><span class="line">-body=&quot;&quot;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-web服务</title>
      <link href="/aiyblog/2022/10/21/go/go-web%E6%9C%8D%E5%8A%A1/"/>
      <url>/aiyblog/2022/10/21/go/go-web%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<ul><li><p>github: <a href="https://github.com/asim/kv">https://github.com/asim/kv</a></p></li><li><p>dependency</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require (</span><br><span class="line">github.com/hashicorp/memberlist v0.4.0</span><br><span class="line">github.com/pborman/uuid v1.2.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>html/index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>KV<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>KV&lt;/h1/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Get<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>get<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Set<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/set&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;val&quot;</span> <span class="attr">name</span>=<span class="string">&quot;val&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>set<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/del&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>memberlist 实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hashicorp/memberlist&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/pborman/uuid&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> broadcast <span class="keyword">struct</span> &#123;</span><br><span class="line">msg    []<span class="type">byte</span></span><br><span class="line">notify <span class="keyword">chan</span> &lt;- <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Update <span class="keyword">struct</span> &#123;</span><br><span class="line">Action <span class="type">string</span> <span class="comment">// set, del</span></span><br><span class="line">Data   <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *broadcast)</span></span> Invalidates(other memberlist.Broadcast) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *broadcast)</span></span> Message() []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b.msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *broadcast)</span></span> Finished() &#123;</span><br><span class="line"><span class="keyword">if</span> b.notify != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">close</span>(b.notify)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> NodeMeta(limit <span class="type">int</span>) []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> NotifyMsg(b []<span class="type">byte</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> b[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: <span class="comment">// data</span></span><br><span class="line"><span class="keyword">var</span> updates []*Update</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(b[<span class="number">1</span>:], &amp;updates); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">s.mtx.Lock()</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> updates &#123;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> u.Data &#123;</span><br><span class="line"><span class="keyword">switch</span> u.Action &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;set&quot;</span>:</span><br><span class="line">s.storage[k] = v</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;del&quot;</span>:</span><br><span class="line"><span class="built_in">delete</span>(s.storage, k)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s.mtx.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> GetBroadcasts(overhead, limit <span class="type">int</span>) [][]<span class="type">byte</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.broadcasts.GetBroadcasts(overhead, limit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> LocalState(join <span class="type">bool</span>) []<span class="type">byte</span> &#123;</span><br><span class="line">s.mtx.RLock()</span><br><span class="line">m := s.storage</span><br><span class="line">s.mtx.RUnlock()</span><br><span class="line">b, _ := json.Marshal(m)</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> MergeRemoteState(buf []<span class="type">byte</span>, join <span class="type">bool</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(buf) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !join &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(buf, &amp;m); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">s.mtx.Lock()</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">s.storage[k] = v</span><br><span class="line">&#125;</span><br><span class="line">s.mtx.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> eventDelegate <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ed *eventDelegate)</span></span> NotifyJoin(node *memberlist.Node) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;A node has joined: &quot;</span> + node.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ed *eventDelegate)</span></span> NotifyLeave(node *memberlist.Node) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;A node has left: &quot;</span> + node.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ed *eventDelegate)</span></span> NotifyUpdate(node *memberlist.Node) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;A node was updated: &quot;</span> + node.String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Options <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Unique ID of server</span></span><br><span class="line">ID <span class="type">string</span></span><br><span class="line"><span class="comment">// Local address to bind to</span></span><br><span class="line">Address <span class="type">string</span></span><br><span class="line"><span class="comment">// Members in the cluster</span></span><br><span class="line">Members []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">Options *Options</span><br><span class="line"></span><br><span class="line">mtx sync.RWMutex</span><br><span class="line"><span class="comment">// TODO pluggable storage</span></span><br><span class="line">storage    <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">cluster    *memberlist.Memberlist</span><br><span class="line">broadcasts *memberlist.TransmitLimitedQueue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Address() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.cluster.LocalNode().FullAddress().Addr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Get(key <span class="type">string</span>) (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">s.mtx.RLock()</span><br><span class="line"><span class="keyword">defer</span> s.mtx.RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v, ok := s.storage[key]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> v, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Set(key <span class="type">string</span>, val <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">s.mtx.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.mtx.Unlock()</span><br><span class="line"></span><br><span class="line">s.storage[key] = val</span><br><span class="line"></span><br><span class="line">b, err := json.Marshal([]*Update&#123;</span><br><span class="line">&#123;</span><br><span class="line">Action: <span class="string">&quot;set&quot;</span>,</span><br><span class="line">Data: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">key: val,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.broadcasts.QueueBroadcast(&amp;broadcast&#123;</span><br><span class="line">msg:    <span class="built_in">append</span>([]<span class="type">byte</span>(<span class="string">&quot;d&quot;</span>), b...),</span><br><span class="line">notify: <span class="literal">nil</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> Delete(key <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">s.mtx.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.mtx.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, ok := s.storage[key]; ok &#123;</span><br><span class="line"><span class="built_in">delete</span>(s.storage, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := json.Marshal([]*Update&#123;&#123;</span><br><span class="line">Action: <span class="string">&quot;del&quot;</span>,</span><br><span class="line">Data: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">key: <span class="literal">nil</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.broadcasts.QueueBroadcast(&amp;broadcast&#123;</span><br><span class="line">msg:    <span class="built_in">append</span>([]<span class="type">byte</span>(<span class="string">&quot;d&quot;</span>), b...),</span><br><span class="line">notify: <span class="literal">nil</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(opts *Options)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">s := <span class="built_in">new</span>(Server)</span><br><span class="line">c := memberlist.DefaultLocalConfig()</span><br><span class="line"></span><br><span class="line"><span class="comment">// set hostname</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(opts.ID) == <span class="number">0</span> &#123;</span><br><span class="line">hostname, _ := os.Hostname()</span><br><span class="line">c.Name = hostname + <span class="string">&quot;-&quot;</span> + uuid.NewUUID().String()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.Name = opts.ID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set address</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(opts.Address) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> h, p, err := net.SplitHostPort(opts.Address); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.BindAddr = h</span><br><span class="line">c.BindPort, _ = strconv.Atoi(p)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.BindPort = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Events = &amp;eventDelegate&#123;&#125;</span><br><span class="line">c.Delegate = s</span><br><span class="line"></span><br><span class="line">m, err := memberlist.Create(c)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add members to cluster</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(opts.Members) &gt; <span class="number">0</span> &#123;</span><br><span class="line">m.Join(opts.Members)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br := &amp;memberlist.TransmitLimitedQueue&#123;</span><br><span class="line">NumNodes: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> m.NumMembers()</span><br><span class="line">&#125;,</span><br><span class="line">RetransmitMult: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.Options = opts</span><br><span class="line">s.storage = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">s.cluster = m</span><br><span class="line">s.broadcasts = br</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/kv/server&quot;</span></span><br><span class="line"><span class="string">&quot;io/fs&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed html/*</span></span><br><span class="line"><span class="keyword">var</span> html embed.FS</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">nodes   = flag.String(<span class="string">&quot;nodes&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;comma seperated list of nodes&quot;</span>)</span><br><span class="line">address = flag.String(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;:4001&quot;</span>, <span class="string">&quot;http host:port&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// global server</span></span><br><span class="line">srv *server.Server</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">r.ParseForm()</span><br><span class="line">key := r.Form.Get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := srv.Delete(key); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">r.ParseForm()</span><br><span class="line">key := r.Form.Get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line">val, err := srv.Get(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.Write([]<span class="type">byte</span>(val.(<span class="type">string</span>)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">r.ParseForm()</span><br><span class="line">key := r.Form.Get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">val := r.Form.Get(<span class="string">&quot;val&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := srv.Set(key, val); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> members []<span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(*nodes) &gt; <span class="number">0</span> &#123;</span><br><span class="line">members = strings.Split(*nodes, <span class="string">&quot;,&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// create new server</span></span><br><span class="line">s, err := server.New(&amp;server.Options&#123;</span><br><span class="line">Members: members,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set global server</span></span><br><span class="line">srv = s</span><br><span class="line">log.Printf(<span class="string">&quot;Local node %s\n&quot;</span>, srv.Address())</span><br><span class="line"></span><br><span class="line"><span class="comment">// set http handlers</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/get&quot;</span>, getHandler)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/set&quot;</span>, setHandler)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/del&quot;</span>, delHandler)</span><br><span class="line"><span class="comment">// extract the embedded html directory</span></span><br><span class="line">htmlContent, err := fs.Sub(html, <span class="string">&quot;html&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// serve the html directory by default</span></span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, http.FileServer(http.FS(htmlContent)))</span><br><span class="line">log.Printf(<span class="string">&quot;Listening on %s\n&quot;</span>, *address)</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(*address, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose</title>
      <link href="/aiyblog/2022/06/26/docker/docker-compose/"/>
      <url>/aiyblog/2022/06/26/docker/docker-compose/</url>
      
        <content type="html"><![CDATA[<p>docker-compose需要另外安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="docker-compose使用"><a href="#docker-compose使用" class="headerlink" title="docker-compose使用"></a>docker-compose使用</h3><ul><li><p>配置实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># yaml 配置实例</span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">   - &quot;5000:5000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">   - .:/code</span><br><span class="line">    - logvolume01:/var/log</span><br><span class="line">    links:</span><br><span class="line">   - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">volumes:</span><br><span class="line">  logvolume01: &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基于docker-compose.yml启动管理的容器   会从远程拉取相应镜像并启动容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台执行该服务可以加上-d 参数：</span></span><br><span class="line">docker-compose up -d  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭并删除容器    删除容器，镜像还在，从新up会重新启动容器</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启关闭重启已经存在的由docker-compose维护的容器</span></span><br><span class="line">docker-compose start|stop|restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看由docker-compose管理的容器</span></span><br><span class="line">docker-compose ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">docker-compose logs -f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新构建</span></span><br><span class="line">docker-compose build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose实例</title>
      <link href="/aiyblog/2022/06/26/docker/docker-compose%E5%AE%9E%E4%BE%8B/"/>
      <url>/aiyblog/2022/06/26/docker/docker-compose%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>docker官方文档：<a href="http://docs.docker.com/">http://docs.docker.com</a></p><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>之前运行一个镜像，需要添加大量的参数。可以通过Docker-Compose编写这些参数。Docker-Compose可以帮助我们批量的管理容器。只需要通过一个docker-compose.yml文件去维护即可。</p><p><strong>下载安装</strong></p><ul><li>github官网：<a href="https://github.com/docker/compose/releases/">https://github.com/docker/compose/releases/</a></li><li>下载并上传linux</li><li>DockerCompose文件的名称修改一下，基于DockerCompose文件一个可执行的权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv ./docker-compose-Linux-x86_64 ./docker-compose</span><br><span class="line">mv ./docker-compose /usr/local/bin/</span><br><span class="line">cd /usr/local/bin/ </span><br><span class="line">chmod 777 ./docker-compose</span><br></pre></td></tr></table></figure><ul><li>方便后期操作，配置一个环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将docker-compose文件移动到了/usrlocal/bin，修改了letc/profile文件，给/usr/local/bin配置到了PATH中</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加</span></span><br><span class="line">export PATH=$PATH:/usr/local/bin:$JAVA_HOME/bin  # $JAVA_HOME/bin 是java环境变量</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回到用户目录查看   输出docker-compose信息</span></span><br><span class="line">cd</span><br><span class="line">docker-compose</span><br></pre></td></tr></table></figure><h3 id="管理容器"><a href="#管理容器" class="headerlink" title="管理容器"></a>管理容器</h3><p>Docker-Compose管理MySQL和Tomcat容器。 通过编写docker-compose.yml文件对容器镜像管理</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file：docker-compose.yml</span></span><br><span class="line"><span class="attr">version :</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">mysq1:</span> <span class="comment"># 服务的名称</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span>  <span class="comment"># 代表只要Docker启动,那么这个容器就跟着一起启动</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">daocloud.io/1ibrary/mysq1:5.7.4</span> <span class="comment"># 指定镜像路径</span></span><br><span class="line"><span class="attr">container_name:</span> <span class="string">mysql</span> <span class="comment"># 指定容器名称</span></span><br><span class="line"><span class="attr">ports:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span><span class="comment"># 指定端口号的映射</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>  <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line"><span class="attr">TZ:</span> <span class="string">Asia/shanghai</span> <span class="comment"># 指定时区</span></span><br><span class="line"><span class="attr">volumes :</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/home/docker_mysq1:/var/1ib/mysq1</span>   <span class="comment"># 映射数据卷</span></span><br><span class="line"><span class="attr">tomcat :</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 代表只要Docker启动,那么这个容器就跟着一起启动</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">daocloud.io/1ibrary/tomcat:8.5.15-jre8</span><span class="comment"># 指定镜像路径</span></span><br><span class="line"><span class="attr">container_name:</span> <span class="string">tomcat</span> <span class="comment"># 指定容器名称</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">Tz:</span> <span class="string">Asia/shanghai</span></span><br><span class="line"><span class="attr">volumes :</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/home/tomcat_webapps:/usr/1oca1/tomcat/webapps</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/opt/tomcat_logs:/usr/loca1/tomcat/logs</span></span><br></pre></td></tr></table></figure><h3 id="管理容器命令"><a href="#管理容器命令" class="headerlink" title="管理容器命令"></a>管理容器命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">查看日志# 基于docker-compose.yml启动管理的容器      会从远程拉取相应镜像并启动容器</span><br><span class="line">docker-compose up -d    </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭并删除容器    删除容器，镜像还在，从新up会重新启动容器</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启关闭重启已经存在的由docker-compose维护的容器</span></span><br><span class="line">docker-compose start|stop|restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看由docker-compose管理的容器</span></span><br><span class="line">docker-compose ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><h3 id="结合Dockerfile使用"><a href="#结合Dockerfile使用" class="headerlink" title="结合Dockerfile使用"></a>结合Dockerfile使用</h3><p>使用docker-compose.yml文件，以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器。</p><ul><li>yml文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">web-demo:</span></span><br><span class="line"><span class="attr">restart: alwaysbuild:</span> <span class="comment"># 构建自定义镜像</span></span><br><span class="line"><span class="attr">context:</span> <span class="string">../</span>  <span class="comment"># 指定Dockerfi1e文件所在路径  image:直接指定镜像   dockerfile：通过dockerfile构建镜像</span></span><br><span class="line"><span class="attr">dockerfi1e:</span> <span class="string">Dockerfi1e</span><span class="comment"># 指定Dockerfile文件名称</span></span><br><span class="line"><span class="attr">image: demo:</span> <span class="number">1.0</span></span><br><span class="line"><span class="attr">container_name:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="number">8081</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">TZ:</span> <span class="string">Asia/shanghai</span></span><br></pre></td></tr></table></figure><ul><li>Dockerfile文件</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> daocloud.io/<span class="number">1</span>ibrary/tomcat:<span class="number">8.5</span>.<span class="number">15</span>-jre8</span><br><span class="line"><span class="keyword">copy</span><span class="language-bash"> demo.war /usr/loca1/tomcat/webapps</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker操作</title>
      <link href="/aiyblog/2022/06/25/docker/docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/aiyblog/2022/06/25/docker/docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="构建镜像推送到仓库"><a href="#构建镜像推送到仓库" class="headerlink" title="构建镜像推送到仓库"></a>构建镜像推送到仓库</h3><ul><li> docker engine添加仓库地址后重启</li><li> 登录<br>docker login aaa.com:80 -u “robot$admin” -p </li><li> 添加一个tag<br>docker tag  etcd-icsl:1.0.0  test.docker.com:80/auth/etcd-icsl:1.0.0</li><li>push到仓库<br>docker push test.docker.com:80/auth/etcd-icsl:1.0.0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 构建etcd-icsl</span><br><span class="line">docker build -t test.docker.com:80/auth/etcd-icsl:1.0.3 .</span><br><span class="line"># 构建app</span><br><span class="line">docker build --no-cache=true -t test.docker.com:80/auth/app:1.2.1 .</span><br></pre></td></tr></table></figure><h3 id="docker-镜像导出导入"><a href="#docker-镜像导出导入" class="headerlink" title="docker 镜像导出导入"></a>docker 镜像导出导入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save -o euler1.0.1.tar 8d83b93</span><br><span class="line">docker load --input ./euler1.0.1.tar</span><br></pre></td></tr></table></figure><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><ul><li><a href="https://www.jianshu.com/p/3ef44bcfd177">https://www.jianshu.com/p/3ef44bcfd177</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 保存镜像 </span><br><span class="line">docker save -o path/.../name.vertion.tar dockerId</span><br><span class="line"># 加载镜像</span><br><span class="line">docker load -i path/.../name.vertion.tar</span><br><span class="line"># 添加tag</span><br><span class="line">docker tag dockerId  dockerName:version</span><br><span class="line"># 查看运行镜像</span><br><span class="line">docker ps</span><br><span class="line"># 进入容器</span><br><span class="line">docker exec -it dokcerId /bin/bash</span><br><span class="line"></span><br><span class="line"># 删除所有已经停止的容器  注意：要先确认停止的容器中是否有不可以删除的，也可以删除后使用镜像再启一个容器。</span><br><span class="line">docker rm $(docker ps -a|grep Exited |awk &#x27;&#123;print $1&#125;&#x27;)docker rm $(docker ps -qf status=exited)</span><br><span class="line"></span><br><span class="line"># 删除所有未打标签的镜像</span><br><span class="line">docker rmi $(docker images -q -f dangling=true)</span><br><span class="line"></span><br><span class="line"># 删除所有无用的volume</span><br><span class="line">docker volume rm $(docker volume ls -qf dangling=true)</span><br><span class="line"></span><br><span class="line"># 拉取镜像</span><br><span class="line">docker pull test.docker.com:80/auth/etcdmirror:1.0.2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】事件与事件监听器</title>
      <link href="/aiyblog/2022/05/26/spring/%E3%80%90springboot%E3%80%91%E4%BA%8B%E4%BB%B6%E4%B8%8E%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/aiyblog/2022/05/26/spring/%E3%80%90springboot%E3%80%91%E4%BA%8B%E4%BB%B6%E4%B8%8E%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><p>Spring ApplicationListener：<a href="https://blog.csdn.net/liyantianmin/article/details/81017960">https://blog.csdn.net/liyantianmin/article/details/81017960</a></p><p>Spring Boot 启动事件顺序：<a href="https://blog.csdn.net/qq_42948241/article/details/114587189">https://blog.csdn.net/qq_42948241/article/details/114587189</a></p><p>springboot事件监听器：<a href="https://www.jianshu.com/p/3478c9ea16c0">https://www.jianshu.com/p/3478c9ea16c0</a></p><p>BeanPostProcessor：<a href="https://www.jianshu.com/p/369a54201943">https://www.jianshu.com/p/369a54201943</a></p><p>使用观察者模式可以实现事件监听。【发布(添加事件监听，触发事件)-订阅(添加事件)】</p><h2 id="spring-ApplicationListener"><a href="#spring-ApplicationListener" class="headerlink" title="spring  ApplicationListener"></a>spring  ApplicationListener</h2><p>事件可以自定义、监听也可以自定义，根据业务处理。Spring 内置事件：</p><table><thead><tr><th align="left">事件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ContextRefreshedEvent</td><td align="left">ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext接口中使用 refresh() 方法来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，ApplicationContext容器已就绪可用</td></tr><tr><td align="left">ContextStartedEvent</td><td align="left">当使用 ConfigurableApplicationContext （ApplicationContext子接口）接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</td></tr><tr><td align="left">ContextStoppedEvent</td><td align="left">当使用 ConfigurableApplicationContext 接口中的 stop() 停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。</td></tr><tr><td align="left">ContextClosedEvent</td><td align="left">当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。</td></tr><tr><td align="left">RequestHandledEvent</td><td align="left">这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件。</td></tr></tbody></table><h3 id="内置事件"><a href="#内置事件" class="headerlink" title="内置事件"></a>内置事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplicationListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent contextRefreshedEvent)</span> &#123;</span><br><span class="line">        System.out.println(contextRefreshedEvent);</span><br><span class="line">        System.out.println(<span class="string">&quot;TestApplicationListener...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><ul><li>1.定义事件：继承<code>ApplicationEvent</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotifyEvent</span><span class="params">(Object source, String address, String text)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotifyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">　　 <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.定义事件监听器并注册：实现<code>ApplicationListener</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyEventListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;NotifyEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(NotifyEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> NotifyEvent) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件地址：&quot;</span> + event.getAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件内容：&quot;</span> + event.getText());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容器本身事件：&quot;</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.触发事件，监听器实时监听事件触发，完成业务。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xml配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个ApplicationEvent对象</span></span><br><span class="line">        <span class="type">NotifyEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotifyEvent</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;abc@163.com&quot;</span>,<span class="string">&quot;This is a test&quot;</span>);</span><br><span class="line">        <span class="comment">//主动触发该事件</span></span><br><span class="line">        context.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动注入</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListener</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">NotifyEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotifyEvent</span>(<span class="string">&quot;object&quot;</span>, <span class="string">&quot;abc@qq.com&quot;</span>, <span class="string">&quot;This is the content&quot;</span>);</span><br><span class="line">context.publishEvent(event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><h3 id="事件与事件监听器"><a href="#事件与事件监听器" class="headerlink" title="事件与事件监听器"></a>事件与事件监听器</h3><p><strong>内置事件</strong>：不需手动触发事件，springboot启动后会自动触发事件，实现事件监听中业务。</p><p><strong>自定义事件</strong>：需手动触发事件，实现事件监听器中业务。</p><h4 id="内置事件与执行顺序"><a href="#内置事件与执行顺序" class="headerlink" title="内置事件与执行顺序"></a>内置事件与执行顺序</h4><table><thead><tr><th align="left">顺序</th><th align="left">事件</th><th>描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">ApplicationStartingEvent</td><td>这个事件在 Spring Boot 应用运行开始时，且进行任何处理之前发送（除了监听器和初始化器注册之外）。</td></tr><tr><td align="left">2</td><td align="left">ApplicationEnvironmentPreparedEvent</td><td>这个事件在当已知要在上下文中使用 Spring 环境（Environment）时，在 Spring 上下文（context）创建之前发送。</td></tr><tr><td align="left">3</td><td align="left">ApplicationContextInitializedEvent</td><td>这个事件在当  Spring 应用上下文（ApplicationContext）准备好了，并且应用初始化器（ApplicationContextInitializers）已经被调用，在 bean 的定义（bean definitions）被加载之前发送。</td></tr><tr><td align="left">4</td><td align="left">ApplicationPreparedEvent</td><td>这个事件是在  Spring 上下文（context）刷新之前，且在 bean 的定义（bean definitions）被加载之后发送。</td></tr><tr><td align="left">5</td><td align="left">ApplicationStartedEvent</td><td>这个事件是在  Spring 上下文（context）刷新之后，且在 application/ command-line runners 被调用之前发送。</td></tr><tr><td align="left">6</td><td align="left">AvailabilityChangeEvent</td><td>这个事件紧随上个事件之后发送，状态：ReadinessState.CORRECT，表示应用已处于活动状态。</td></tr><tr><td align="left">7</td><td align="left">ApplicationReadyEvent</td><td>这个事件在任何 application/ command-line runners 调用之后发送。</td></tr><tr><td align="left">8</td><td align="left">AvailabilityChangeEvent</td><td>这个事件紧随上个事件之后发送，状态：ReadinessState.ACCEPTING_TRAFFIC，表示应用可以开始准备接收请求了。</td></tr><tr><td align="left">9</td><td align="left">ApplicationFailedEvent</td><td>这个事件在应用启动异常时进行发送。</td></tr></tbody></table><blockquote><p>可以通过@Order()指定监听器顺序</p></blockquote><h4 id="定义内置事件"><a href="#定义内置事件" class="headerlink" title="定义内置事件"></a>定义内置事件</h4><ul><li>自定义内置事件监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnvironmentPreparedListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationEnvironmentPreparedEvent&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnvironmentPreparedListener</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EnvironmentPreparedListener...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册事件监听器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySpringbootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        SpringApplication.run(MySpringbootApplication.class, args);</span></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">sa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MySpringbootApplication.class);</span><br><span class="line">        <span class="comment">// 添加事件监听</span></span><br><span class="line">        sa.addListeners(<span class="keyword">new</span> <span class="title class_">EnvironmentPreparedListener</span>());</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">caContext</span> <span class="operator">=</span> sa.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义事件-1"><a href="#自定义事件-1" class="headerlink" title="自定义事件"></a>自定义事件</h4><p><strong>定义事件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotifyEvent</span><span class="params">(Object source, String address, String text)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotifyEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">　　 <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定义监听器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyEventListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;NotifyEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(NotifyEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> NotifyEvent) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件地址：&quot;</span> + event.getAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件内容：&quot;</span> + event.getText());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容器本身事件：&quot;</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册监听器并手动触发事件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySpringbootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        SpringApplication.run(MySpringbootApplication.class, args);</span></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">sa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MySpringbootApplication.class);</span><br><span class="line">        <span class="comment">// 手动注册事件器</span></span><br><span class="line">        sa.addListeners(<span class="keyword">new</span> <span class="title class_">NotifyEventListener</span>());</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> sa.run(args);</span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        <span class="type">NotifyEvent</span> <span class="variable">notifyEvent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotifyEvent</span>(<span class="string">&quot;nortifyEvent&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;hello xiaoai&quot;</span>);</span><br><span class="line">        context.publishEvent(notifyEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件监听器注册方式"><a href="#事件监听器注册方式" class="headerlink" title="事件监听器注册方式"></a>事件监听器注册方式</h4><ul><li>1、<code>@Component</code> + 实现<code>ApplicationListener&lt;&gt;</code>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotifyEventListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;NotifyEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(NotifyEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> NotifyEvent) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件地址：&quot;</span> + event.getAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件内容：&quot;</span> + event.getText());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容器本身事件：&quot;</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2、<code>@Component</code>  + <code>@EventListener</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventListner</span> &#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evendListener</span><span class="params">(NotifyEvent event)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> NotifyEvent) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件地址：&quot;</span> + event.getAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件内容：&quot;</span> + event.getText());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容器本身事件：&quot;</span> + event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3、配置文件注册</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">context:</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">classes:</span> <span class="string">com.xiaoai.my_springboot.event.NotifyEventListener</span></span><br></pre></td></tr></table></figure><ul><li>4、启动类手动注册</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        SpringApplication.run(MySpringbootApplication.class, args);</span></span><br><span class="line">        </span><br><span class="line">    <span class="type">SpringApplication</span> <span class="variable">sa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MySpringbootApplication.class);</span><br><span class="line">        <span class="comment">// 注册事件监听器器</span></span><br><span class="line">        sa.addListeners(<span class="keyword">new</span> <span class="title class_">NotifyEventListener</span>());</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> sa.run(args);</span><br><span class="line">        <span class="comment">// 发布事件</span></span><br><span class="line">        <span class="type">NotifyEvent</span> <span class="variable">notifyEvent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotifyEvent</span>(<span class="string">&quot;nortifyEvent&quot;</span>, <span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;hello xiaoai&quot;</span>);</span><br><span class="line">        notifyEvent.getAddress();</span><br><span class="line">        context.publishEvent(notifyEvent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>5、spring.factories机制注入</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># resources目录下新建一个META-INF 的目录，目录下新建一个spring.factories的文件，里面的内容为：</span></span><br><span class="line"><span class="attr">org.springframework.context.ApplicationListener</span>=<span class="string">com.xiaoai.my_springboot.event.NotifyEventListener</span></span><br></pre></td></tr></table></figure><ul><li>6、多事件监听：<code>@Component</code> + 实现 <code>SmartApplicationListener</code>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartListenerTest</span> <span class="keyword">implements</span> <span class="title class_">SmartApplicationListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsEventType</span><span class="params">(Class&lt;? extends ApplicationEvent&gt; eventType)</span>&#123;</span><br><span class="line">        <span class="comment">//这里是类型判断，判断监听器感兴趣的事件</span></span><br><span class="line">        <span class="comment">//可以对多个事件感兴趣，这里就配置了两个事件</span></span><br><span class="line">        <span class="keyword">return</span> ApplicationStartedEvent.class.isAssignableFrom(eventType)</span><br><span class="line">                || NotifyEvent.class.isAssignableFrom(eventType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent appEvent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (appEvent <span class="keyword">instanceof</span> ApplicationStartedEvent)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;applicationStartedEvent...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (appEvent <span class="keyword">instanceof</span> NotifyEvent) &#123;</span><br><span class="line">            <span class="type">NotifyEvent</span> <span class="variable">event</span> <span class="operator">=</span> (NotifyEvent) appEvent;</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件地址：&quot;</span> + event.getAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件内容：&quot;</span> + event.getText());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;容器本身事件：&quot;</span> + appEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动执行任务"><a href="#自动执行任务" class="headerlink" title="自动执行任务"></a>自动执行任务</h2><h3 id="ApplicationRunner"><a href="#ApplicationRunner" class="headerlink" title="ApplicationRunner"></a>ApplicationRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartTask2</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----ApplicationRunner:springboot start......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartTask</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----CommandLineRunner:springboot start......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰方法相关注解"><a href="#修饰方法相关注解" class="headerlink" title="修饰方法相关注解"></a>修饰方法相关注解</h3><ul><li><p>@PostConstruct   </p></li><li><p>@PreDestroy</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="comment">// 当bean创建完成加载时执行</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----@PostConstruct:TestClass method 【init】 is run.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭前执行</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyPro</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----@PreDestroy:TestClass method 【destroyPro】 is run.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>运行顺序：</p><ul><li>Spring IOC容器实例化Bean</li><li>调用BeanPostProcessor的postProcessBeforeInitialization方法</li><li>调用bean实例的初始化方法</li><li>调用BeanPostProcessor的postProcessAfterInitialization方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartTask3</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 可以根据不同的bean执行不同的操作</span></span><br><span class="line">        <span class="keyword">if</span> (beanName.equalsIgnoreCase(<span class="string">&quot;eventListner&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;postProcessBeforeInitialization()...&quot;</span> + beanName + <span class="string">&quot;=&gt;&quot;</span> + bean);</span><br><span class="line">            System.out.println(<span class="string">&quot;eventListner is loading...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanName.equalsIgnoreCase(<span class="string">&quot;eventListner&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;postProcessAfterInitialization()...&quot;</span> + beanName + <span class="string">&quot;=&gt;&quot;</span> + bean);</span><br><span class="line">            System.out.println(<span class="string">&quot;eventListner is loaded...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanFactoryPostProcessor...postProcessBeanFactory...&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> beanFactory.getBeanDefinitionCount();</span><br><span class="line">        String[] names = beanFactory.getBeanDefinitionNames();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前BeanFactory中有【&quot;</span> + count + <span class="string">&quot;】个Bean&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.asList(names));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logback日志配置</title>
      <link href="/aiyblog/2022/03/21/java2/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
      <url>/aiyblog/2022/03/21/java2/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="logback日志配置"><a href="#logback日志配置" class="headerlink" title="logback日志配置"></a>logback日志配置</h2><ul><li><p>依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>日志配置 logback.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;contextName&gt;logback-spring-demo-dev&lt;/contextName&gt;</span><br><span class="line">    &lt;property name=&quot;pattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %level %logger&#123;50&#125; - %msg %n&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;pattern-color&quot; value=&quot;%yellow(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) [%thread] %highlight(%level) %green(%logger&#123;50&#125;) - %msg %n&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;APP_NAME&quot; value=&quot;console&quot;/&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 控制台输出 --&gt;</span><br><span class="line">    &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;pattern&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 控制台输出-带颜色 --&gt;</span><br><span class="line">    &lt;appender name=&quot;CONSOLE-WITH-COLOR&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;pattern-color&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 文件输出 --&gt;</span><br><span class="line">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot; filePermissions=&quot;rw-r-----&quot;&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot; filePermissions=&quot;rw-r-----&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;LOG_HOME:-logs&#125;/$&#123;APP_NAME&#125;/%d.%i.log.gz&lt;/fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;</span><br><span class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line"></span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;pattern&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;CONSOLE-WITH-COLOR&quot;/&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;FILE&quot;/&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="elk日志记录"><a href="#elk日志记录" class="headerlink" title="elk日志记录"></a>elk日志记录</h3><ul><li><p>启动filebeat收集日志推送logstash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">filebeat:</span><br><span class="line">  inputs:</span><br><span class="line">    - type: log</span><br><span class="line">      paths:</span><br><span class="line">        - /data/myapp/logs/*/*.log</span><br><span class="line">      fields:</span><br><span class="line">        fregion: &#x27;$&#123;FREGION:DEFAULT&#125;&#x27;</span><br><span class="line">        APP: &#x27;$&#123;APP_NAME&#125;&#x27;</span><br><span class="line">output:</span><br><span class="line">  # kafka 或者 logstash地址</span><br><span class="line">  kafka:</span><br><span class="line">    hosts: ...</span><br><span class="line">    topic: ...</span><br></pre></td></tr></table></figure></li><li><p>logstash 解析日志推送es</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  # 添加日志来源</span><br><span class="line">  kafka &#123;</span><br><span class="line">    xxx =&gt; xxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      &quot;message&quot; =&gt; &quot;(?&lt;logTime&gt;\d+-\d+-\d+- \d+:\d+:\d+.\d+) \[%&#123;NOTSPACE:thread&#125;\] \[%&#123;NOTSPACE:level&#125;\] \[%&#123;NOTSPACE:logger&#125;\] : \[%&#123;NOTSPACE:type&#125;\] %&#123;GREEDYDATA:msg&#125;&quot;</span><br><span class="line">      &quot;remove_field&quot; =&gt; [&quot;message&quot;, &quot;tags&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  # 输出</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;&quot;]</span><br><span class="line">    index =&gt; &quot;[es_index]-[type]-%&#123;+YYYY-MM-dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  kafka &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用输出日志格式按照logstash配置格式一致, 通过logback配置日志格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;pattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %level %logger&#123;50&#125; : %msg %n&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 可通过过滤器统一记录日志</span><br><span class="line">public class RequestFilter implements WebFilter &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private MyLogger logger;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ServerProperty serverProperty;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, WebFilterChain chain) &#123;</span><br><span class="line">        Context context = new Context();  // 自定义上下文</span><br><span class="line">        context.setStart(System.currentTimeMillis());</span><br><span class="line">        context.setRequest(exchange.getRequest());</span><br><span class="line">        context.setResponse(exchange.getResponse());</span><br><span class="line">        context.setProperty(serverProperty);</span><br><span class="line">        exchange.getResponse().beforeCommit(() -&gt; resetHttpStatus(context));</span><br><span class="line">        return chain.filter(exchange).contextWrite(ctx -&gt; ctx.put(DEF_CONTEXT, context))</span><br><span class="line">                .doOnSuccess(res -&gt; this.onSuccess(exchange, context))</span><br><span class="line">                .doOnError(error -&gt; this.onError(error, exchange, context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Mono&lt;Void&gt; resetHttpStatus(Context ctx) &#123;</span><br><span class="line">        String contentType = ctx.getContentType();</span><br><span class="line">        if (ctx.isError() &amp;&amp; contentType.contains(&quot;xml&quot;)) &#123;</span><br><span class="line">            ctx.getResponse().setRawStatusCode(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        &#125;</span><br><span class="line">        if (ctx.isEscape()) &#123;</span><br><span class="line">            ctx.getResponse().setRawStatusCode(HttpStatus.ACCEPTED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        return Mono.empty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void onSuccess(ServerWebExchange exchange, Context context) &#123;</span><br><span class="line">        context.setEnd(System.currentTimeMillis());</span><br><span class="line">        if (context.isError()) &#123;</span><br><span class="line">            context.setEnd(System.currentTimeMillis());</span><br><span class="line">            context.setThrowable(context.getThrowable());</span><br><span class="line">            logger.onError(context.getThrowable(), context);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            logger.onSuccess(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return Mono.deferContextual(ctx -&gt; &#123;Context context = ctx.get(DEF_CONTEXT);return func.apply(context);&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="self-log4j"><a href="#self-log4j" class="headerlink" title="self-log4j"></a>self-log4j</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.18.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.18.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-jul&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.18.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-to-slf4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.18.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.18.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li><p>配置:log4j2.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Configuration:</span><br><span class="line">  status: warn</span><br><span class="line"></span><br><span class="line">  Properties: # 定义全局变量</span><br><span class="line">    Property:</span><br><span class="line">      - name: log.level.console</span><br><span class="line">        value: trace</span><br><span class="line"></span><br><span class="line">  Appenders:</span><br><span class="line">    Console:  # 输出到控制台</span><br><span class="line">      name: ConsoleAppender</span><br><span class="line">      target: SYSTEM_OUT</span><br><span class="line">      PatternLayout:</span><br><span class="line">        pattern: &quot;%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;:%4p %t :%m%n&quot;</span><br><span class="line"></span><br><span class="line">    RollingFile: # 输出到文件</span><br><span class="line">      - name: RuntimeAppender</span><br><span class="line">        ignoreExceptions: false</span><br><span class="line">        fileName: &quot;$&#123;sys:log.path:-./logs&#125;/runtime.log&quot;</span><br><span class="line">        filePattern: &quot;$&#123;sys:log.path:-./logs&#125;/$$&#123;date:yyyy-MM&#125;/%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;</span><br><span class="line">        PatternLayout:</span><br><span class="line">          pattern: &quot;%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;:%4p %t :%m%n&quot;</span><br><span class="line">        Policies:</span><br><span class="line">          SizeBasedTriggeringPolicy:</span><br><span class="line">            size: &quot;128 MB&quot;</span><br><span class="line">        DefaultRolloverStrategy:</span><br><span class="line">          max: 1000</span><br><span class="line"></span><br><span class="line">      - name: TestAppender</span><br><span class="line">        ignoreExceptions: false</span><br><span class="line">        fileName: &quot;$&#123;sys:log.path:-./logs&#125;/test.log&quot;</span><br><span class="line">        filePattern: &quot;$&#123;sys:log.path:-./logs&#125;/$$&#123;date:yyyy-MM&#125;/%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;</span><br><span class="line">        PatternLayout:</span><br><span class="line">          pattern: &quot;%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;:%4p %t :%m%n&quot;</span><br><span class="line">        Policies:</span><br><span class="line">          SizeBasedTriggeringPolicy:</span><br><span class="line">            size: &quot;128 MB&quot;</span><br><span class="line">        DefaultRolloverStrategy:</span><br><span class="line">          max: 1000</span><br><span class="line"></span><br><span class="line">  Loggers:</span><br><span class="line">    ROOT:</span><br><span class="line">      level: info</span><br><span class="line">      AppenderRef:</span><br><span class="line">        - ref: RuntimeAppender</span><br><span class="line">        - ref: ConsoleAppender</span><br><span class="line"></span><br><span class="line">    Logger:</span><br><span class="line">      - name: test</span><br><span class="line">        additivity: false</span><br><span class="line">        level: info</span><br><span class="line">        AppenderRef:</span><br><span class="line">          - ref: TestAppender</span><br><span class="line">          - ref: ConsoleAppender</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(&quot;test&quot;);</span><br><span class="line">logger.info(&quot;test info log&quot;);</span><br><span class="line">logger.debug(&quot;test debug log&quot;);</span><br><span class="line">logger.warn(&quot;test warn log&quot;);</span><br><span class="line">logger.error(&quot;test error log&quot;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解应用</title>
      <link href="/aiyblog/2022/03/21/java2/java%E6%B3%A8%E8%A7%A3%E5%BA%94%E7%94%A8/"/>
      <url>/aiyblog/2022/03/21/java2/java%E6%B3%A8%E8%A7%A3%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>示例：注解计数器</p><ul><li>创建注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CountAnotation &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注解类及方法收集与处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCout</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, Object&gt; methodObjectMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">CountAnotation</span> <span class="variable">countAnotation</span> <span class="operator">=</span> bean.getClass().getAnnotation(CountAnotation.class);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(countAnotation)) &#123;</span><br><span class="line">            Method[] methods = bean.getClass().getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="type">CountAnotation</span> <span class="variable">methodAnnotation</span> <span class="operator">=</span> method.getAnnotation(CountAnotation.class);</span><br><span class="line">                <span class="keyword">if</span> (Objects.nonNull(methodAnnotation)) &#123;</span><br><span class="line">                    methodObjectMap.put(method, bean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">getCount</span><span class="params">()</span> throu Throwable &#123;</span><br><span class="line">        Map&lt;String, Object&gt; countAnotationsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (methodObjectMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> countAnotationsMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Method, Object&gt; entry : methodObjectMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(entry.getValue());</span><br><span class="line">            countAnotationsMap.put(method.getAnnotation(CountAnotation.class).name(), result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> countAnotationsMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CountAnotation(name = &quot;count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Count</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">runningCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">successCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">failCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrementRunning</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        runningCount.addAndGet(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrementRunning</span><span class="params">()</span> &#123;</span><br><span class="line">        runningCount.decrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrementSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        successCount.addAndGet(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrementFail</span><span class="params">()</span> &#123;</span><br><span class="line">        failCount.addAndGet(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CountAnotation(name = &quot;running&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRunningCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> runningCount.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CountAnotation(name = &quot;success&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSuccessCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> successCount.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CountAnotation(name = &quot;fail&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFailCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> failCount.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java一种监听类写法</title>
      <link href="/aiyblog/2022/03/21/java2/java%E4%B8%80%E7%A7%8D%E7%9B%91%E5%90%AC%E7%B1%BB%E5%86%99%E6%B3%95/"/>
      <url>/aiyblog/2022/03/21/java2/java%E4%B8%80%E7%A7%8D%E7%9B%91%E5%90%AC%E7%B1%BB%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>创建监听接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onInsert</span><span class="params">(EvenEntity evenEntity)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onChange</span><span class="params">(EvenEntity evenEntity, List&lt;GroupEntity&gt; before, List&lt;GroupEntity&gt; after)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onrDelete</span><span class="params">(EvenEntity evenEntity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onInsert</span><span class="params">(EvenEntity evenEntity)</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChange</span><span class="params">(EvenEntity evenEntity, List&lt;GroupEntity&gt; before, List&lt;GroupEntity&gt; after)</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDelete</span><span class="params">(EvenEntity evenEntity)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建监听工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventListenerFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EventListener</span> <span class="variable">eventListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListenerImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> EventListener <span class="title function_">getEventListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> eventListener;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEventListener</span><span class="params">(EventListener eventListener)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.eventListener = eventListener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可在拦截器、接口等获取监听类执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EventListenerFactory eventListenerFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/mng/user&quot;, method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> IResponse <span class="title function_">userManage</span><span class="params">(<span class="meta">@RequestBody</span> <span class="keyword">final</span> String data)</span> &#123;</span><br><span class="line">  option...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// success after...</span></span><br><span class="line">  <span class="type">EventListener</span> <span class="variable">eventListener</span> <span class="operator">=</span> eventListenerFactory.getEventListener();</span><br><span class="line">  eventListener.onInsert(userEntity);</span><br><span class="line">  eventListener.onChange(userEntity);</span><br><span class="line">  eventListener.onDelete(userEntity);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java s3操作工具类</title>
      <link href="/aiyblog/2022/03/21/java2/javas3%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/aiyblog/2022/03/21/java2/javas3%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="s3-java工具类"><a href="#s3-java工具类" class="headerlink" title="s3 java工具类"></a>s3 java工具类</h3><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.amazonaws<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aws-java-sdk-s3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>code</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">S3Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; config;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AmazonS3 client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">S3Client</span><span class="params">(Map&lt;String, String&gt; config)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.client = client();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AmazonS3 <span class="title function_">client</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AWSCredentials</span> <span class="variable">credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicAWSCredentials</span>(config.get(<span class="string">&quot;access_key&quot;</span>), config.get(<span class="string">&quot;secret_key&quot;</span>));</span><br><span class="line">        <span class="type">ClientConfiguration</span> <span class="variable">clientConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientConfiguration</span>();</span><br><span class="line">        clientConfiguration.setProtocol(<span class="string">&quot;https&quot;</span>.equalsIgnoreCase(config.get(<span class="string">&quot;protocol&quot;</span>))</span><br><span class="line">            ? Protocol.HTTPS : Protocol.HTTP);</span><br><span class="line">        clientConfiguration.setSignerOverride(<span class="string">&quot;S3SignerType&quot;</span>);</span><br><span class="line">        clientConfiguration.setSocketTimeout(<span class="number">180000</span>);</span><br><span class="line">        clientConfiguration.setMaxConnections(<span class="number">50</span>);</span><br><span class="line">        clientConfiguration.setConnectionTimeout(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AmazonS3ClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> AmazonS3ClientBuilder.standard()</span><br><span class="line">                .withCredentials(<span class="keyword">new</span> <span class="title class_">AWSStaticCredentialsProvider</span>(credentials))</span><br><span class="line">                .withClientConfiguration(clientConfiguration)</span><br><span class="line">                .withEndpointConfiguration(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AwsClientBuilder</span>.EndpointConfiguration(config.get(<span class="string">&quot;endpoint&quot;</span>), config.get(<span class="string">&quot;region&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equalsIgnoreCase(config.get(<span class="string">&quot;enablePathStyle&quot;</span>))) &#123;</span><br><span class="line">            builder.enablePathStyleAccess();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(String key, File file)</span> &#123;</span><br><span class="line">        client.putObject(config.get(<span class="string">&quot;bucket&quot;</span>), key, file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBucket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.get(<span class="string">&quot;bucket&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectMetadata <span class="title function_">getMetadata</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> client.getObjectMetadata(<span class="keyword">new</span> <span class="title class_">GetObjectMetadataRequest</span>(getBucket(), key));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ObjectMetadata <span class="title function_">downloadFile</span><span class="params">(String key, File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> client.getObject(<span class="keyword">new</span> <span class="title class_">GetObjectRequest</span>(getBucket(), key), file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;S3ObjectSummary&gt; <span class="title function_">getFileList</span><span class="params">(Integer limit, String prefinx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (limit == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListObjectsV2Result</span> <span class="variable">result</span> <span class="operator">=</span> client.listObjectsV2(getBucket(), prefinx);</span><br><span class="line">            <span class="keyword">return</span> result.getObjectSummaries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListObjectsV2Request</span> <span class="variable">listObjReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListObjectsV2Request</span>().withBucketName(getBucket())</span><br><span class="line">            .withMaxKeys(limit).withPrefix(prefinx);</span><br><span class="line">        <span class="type">ListObjectsV2Result</span> <span class="variable">result</span> <span class="operator">=</span> client.listObjectsV2(listObjReq);</span><br><span class="line">        result.setTruncated(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> result.getObjectSummaries();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filedownload</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个计数器锁。初始值为线程数量，每执行结束一个线程后计数器减去1 ，当计数器为0的时候await等待的线程会被唤醒继续执行。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">akey</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">skey</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">region</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;snapshot/main/aa&quot;</span>;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AWSCredentials</span> <span class="variable">credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicAWSCredentials</span>(akey, skey);</span><br><span class="line">            <span class="type">ClientConfiguration</span> <span class="variable">clientConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientConfiguration</span>();</span><br><span class="line">            clientConfig.setProtocol(Protocol.HTTP);</span><br><span class="line">            <span class="comment">// clientConfig.setSignerOverride(&quot;S3SignerType&quot;);</span></span><br><span class="line">            clientConfig.setSocketTimeout(<span class="number">180000</span>);</span><br><span class="line">            clientConfig.setMaxConnections(<span class="number">50</span>);</span><br><span class="line">            clientConfig.setConnectionTimeout(<span class="number">10000</span>);</span><br><span class="line">            <span class="comment">// AmazonS3 s3Client = new AmazonS3Client(credentials, clientConfig);</span></span><br><span class="line">            clientConfig.setSignerOverride(<span class="string">&quot;S3SignerType&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">AmazonS3ClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> AmazonS3ClientBuilder.standard()</span><br><span class="line">                .withCredentials(<span class="keyword">new</span> <span class="title class_">AWSStaticCredentialsProvider</span>(credentials))</span><br><span class="line">                .withClientConfiguration(clientConfig)</span><br><span class="line">                .withEndpointConfiguration(<span class="keyword">new</span> <span class="title class_">AwsClientBuilder</span>.EndpointConfiguration(endpoint, region));</span><br><span class="line">            builder.enablePathStyleAccess();</span><br><span class="line">            <span class="type">AmazonS3</span> <span class="variable">s3Client</span> <span class="operator">=</span> builder.build();</span><br><span class="line">            <span class="comment">// s3Client.setEndpoint(endpoint);</span></span><br><span class="line">            <span class="comment">// ObjectMetadata object = s3Client.getObject(new GetObjectRequest(bucket, key), new File(&quot;ttttttt.txt&quot;));</span></span><br><span class="line">            <span class="comment">// System.out.println(&quot;文件大小：&quot; +object.getContentLength());</span></span><br><span class="line">            <span class="comment">//获取对象大小</span></span><br><span class="line">            <span class="type">ObjectMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> s3Client.getObjectMetadata(<span class="keyword">new</span> <span class="title class_">GetObjectMetadataRequest</span>(bucket, key));</span><br><span class="line">            <span class="type">long</span> <span class="variable">filesize</span> <span class="operator">=</span> metadata.getInstanceLength();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件大小：&quot;</span> + filesize);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ExecutorService service = Executors.newFixedThreadPool(10);</span></span><br><span class="line">            <span class="comment">// long length = filesize;</span></span><br><span class="line">            <span class="comment">// long packageLength = length / 10;</span></span><br><span class="line">        <span class="comment">//     long leftLength = length % 10;</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//     long end = packageLength;</span></span><br><span class="line">        <span class="comment">//     file = new RandomAccessFile(filename, &quot;rw&quot;);</span></span><br><span class="line">        <span class="comment">//     //计算每个线程请求文件的开始和结束位置</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//     for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line">        <span class="comment">//         if (leftLength &gt; 0) &#123;</span></span><br><span class="line">        <span class="comment">//             packageLength++;</span></span><br><span class="line">        <span class="comment">//             leftLength--;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         System.out.println(&quot;pos: &quot; + pos + &quot;endpos: &quot; + packageLength);</span></span><br><span class="line">        <span class="comment">//         service.execute(new download(pos, packageLength, file, s3Client, bucket, key));</span></span><br><span class="line">        <span class="comment">//         pos = packageLength;</span></span><br><span class="line">        <span class="comment">//         packageLength = packageLength + end;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     //等待其他线程结束后继续向下执行</span></span><br><span class="line">        <span class="comment">//     try &#123;</span></span><br><span class="line">        <span class="comment">//         latch.await();</span></span><br><span class="line">        <span class="comment">//     &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line">        <span class="comment">//         // TODO Auto-generated catch block</span></span><br><span class="line">        <span class="comment">//         e.printStackTrace();</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     //关闭线程池</span></span><br><span class="line">        <span class="comment">//     service.shutdown();</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (AmazonServiceException e) &#123;</span><br><span class="line">            <span class="comment">// 服务端错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="literal">null</span>) &#123;</span><br><span class="line">                file.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">download</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> from;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RandomAccessFile file;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AmazonS3 client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String buket;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">download</span><span class="params">(<span class="type">long</span> from, <span class="type">long</span> end, RandomAccessFile file, AmazonS3 client, String buket, String key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.from = from;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">        <span class="built_in">this</span>.file = file;</span><br><span class="line">        <span class="built_in">this</span>.client = client;</span><br><span class="line">        <span class="built_in">this</span>.buket = buket;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">S3Object</span> <span class="variable">objectPortion</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取对象指定范围的流写入文件</span></span><br><span class="line">            <span class="type">GetObjectRequest</span> <span class="variable">rangeObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetObjectRequest</span>(buket, key).withRange(from, end);</span><br><span class="line">            objectPortion = client.getObject(rangeObjectRequest);</span><br><span class="line"></span><br><span class="line">            input = objectPortion.getObjectContent();</span><br><span class="line">            buffer = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(input);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> <span class="built_in">this</span>.from;</span><br><span class="line">            <span class="type">long</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="built_in">this</span>.end;</span><br><span class="line">            <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((len = buffer.read(buf)) == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (file) &#123;</span><br><span class="line">                    file.seek(from);</span><br><span class="line">                    file.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                from += len;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;文件片段 &quot;</span> + start + <span class="string">&quot;~&quot;</span> + stop + <span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Filedownload</span>().latch.countDown();<span class="comment">//线程结束计数器减1</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (buffer != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    buffer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    input.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (objectPortion != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objectPortion.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.amazonaws.ClientConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.Protocol;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.auth.AWSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.auth.AWSStaticCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.auth.BasicAWSCredentials;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.client.builder.AwsClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.AmazonS3;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.AmazonS3ClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.GetObjectMetadataRequest;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.GetObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.ListObjectsV2Request;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.ListObjectsV2Result;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.ObjectMetadata;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.S3Object;</span><br><span class="line"><span class="keyword">import</span> com.amazonaws.services.s3.model.S3ObjectSummary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.exception.ExceptionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">S3Client</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SEGMENT</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; config;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AmazonS3 client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">S3Client</span><span class="params">(Map&lt;String, String&gt; config)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.client = client();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AmazonS3 <span class="title function_">client</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AWSCredentials</span> <span class="variable">credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicAWSCredentials</span>(config.get(<span class="string">&quot;access_key&quot;</span>), config.get(<span class="string">&quot;secret_key&quot;</span>));</span><br><span class="line">        <span class="type">ClientConfiguration</span> <span class="variable">clientConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientConfiguration</span>();</span><br><span class="line">        clientConfiguration.setProtocol(<span class="string">&quot;https&quot;</span>.equalsIgnoreCase(config.get(<span class="string">&quot;protocol&quot;</span>))</span><br><span class="line">            ? Protocol.HTTPS : Protocol.HTTP);</span><br><span class="line">        clientConfiguration.setSignerOverride(<span class="string">&quot;S3SignerType&quot;</span>);</span><br><span class="line">        clientConfiguration.setSocketTimeout(<span class="number">180000</span>);</span><br><span class="line">        clientConfiguration.setMaxConnections(<span class="number">50</span>);</span><br><span class="line">        clientConfiguration.setConnectionTimeout(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AmazonS3ClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> AmazonS3ClientBuilder.standard()</span><br><span class="line">                .withCredentials(<span class="keyword">new</span> <span class="title class_">AWSStaticCredentialsProvider</span>(credentials))</span><br><span class="line">                .withClientConfiguration(clientConfiguration)</span><br><span class="line">                .withEndpointConfiguration(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AwsClientBuilder</span>.EndpointConfiguration(config.get(<span class="string">&quot;endpoint&quot;</span>), config.get(<span class="string">&quot;region&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equalsIgnoreCase(config.get(<span class="string">&quot;enablePathStyle&quot;</span>))) &#123;</span><br><span class="line">            builder.enablePathStyleAccess();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(String key, File file)</span> &#123;</span><br><span class="line">        client.putObject(config.get(<span class="string">&quot;bucket&quot;</span>), key, file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBucket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.get(<span class="string">&quot;bucket&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObjectMetadata <span class="title function_">getMetadata</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> client.getObjectMetadata(<span class="keyword">new</span> <span class="title class_">GetObjectMetadataRequest</span>(getBucket(), key));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ObjectMetadata <span class="title function_">downloadFile</span><span class="params">(String key, File file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> client.getObject(<span class="keyword">new</span> <span class="title class_">GetObjectRequest</span>(getBucket(), key), file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadBySegment</span><span class="params">(String key, File file)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(SEGMENT);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(SEGMENT);</span><br><span class="line">        <span class="type">RandomAccessFile</span>  <span class="variable">raFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> getMetadata(key).getContentLength();</span><br><span class="line">        log.info(<span class="string">&quot;download by segment file [&#123;&#125;], size [&#123;&#125;]&quot;</span>, file.getPath(), length);</span><br><span class="line">        <span class="comment">// length of each segment</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">segLength</span> <span class="operator">=</span> length / SEGMENT;</span><br><span class="line">        <span class="comment">// remaining length</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">remainLength</span> <span class="operator">=</span> length % <span class="number">10</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">posStart</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">posEnd</span> <span class="operator">=</span> segLength;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; SEGMENT; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (remainLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                segLength++;</span><br><span class="line">                remainLength--;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;download by segment pos [&#123;&#125;] endpos [&#123;&#125;]&quot;</span>, posStart, segLength);</span><br><span class="line">            <span class="type">long</span> <span class="variable">finalPackageLength</span> <span class="operator">=</span> segLength;</span><br><span class="line">            <span class="type">long</span> <span class="variable">finalPos</span> <span class="operator">=</span> posStart;</span><br><span class="line">            service.execute(()-&gt; download(key, finalPos, finalPackageLength, raFile, latch));</span><br><span class="line">            posStart = segLength;</span><br><span class="line">            segLength += posEnd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line">        log.info(<span class="string">&quot;download by segment complete.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String key, <span class="type">long</span> from, <span class="type">long</span> end, RandomAccessFile raFile, CountDownLatch latch)</span>&#123;</span><br><span class="line">        <span class="type">S3Object</span> <span class="variable">objPortion</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> from;</span><br><span class="line">        <span class="type">long</span> <span class="variable">stop</span> <span class="operator">=</span> end;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取对象指定范围的流写入文件</span></span><br><span class="line">            <span class="type">GetObjectRequest</span> <span class="variable">rangeObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetObjectRequest</span>(getBucket(), key).withRange(from, end);</span><br><span class="line">            objPortion = client.getObject(rangeObjectRequest);</span><br><span class="line">            input = objPortion.getObjectContent();</span><br><span class="line">            buffer = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(input);</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> ((len = buffer.read(buf)) == -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (raFile) &#123;</span><br><span class="line">                    raFile.seek(from);</span><br><span class="line">                    raFile.write(buf, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                from += len;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;download by segment pos [&#123;&#125;] endpos [&#123;&#125;] complete.&quot;</span>, start, stop);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                latch.countDown();</span><br><span class="line">                IOUtils.close(buffer, input, objPortion);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;S3ObjectSummary&gt; <span class="title function_">getFileList</span><span class="params">(Integer limit, String prefinx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (limit == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListObjectsV2Result</span> <span class="variable">result</span> <span class="operator">=</span> client.listObjectsV2(getBucket(), prefinx);</span><br><span class="line">            <span class="keyword">return</span> result.getObjectSummaries();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListObjectsV2Request</span> <span class="variable">listObjReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListObjectsV2Request</span>().withBucketName(getBucket())</span><br><span class="line">            .withMaxKeys(limit).withPrefix(prefinx);</span><br><span class="line">        <span class="type">ListObjectsV2Result</span> <span class="variable">result</span> <span class="operator">=</span> client.listObjectsV2(listObjReq);</span><br><span class="line">        result.setTruncated(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> result.getObjectSummaries();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分段上传<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * multipart upload</span><br><span class="line"> *</span><br><span class="line"> * @param file the file</span><br><span class="line"> * @param key the key</span><br><span class="line"> */</span><br><span class="line">public void uploadSegment(File file, String key) &#123;</span><br><span class="line">    if (file == null)&#123;</span><br><span class="line">        log.warn(&quot;file is null.&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    String bucketName = getBucket();</span><br><span class="line">    long size = file.length();</span><br><span class="line">    int minPartSize = 5 * 1024 * 1024;</span><br><span class="line">    List&lt;Long&gt; positions = Collections.synchronizedList(new ArrayList&lt;&gt;());</span><br><span class="line">    long filePosition = 0;</span><br><span class="line">    while (filePosition &lt; size) &#123;</span><br><span class="line">        positions.add(filePosition);</span><br><span class="line">        filePosition += Math.min(minPartSize, (size - filePosition));</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(&quot;totalSize：&#123;&#125;，totalSegment: &#123;&#125;&quot;, size, positions.size());</span><br><span class="line">    CountDownLatch latch = new CountDownLatch(positions.size());</span><br><span class="line">    List&lt;PartETag&gt; partETags = Collections.synchronizedList(new ArrayList&lt;&gt;());</span><br><span class="line">    InitiateMultipartUploadRequest initRequest = new InitiateMultipartUploadRequest(bucketName, key);</span><br><span class="line">    InitiateMultipartUploadResult initResponse = s3Client.initiateMultipartUpload(initRequest);</span><br><span class="line">    try &#123; </span><br><span class="line">        long begin = System.currentTimeMillis();</span><br><span class="line">        for (int i = 0; i &lt; positions.size(); i++) &#123;</span><br><span class="line">            int finalI = i;</span><br><span class="line">            exec.execute(() -&gt; SegmentTask(partETags, latch, bucketName, key, initResponse.getUploadId(), finalI + 1,</span><br><span class="line">                positions.get(finalI), file, Math.min(minPartSize, (size - positions.get(finalI)))));</span><br><span class="line">        &#125;</span><br><span class="line">        latch.await();</span><br><span class="line">        CompleteMultipartUploadRequest compRequest = new CompleteMultipartUploadRequest(bucketName, key,</span><br><span class="line">            initResponse.getUploadId(), partETags);</span><br><span class="line">        s3Client.completeMultipartUpload(compRequest);</span><br><span class="line">        log.info(&quot;uploadSegment spends time：&#123;&#125;&quot;, (System.currentTimeMillis() - begin));</span><br><span class="line">    &#125; catch (Exception ex) &#123;</span><br><span class="line">        s3Client.abortMultipartUpload(new AbortMultipartUploadRequest(bucketName, key, initResponse.getUploadId()));</span><br><span class="line">        log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void segmentTask(List&lt;PartETag&gt; partETags, CountDownLatch latch, String bucketName, String key, </span><br><span class="line">    String uploadId, int part, Long positions, File file, long partSize)&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        long time1 = System.currentTimeMillis();</span><br><span class="line">        UploadPartRequest uploadRequest = new UploadPartRequest().withBucketName(bucketName).withKey(key)</span><br><span class="line">            .withUploadId(uploadId).withPartNumber(part).withFileOffset(positions).withFile(file)</span><br><span class="line">            .withPartSize(partSize);</span><br><span class="line">        partETags.add(s3Client.uploadPart(uploadRequest).getPartETag());</span><br><span class="line">        long time2 = System.currentTimeMillis();</span><br><span class="line">        log.info(&quot;segment [] upload spend time: &#123;&#125;&quot;, part, (time2 - time1));</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getBucket</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> <span class="built_in">this</span>.config.getBucket();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(bucket))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalBucketNameException</span>(String.format(<span class="string">&quot;bucket name: %s&quot;</span>, bucket));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bucket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> CopyObjectResult <span class="title function_">copyFile</span><span class="params">(String sourceBucketName, String sourceKey, String destinationBucketName, String destinationKey)</span> &#123;</span><br><span class="line">    <span class="type">CopyObjectRequest</span> <span class="variable">copyObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CopyObjectRequest</span>();</span><br><span class="line">    copyObjectRequest.setSourceBucketName(sourceBucketName);</span><br><span class="line">    copyObjectRequest.setSourceKey(sourceKey);</span><br><span class="line">    copyObjectRequest.setDestinationBucketName(destinationBucketName);</span><br><span class="line">    copyObjectRequest.setDestinationKey(destinationKey);</span><br><span class="line">    <span class="keyword">return</span> s3Client.copyObject(copyObjectRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ObjectMetadata <span class="title function_">getMetadata</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s3Client.getObjectMetadata(<span class="keyword">new</span> <span class="title class_">GetObjectMetadataRequest</span>(getBucket(), key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> ObjectMetadata <span class="title function_">getFileMetadata</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getMetadata(keyHandle(key, <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">objExists</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s3Client.doesObjectExist(getBucket(), key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(String key, <span class="type">boolean</span> file)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> objExists(keyHandle(key, file));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">keyHandle</span><span class="params">(String key, <span class="type">boolean</span> file)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isDirKey</span> <span class="operator">=</span> key.endsWith(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file)&#123;</span><br><span class="line">        <span class="keyword">return</span> isDirKey ? key.substring(<span class="number">0</span>, key.length() - <span class="number">1</span>) : key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isDirKey ? key : key + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">objExists</span><span class="params">(String key, <span class="type">boolean</span> dirOrFile)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (objExists(key))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key.endsWith(<span class="string">&quot;/&quot;</span>) ? objExists(key.substring(<span class="number">0</span>, key.length() - <span class="number">1</span>)) : objExists(key + <span class="string">&quot;/&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;S3ObjectSummary&gt; <span class="title function_">getFileList</span><span class="params">(Integer limit, String prefix)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (limit == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">ListObjectsV2Result</span> <span class="variable">result</span> <span class="operator">=</span> s3Client.listObjectsV2(getBucket(), prefix);</span><br><span class="line">        <span class="keyword">return</span> result.getObjectSummaries();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListObjectsV2Request</span> <span class="variable">listObjReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListObjectsV2Request</span>().withBucketName(getBucket())</span><br><span class="line">        .withMaxKeys(limit).withPrefix(prefix);</span><br><span class="line">    <span class="type">ListObjectsV2Result</span> <span class="variable">result</span> <span class="operator">=</span> s3Client.listObjectsV2(listObjReq);</span><br><span class="line">    result.setTruncated(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> result.getObjectSummaries();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> PutObjectResult <span class="title function_">mkdir</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMetadata</span>();</span><br><span class="line">        metadata.setContentLength(<span class="number">0</span>);</span><br><span class="line">        inStream = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(getBucket(), key, inStream, metadata);</span><br><span class="line">        <span class="keyword">return</span> s3Client.putObject(putObjectRequest);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inStream != <span class="literal">null</span>)&#123;</span><br><span class="line">            inStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">downloadSegment</span><span class="params">(String key, <span class="type">long</span> position, ByteBuffer dest)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">S3Object</span> <span class="variable">objPortion</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">positionEnd</span> <span class="operator">=</span> (position + (dest.limit()-<span class="number">1</span>)) - dest.position();</span><br><span class="line">            <span class="type">GetObjectRequest</span> <span class="variable">rangeObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetObjectRequest</span>(getBucket(), key)</span><br><span class="line">                .withRange(position, positionEnd);</span><br><span class="line">            objPortion = <span class="built_in">this</span>.s3Client.getObject(rangeObjectRequest);</span><br><span class="line">            input = objPortion.getObjectContent();</span><br><span class="line">            buffer = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(input);</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[dest.limit()-dest.position()];</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> buffer.read(buf);</span><br><span class="line">                <span class="keyword">if</span> (read == -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                size += read;</span><br><span class="line">                dest.put(buf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                IOUtils.close(buffer, input, objPortion);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">checkPprefinx</span><span class="params">(String prefinx)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] chars = prefinx.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">aChar</span> <span class="operator">=</span> chars[i];</span><br><span class="line">        <span class="keyword">if</span> (aChar != <span class="string">&#x27;/&#x27;</span> &amp;&amp; aChar != <span class="string">&#x27;\\&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> prefinx.substring(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prefinx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-分段下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">downloadBySegment</span><span class="params">(String key, File file, <span class="type">int</span> segment)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> getMetadata(key).getContentLength();</span><br><span class="line">    <span class="keyword">if</span> (length &lt; SEGMENT_START_SIZE)&#123;</span><br><span class="line">        <span class="type">ObjectMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> downloadFile(key, file);</span><br><span class="line">        <span class="keyword">return</span> metadata.getContentLength() == length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;download by segment file [&#123;&#125;], size [&#123;&#125;KB]-[&#123;&#125;MB]&quot;</span>, file.getPath(), length, length/<span class="number">1024</span>/<span class="number">1024</span>);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(segment);</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">raFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">segLength</span> <span class="operator">=</span> length / segment;</span><br><span class="line">        <span class="type">long</span> <span class="variable">remainLenth</span> <span class="operator">=</span> length % segment;</span><br><span class="line">        <span class="type">long</span> <span class="variable">posStart</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">posEnd</span> <span class="operator">=</span> segLength;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; segment; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (remainLenth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                segLength++;</span><br><span class="line">                remainLenth--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">finalPosStart</span> <span class="operator">=</span> posStart;</span><br><span class="line">            <span class="type">int</span> <span class="variable">finalSegLength</span> <span class="operator">=</span> Integer.parseInt(String.valueOf(segLength - posStart));</span><br><span class="line">            exec.execute(()-&gt; &#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[finalSegLength];</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">byteBuf</span> <span class="operator">=</span> ByteBuffer.wrap(bytes,<span class="number">0</span> , finalSegLength);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (raFile) &#123;</span><br><span class="line">                        raFile.seek(finalPosStart);</span><br><span class="line">                        raFile.write(bytes, <span class="number">0</span>, downloadSegment(key, finalPosStart, byteBuf));</span><br><span class="line">                        log.info(<span class="string">&quot;download by segment pos [&#123;&#125;] endpos [&#123;&#125;] complete.&quot;</span>, finalPosStart,</span><br><span class="line">                            finalPosStart + finalSegLength);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                    log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                    <span class="keyword">if</span> (byteBuf != <span class="literal">null</span>)&#123;</span><br><span class="line">                        byteBuf.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            posStart = segLength;</span><br><span class="line">            segLength += posEnd;</span><br><span class="line">        &#125;</span><br><span class="line">        latch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | FileNotFoundException ex) &#123;</span><br><span class="line">        log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">fileLen</span> <span class="operator">=</span> file.length();</span><br><span class="line">    log.info(<span class="string">&quot;download by segment complete.length=[&#123;&#125;] downloadSize=[&#123;&#125;]&quot;</span>,length, fileLen);</span><br><span class="line">    <span class="keyword">return</span> length == fileLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">downloadByPartSize</span><span class="params">(String key, File file, <span class="type">int</span> partSize)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> getMetadata(key).getContentLength();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;download by segment file [&#123;&#125;], size[&#123;&#125;KB] about[&#123;&#125;MB]&quot;</span>, file.getPath(), length, length/<span class="number">1024</span>/<span class="number">1024</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">minPartSize</span> <span class="operator">=</span> SEGMENT_SIZE;</span><br><span class="line">            <span class="keyword">if</span> (partSize &gt; minPartSize) &#123;</span><br><span class="line">                minPartSize = partSize;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Long&gt; positionList = Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            <span class="type">long</span> <span class="variable">filePosition</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">            positionList.add(filePosition);</span><br><span class="line">            <span class="keyword">while</span> (filePosition &lt; length) &#123;</span><br><span class="line">                filePosition += Math.min(minPartSize, (length - filePosition));</span><br><span class="line">                positionList.add(filePosition);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">segmentSize</span> <span class="operator">=</span> positionList.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(segmentSize);</span><br><span class="line">            <span class="type">RandomAccessFile</span> <span class="variable">raFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; segmentSize; i++) &#123;</span><br><span class="line">                downloadPart(raFile, latch, key, positionList.get(i),</span><br><span class="line">                    Integer.parseInt(String.valueOf(positionList.get(i+<span class="number">1</span>) - positionList.get(i))));</span><br><span class="line">            &#125;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | FileNotFoundException ex) &#123;</span><br><span class="line">            log.error(ExceptionUtils.getStackTrace(ex));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">fileLen</span> <span class="operator">=</span> file.length();</span><br><span class="line">        log.info(<span class="string">&quot;download by segment complete.length[&#123;&#125;] downloadSize[&#123;&#125;]&quot;</span>,length, fileLen);</span><br><span class="line">        <span class="keyword">return</span> length == fileLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> s3 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java工具方法、类</title>
      <link href="/aiyblog/2022/03/21/java2/java%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB/"/>
      <url>/aiyblog/2022/03/21/java2/java%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举类处理"><a href="#枚举类处理" class="headerlink" title="枚举类处理"></a>枚举类处理</h2><ul><li>一个示例 : 把毫秒转成Duration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如3秒钟 转为 毫秒；  TimeUnitEnum.SECOND.getUnitTime(3).getSeconds() * 1000   = 3000;</span></span><br><span class="line"><span class="comment">// 如3分钟 转为 毫秒；  TimeUnitEnum.MINUTE.getUnitTime(3).getSeconds() * 1000   = 180000;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">TimeUnitEnum</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, TimeUnitEnum&gt; MAPPINGS = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">2</span>);</span><br><span class="line">    SECOND(),</span><br><span class="line">    MINUTE(); </span><br><span class="line">    <span class="keyword">public</span> Duration <span class="title function_">getUnitTime</span><span class="params">(Long intervalTime)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> SECOND:</span><br><span class="line">                <span class="keyword">return</span> Duration.ofSeconds(intervalTime);</span><br><span class="line">            <span class="keyword">case</span> MINUTE:</span><br><span class="line">                <span class="keyword">return</span> Duration.ofMinutes(intervalTime);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;not support&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TimeUnitEnum <span class="title function_">resolve</span><span class="params">(<span class="meta">@Nullable</span> String unitTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unitTime != <span class="literal">null</span> ? MAPPINGS.get(unitTime) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        TimeUnitEnum[] times = values();</span><br><span class="line">        <span class="type">int</span> <span class="variable">policLen</span> <span class="operator">=</span> times.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; policLen; ++i) &#123;</span><br><span class="line">            <span class="type">TimeUnitEnum</span> <span class="variable">time</span> <span class="operator">=</span> times[i];</span><br><span class="line">            MAPPINGS.put(time.name(), time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用sha256签名"><a href="#使用sha256签名" class="headerlink" title="使用sha256签名"></a>使用sha256签名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static String SHA256(String content) &#123;</span><br><span class="line">    MessageDigest messageDigest;</span><br><span class="line">    try &#123;</span><br><span class="line">        messageDigest = MessageDigest.getInstance(&quot;SHA-256&quot;);</span><br><span class="line">        messageDigest.update(content.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        return BaseEncoding.base16().lowerCase().encode(messageDigest.digest());</span><br><span class="line">    &#125; catch (NoSuchAlgorithmException ex) &#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】jasypt加密</title>
      <link href="/aiyblog/2022/02/26/spring/%E3%80%90springboot%E3%80%91jasypt%E5%8A%A0%E5%AF%86/"/>
      <url>/aiyblog/2022/02/26/spring/%E3%80%90springboot%E3%80%91jasypt%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://blog.csdn.net/enthan809882/article/details/105529349">https://blog.csdn.net/enthan809882/article/details/105529349</a></li><li><a href="https://amore.blog.csdn.net/article/details/111468221">https://amore.blog.csdn.net/article/details/111468221</a></li><li><a href="https://blog.csdn.net/weixin_49076592/article/details/119797675">https://blog.csdn.net/weixin_49076592/article/details/119797675</a></li></ul><hr><h2 id="Jasypt"><a href="#Jasypt" class="headerlink" title="Jasypt"></a>Jasypt</h2><p>Jasypt是加密库，支持密码、Digest认证、文本、对象加密。</p><p>密码加密复合RFC2307标准。<a href="http://www.jasypt.org/download.html">http://www.jasypt.org/download.html</a></p><p>spring项目参考：<a href="https://blog.csdn.net/gdfsbingfeng/article/details/16886805">https://blog.csdn.net/gdfsbingfeng/article/details/16886805</a></p><p>仓库地址：<a href="https://github.com/ulisesbocchio/jasypt-spring-boot">https://github.com/ulisesbocchio/jasypt-spring-boot</a></p><p>使用过程也可查看仓库README.md：<a href="https://github.com/ulisesbocchio/jasypt-spring-boot">https://github.com/ulisesbocchio/jasypt-spring-boot</a></p><p>maven官网地址：<a href="https://mvnrepository.com/artifact/com.github.ulisesbocchio/jasypt-spring-boot-starter">https://mvnrepository.com/artifact/com.github.ulisesbocchio/jasypt-spring-boot-starter</a></p><h2 id="springboot使用jasypt"><a href="#springboot使用jasypt" class="headerlink" title="springboot使用jasypt"></a>springboot使用jasypt</h2><p>配置信息只有 <code>jasypt.encryptor.password</code> 是必须的，配置项有：</p><ul><li>旧版本(<a href="https://blog.csdn.net/weixin_49076592">图片引用来源</a>)</li></ul><p><img src="../img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTA3NjU5Mg==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><ul><li>新版本(<a href="https://blog.csdn.net/weixin_49076592">图片引用来源</a>)</li></ul><p><img src="../img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80OTA3NjU5Mg==,size_16,color_FFFFFF,t_7011.png" alt="在这里插入图片描述"></p><p><strong>需要注意版本对应</strong></p><table><thead><tr><th>jasypt-spring-boot-starter</th><th>依赖的 spring-boot-starter</th></tr></thead><tbody><tr><td>2.1.0</td><td>2.0.3.RELEASE 2.2.6.RELEASE</td></tr><tr><td>2.0.0</td><td>2.0.0.RELEASE 2.2.6.RELEASE</td></tr><tr><td>1.18</td><td>1.5.10.RELEASE 2.2.6.RELEASE</td></tr><tr><td>1.12</td><td>1.5.1.RELEASE 2.2.6.RELEASE</td></tr></tbody></table><p><strong>需要注意加解密的类型一致，如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.1</span><span class="number">.2</span>版本默认加密方式为：PBEWithMD5AndDES</span><br><span class="line"><span class="number">3.0</span><span class="number">.3</span>版本默认加密方式为：PBEWITHHMACSHA512ANDAES_256</span><br><span class="line">当引入<span class="number">3.0</span><span class="number">.3</span>依赖，却没有添加相关jasypt加解密配置，而密文通过【PBEWithMD5AndDES】来加密，启动会报错。</span><br><span class="line">需要切换为【PBEWITHHMACSHA512ANDAES_256】方式进行。</span><br></pre></td></tr></table></figure><h3 id="简单使用例子"><a href="#简单使用例子" class="headerlink" title="简单使用例子"></a>简单使用例子</h3><h4 id="1、添加测试程序"><a href="#1、添加测试程序" class="headerlink" title="1、添加测试程序"></a>1、添加测试程序</h4><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式1：引入 jasypt-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.ulisesbocchio/jasypt-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方式2：引入 jasypt-spring-boot  需在启动类添加@EnableEncryptableProperties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加springboot接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;test.password:testpassword&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String jasyptTestPassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testJasypt&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">testJasyptPassword</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get password:&quot;</span> + jasyptTestPassword;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件添加加密后的配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">ENC(获取到的密文)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 如果密文加盐，需要配置盐值</span></span><br><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">盐值</span></span><br></pre></td></tr></table></figure><h4 id="2、获取密文"><a href="#2、获取密文" class="headerlink" title="2、获取密文"></a>2、<strong>获取密文</strong></h4><p><strong>2-1、通过java程序获取密文</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -----默认加解密</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringEncryptor stringEncryptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encryptPwd</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">passwordEn</span> <span class="operator">=</span> stringEncryptor.encrypt(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">passwordDe</span> <span class="operator">=</span> stringEncryptor.decrypt(passwordEn);</span><br><span class="line">    System.out.println(<span class="string">&quot;password密文：&quot;</span> + passwordEn);</span><br><span class="line">    System.out.println(<span class="string">&quot;password明文：&quot;</span> + passwordDe);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// -----加盐加解密</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StandardPBEStringEncryptor</span> <span class="variable">encryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardPBEStringEncryptor</span>();</span><br><span class="line">    encryptor.setPassword(<span class="string">&quot;hello&quot;</span>); <span class="comment">//设置加密盐值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">passwordEn</span> <span class="operator">=</span> encryptor.encrypt(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">passwordDe</span> <span class="operator">=</span> encryptor.decrypt(passwordEn);</span><br><span class="line">    System.out.println(<span class="string">&quot;password密文：&quot;</span> + passwordEn);</span><br><span class="line">    System.out.println(<span class="string">&quot;password明文：&quot;</span> + passwordDe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----加解密工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JasypUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PBEWITHMD5ANDDES</span> <span class="operator">=</span> <span class="string">&quot;PBEWithMD5AndDES&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PBEWITHHMACSHA512ANDAES_256</span> <span class="operator">=</span> <span class="string">&quot;PBEWITHHMACSHA512ANDAES_256&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: Jasyp加密（PBEWithMD5AndDES）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:      Rambo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CreateDate</span>:  2020/7/13 10:24</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateUser</span>:  Rambo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateDate</span>:  2020/7/13 10:24</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainText      待加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factor         加密秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>:     1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptWithMD5</span><span class="params">(String plainText, String factor)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建加解密工具实例</span></span><br><span class="line">        <span class="type">StandardPBEStringEncryptor</span> <span class="variable">encryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardPBEStringEncryptor</span>();</span><br><span class="line">        <span class="comment">// 2. 加解密配置</span></span><br><span class="line">        <span class="type">EnvironmentStringPBEConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvironmentStringPBEConfig</span>();</span><br><span class="line">        config.setAlgorithm(PBEWITHMD5ANDDES);</span><br><span class="line">        config.setPassword(factor);</span><br><span class="line">        encryptor.setConfig(config);</span><br><span class="line">        <span class="comment">// 3. 加密</span></span><br><span class="line">        <span class="keyword">return</span> encryptor.encrypt(plainText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: Jaspy解密（PBEWithMD5AndDES）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:      Rambo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CreateDate</span>:  2020/7/13 10:28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateUser</span>:  Rambo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateDate</span>:  2020/7/13 10:28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptedText      待解密密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factor             解密秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>:     1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptWithMD5</span><span class="params">(String encryptedText, String factor)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建加解密工具实例</span></span><br><span class="line">        <span class="type">StandardPBEStringEncryptor</span> <span class="variable">encryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardPBEStringEncryptor</span>();</span><br><span class="line">        <span class="comment">// 2. 加解密配置</span></span><br><span class="line">        <span class="type">EnvironmentStringPBEConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvironmentStringPBEConfig</span>();</span><br><span class="line">        config.setAlgorithm(PBEWITHMD5ANDDES);</span><br><span class="line">        config.setPassword(factor);</span><br><span class="line">        encryptor.setConfig(config);</span><br><span class="line">        <span class="comment">// 3. 解密</span></span><br><span class="line">        <span class="keyword">return</span> encryptor.decrypt(encryptedText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: Jasyp 加密（PBEWITHHMACSHA512ANDAES_256）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:      Rambo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CreateDate</span>:  2020/7/25 14:34</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateUser</span>:  Rambo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateDate</span>:  2020/7/25 14:34</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainText  待加密的原文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factor     加密秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>:     1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptWithSHA512</span><span class="params">(String plainText, String factor)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建加解密工具实例</span></span><br><span class="line">        <span class="type">PooledPBEStringEncryptor</span> <span class="variable">encryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PooledPBEStringEncryptor</span>();</span><br><span class="line">        <span class="comment">// 2. 加解密配置</span></span><br><span class="line">        <span class="type">SimpleStringPBEConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleStringPBEConfig</span>();</span><br><span class="line">        config.setPassword(factor);</span><br><span class="line">        config.setAlgorithm(PBEWITHHMACSHA512ANDAES_256);</span><br><span class="line">        <span class="comment">// 为减少配置文件的书写，以下都是 Jasyp 3.x 版本，配置文件默认配置</span></span><br><span class="line">        config.setKeyObtentionIterations( <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        config.setPoolSize(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        config.setProviderName(<span class="string">&quot;SunJCE&quot;</span>);</span><br><span class="line">        config.setSaltGeneratorClassName(<span class="string">&quot;org.jasypt.salt.RandomSaltGenerator&quot;</span>);</span><br><span class="line">        config.setIvGeneratorClassName(<span class="string">&quot;org.jasypt.iv.RandomIvGenerator&quot;</span>);</span><br><span class="line">        config.setStringOutputType(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">        encryptor.setConfig(config);</span><br><span class="line">        <span class="comment">// 3. 加密</span></span><br><span class="line">        <span class="keyword">return</span> encryptor.encrypt(plainText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: Jaspy解密（PBEWITHHMACSHA512ANDAES_256）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>:      Rambo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CreateDate</span>:  2020/7/25 14:40</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateUser</span>:  Rambo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@UpdateDate</span>:  2020/7/25 14:40</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptedText  待解密密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factor         解密秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Version</span>:     1.0.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptWithSHA512</span><span class="params">(String encryptedText, String factor)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建加解密工具实例</span></span><br><span class="line">        <span class="type">PooledPBEStringEncryptor</span> <span class="variable">encryptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PooledPBEStringEncryptor</span>();</span><br><span class="line">        <span class="comment">// 2. 加解密配置</span></span><br><span class="line">        <span class="type">SimpleStringPBEConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleStringPBEConfig</span>();</span><br><span class="line">        config.setPassword(factor);</span><br><span class="line">        config.setAlgorithm(PBEWITHHMACSHA512ANDAES_256);</span><br><span class="line">        <span class="comment">// 为减少配置文件的书写，以下都是 Jasyp 3.x 版本，配置文件默认配置</span></span><br><span class="line">        config.setKeyObtentionIterations( <span class="string">&quot;1000&quot;</span>);</span><br><span class="line">        config.setPoolSize(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        config.setProviderName(<span class="string">&quot;SunJCE&quot;</span>);</span><br><span class="line">        config.setSaltGeneratorClassName(<span class="string">&quot;org.jasypt.salt.RandomSaltGenerator&quot;</span>);</span><br><span class="line">        config.setIvGeneratorClassName(<span class="string">&quot;org.jasypt.iv.RandomIvGenerator&quot;</span>);</span><br><span class="line">        config.setStringOutputType(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">        encryptor.setConfig(config);</span><br><span class="line">        <span class="comment">// 3. 解密</span></span><br><span class="line">        <span class="keyword">return</span> encryptor.decrypt(encryptedText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2-2、通过jasypt中jar包程序获取密文</strong></p><ul><li>添加依赖，下载好jar包到本地maven仓库后，cmd进入jasypt.jar包所在的目录</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如个人本地目录：D:\Environmental\RepMaven\org\jasypt\jasypt\<span class="number">1</span>.<span class="number">9</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>加密命令，参数说明：<ul><li>input：需要加密的字段</li><li>password：加密盐值，用来进行加密</li><li>algorithm：加密方式，默认不写也行</li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">java -cp jasypt-<span class="number">1</span>.<span class="number">9</span>.<span class="number">3</span>.jar  org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI input=&quot;root&quot; password=hello algorithm=PBEWithMD5AndDES</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">----ENVIRONMENT-----------------</span><br><span class="line"><span class="function">Runtime: <span class="title">Oracle</span> <span class="title">Corporation</span> <span class="title">Java</span> <span class="title">HotSpot</span>(<span class="title">TM</span>) 64-<span class="title">Bit</span> <span class="title">Server</span> <span class="title">VM</span> 25.171-<span class="title">b11</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">----<span class="title">ARGUMENTS</span>-------------------</span></span><br><span class="line"><span class="function"><span class="title">algorithm</span>: <span class="title">PBEWithMD5AndDES</span></span></span><br><span class="line"><span class="function"><span class="title">input</span>: <span class="title">root</span></span></span><br><span class="line"><span class="function"><span class="title">password</span>: <span class="title">hello</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">----<span class="title">OUTPUT</span>----------------------</span></span><br><span class="line"><span class="function"><span class="title">aCEx6r9g2lBuGF8w</span>/<span class="title">XU8wQ</span>==</span></span><br></pre></td></tr></table></figure><ul><li>解密命令</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">java -cp jasypt-<span class="number">1</span>.<span class="number">9</span>.<span class="number">3</span>.jar org.jasypt.intf.cli.JasyptPBEStringDecryptionCLI input=&quot;aCEx6r9g2lBuGF8w/XU8wQ==&quot; password=hello algorithm=PBEWithMD5AndDES</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">----ENVIRONMENT-----------------</span><br><span class="line"><span class="function">Runtime: <span class="title">Oracle</span> <span class="title">Corporation</span> <span class="title">Java</span> <span class="title">HotSpot</span>(<span class="title">TM</span>) 64-<span class="title">Bit</span> <span class="title">Server</span> <span class="title">VM</span> 25.171-<span class="title">b11</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">----<span class="title">ARGUMENTS</span>-------------------</span></span><br><span class="line"><span class="function"><span class="title">algorithm</span>: <span class="title">PBEWithMD5AndDES</span></span></span><br><span class="line"><span class="function"><span class="title">input</span>: <span class="title">aCEx6r9g2lBuGF8w</span>/<span class="title">XU8wQ</span>==</span></span><br><span class="line"><span class="function"><span class="title">password</span>: <span class="title">hello</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">----<span class="title">OUTPUT</span>----------------------</span></span><br><span class="line"><span class="function"><span class="title">root</span></span></span><br></pre></td></tr></table></figure><h4 id="3、使用密文：ENC-密文"><a href="#3、使用密文：ENC-密文" class="headerlink" title="3、使用密文：ENC(密文)"></a>3、使用密文：ENC(密文)</h4><ul><li>如数据源密码加密</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mytest?characterEncoding=UTF-8&amp;&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(AxfLzLN0ayIYc7dGypds0g==)</span>  <span class="comment"># 明文=root</span></span><br></pre></td></tr></table></figure><ul><li>测试程序中密码配置加密</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">ENC(aCEx6r9g2lBuGF8w/XU8wQ==)</span> <span class="comment"># 未加盐：bnwAMepYNbDeCkENg+cerQ==   明文=root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果密文加盐，需要配置盐值</span></span><br><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure><h4 id="4、访问测试接口"><a href="#4、访问测试接口" class="headerlink" title="4、访问测试接口"></a>4、访问测试接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#访问接口</span><br><span class="line">http://localhost:8080/testJasypt</span><br><span class="line"></span><br><span class="line">#结果</span><br><span class="line">get password:root</span><br></pre></td></tr></table></figure><h3 id="异常问题"><a href="#异常问题" class="headerlink" title="异常问题"></a>异常问题</h3><h4 id="jce权限问题"><a href="#jce权限问题" class="headerlink" title="jce权限问题"></a>jce权限问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决方案：</span></span><br><span class="line">下载：https://www.oracle.com/java/technologies/javase-jce8-downloads.html</span><br><span class="line">下载压缩包解压，将local_policy.jar和US_export_policy.jar替换Java\jdk1.8.0_77\jre\lib\security\路径下的jar包</span><br></pre></td></tr></table></figure><h4 id="yml中带有-引起的问题"><a href="#yml中带有-引起的问题" class="headerlink" title="yml中带有@引起的问题"></a>yml中带有@引起的问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yml中@是特殊字符， 含有@左右需要加单引号。</span><br><span class="line">jasypt 自动加密整个文件的时候，会将单引号也当做密码的一部分，这样得到的密文肯定是错的。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解决方案：</span></span><br><span class="line">直接将密码生成，然后再复制过去，不要带双引号。</span><br></pre></td></tr></table></figure><h3 id="关于盐值配置设置"><a href="#关于盐值配置设置" class="headerlink" title="关于盐值配置设置"></a>关于盐值配置设置</h3><p>关于盐值配置方式。注意：关于盐值明文存放到配置文件，一样存在安全风险。</p><h4 id="1、配置文件-配置中心设置"><a href="#1、配置文件-配置中心设置" class="headerlink" title="1、配置文件/配置中心设置"></a>1、配置文件/配置中心设置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure><h4 id="2、系统环境变量设置"><a href="#2、系统环境变量设置" class="headerlink" title="2、系统环境变量设置"></a>2、系统环境变量设置</h4><ul><li>在系统的环境变量中进行配置。</li></ul><p><img src="../img/image-20211121010451216.png" alt="image-20211121010451216"></p><ul><li>配置文件中获取</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;ENCRYPT:hello&#125;</span>  <span class="comment"># 系统环境找不到，默认使用hello</span></span><br></pre></td></tr></table></figure><h4 id="3、启动参数设置"><a href="#3、启动参数设置" class="headerlink" title="3、启动参数设置"></a>3、启动参数设置</h4><ul><li>在启动配置中添加参数</li></ul><p><img src="../img/image-20211121004838904.png" alt="image-20211121004838904"></p><p>在idea启动设置，本地可以正常启动，但是打包到服务器部署需要在idea中Mave打包和部署添加相关参数：</p><ul><li>添加maven打包参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package -Djasypt.encryptor.password=hello</span><br></pre></td></tr></table></figure><p><img src="../img/image-20211121005401727.png" alt="image-20211121005401727"></p><p><img src="../img/image-20211121005649497.png" alt="image-20211121005649497"></p><ul><li>启动时添加参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Djasypt.encryptor.password=123456 springboot-jasypt-test.jar</span><br></pre></td></tr></table></figure><h4 id="4、服务器配置文件设置"><a href="#4、服务器配置文件设置" class="headerlink" title="4、服务器配置文件设置"></a>4、服务器配置文件设置</h4><p>配置到服务器某文件中，启动时加载文件获取。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>不自定义加密类的话，默认算法为 PBEWithMD5AndDES</p></li><li><p>多次生成，每次生成的密码不一样。不同的密码序列，解密却可以一样。</p></li><li><p>ENC前缀可改变，即自定义格式：需要添加配置</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">property:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">&quot;TEST[&quot;</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">&quot;]&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】配置登录认证</title>
      <link href="/aiyblog/2022/01/26/spring/%E3%80%90springboot%E3%80%91%E9%85%8D%E7%BD%AE%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/"/>
      <url>/aiyblog/2022/01/26/spring/%E3%80%90springboot%E3%80%91%E9%85%8D%E7%BD%AE%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h3><ul><li>添加配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#properties</span></span><br><span class="line"><span class="attr">auth.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">auth.user-name</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">auth.password</span>=<span class="string">admin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># yml</span></span><br><span class="line"><span class="attr">auth</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">enable</span>: <span class="string">true</span></span><br><span class="line">  <span class="attr">user-name</span>: <span class="string">admin</span></span><br><span class="line">  <span class="attr">auth.password</span>: <span class="string">admin</span></span><br></pre></td></tr></table></figure><ul><li>添加配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;auth&quot;, ignoreUnknownFields = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">enable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getEnable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnable</span><span class="params">(Boolean enable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加校验配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.config.tomcatAuth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.CredentialHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.authenticator.AuthenticatorBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.authenticator.BasicAuthenticator;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.realm.GenericPrincipal;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.realm.MessageDigestCredentialHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.realm.RealmBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityConstraint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Principal;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;auth&quot;, name = &quot;enable&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthTomcatConfig</span> <span class="keyword">implements</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt;, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthProperties authProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> &#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcatServletWebServerFactory</span> <span class="operator">=</span> (TomcatServletWebServerFactory) factory;</span><br><span class="line">        tomcatServletWebServerFactory.addContextCustomizers(context -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">RealmBase</span> <span class="variable">realm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealmBase</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> String <span class="title function_">getPassword</span><span class="params">(String username)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (authProperties.getUserName().equals(username)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> authProperties.getPassword();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> Principal <span class="title function_">getPrincipal</span><span class="params">(String username)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GenericPrincipal</span>(username, authProperties.getPassword(), Collections.singletonList(<span class="string">&quot;**&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">CredentialHandler</span> <span class="variable">credentialHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageDigestCredentialHandler</span>();</span><br><span class="line">            realm.setCredentialHandler(credentialHandler);</span><br><span class="line">            context.setRealm(realm);</span><br><span class="line">            <span class="type">AuthenticatorBase</span> <span class="variable">digestAuthenticator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicAuthenticator</span>();</span><br><span class="line">            <span class="comment">// 设置安全校验</span></span><br><span class="line">            <span class="type">SecurityConstraint</span> <span class="variable">securityConstraint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityConstraint</span>();</span><br><span class="line">            securityConstraint.setAuthConstraint(<span class="literal">true</span>); <span class="comment">// 是否开启</span></span><br><span class="line">            securityConstraint.addAuthRole(<span class="string">&quot;**&quot;</span>);</span><br><span class="line">            <span class="comment">// 校验条件收集</span></span><br><span class="line">            <span class="type">SecurityCollection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityCollection</span>();</span><br><span class="line">            collection.addPattern(<span class="string">&quot;/auth/*&quot;</span>);  <span class="comment">// 校验路径</span></span><br><span class="line">            securityConstraint.addCollection(collection);</span><br><span class="line"></span><br><span class="line">            context.addConstraint(securityConstraint);</span><br><span class="line">            context.getPipeline().addValve(digestAuthenticator);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ELK】elk学习</title>
      <link href="/aiyblog/2022/01/26/%E3%80%90ELK%E3%80%91elk%E5%AD%A6%E4%B9%A0/"/>
      <url>/aiyblog/2022/01/26/%E3%80%90ELK%E3%80%91elk%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://www.bilibili.com/video/BV1iJ411c7Az?p=63">https://www.bilibili.com/video/BV1iJ411c7Az?p=63</a></p><p><strong>ELK</strong>：三个开源软件的缩写，分别表示：Elasticsearch , Logstash, Kibana , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash</p><h2 id="1、ElasticSearch：数据存储与查找"><a href="#1、ElasticSearch：数据存储与查找" class="headerlink" title="1、ElasticSearch：数据存储与查找"></a>1、ElasticSearch：数据存储与查找</h2><h3 id="linux安装es"><a href="#linux安装es" class="headerlink" title="linux安装es"></a>linux安装es</h3><ul><li>下载es：<a href="https://www.elastic.co/cn/products/elasticsearch">https://www.elastic.co/cn/products/elasticsearch</a></li><li>安装：即解压</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建elsearch用户，Elasticsearch不支持root用户运行</span></span><br><span class="line">useradd elsearch</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压安装包</span></span><br><span class="line">tar -xvf elasticsearch-6.5.4.tar.gz -C /itcast/es/</span><br></pre></td></tr></table></figure><ul><li>修改配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件</span></span><br><span class="line">vim conf/elasticsearch.yml</span><br><span class="line">network.host: 0.0.0.0 #设置ip地址，任意网络均可访问</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">说明：在Elasticsearch中如果，network.host不是localhost或者127.0.0.1的话，就会认为是生产环境，</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">会对环境的要求比较高，我们的测试环境不一定能够满足，一般情况下需要修改2处配置，如下：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1：修改jvm启动参数</span></span><br><span class="line">vim conf/jvm.options</span><br><span class="line">-Xms128m #根据自己机器情况修改</span><br><span class="line">-Xmx128m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2：一个进程在VMAs(虚拟内存区域)创建内存映射最大数量</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">vm.max_map_count=655360</span><br><span class="line">sysctl -p #配置生效</span><br></pre></td></tr></table></figure><ul><li>启动与停止ES服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">su - elsearch</span><br><span class="line">cd bin</span><br><span class="line">./elasticsearch 或 ./elasticsearch -d #后台启动</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过访问进行测试，看到如下信息，就说明ES启动成功了</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;ZO1vdaQ&quot;,</span><br><span class="line">  &quot;cluster_name&quot;: &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot;: &quot;ibiBX0_uQgmRcYV4h55J1A&quot;,</span><br><span class="line">  &quot;version&quot;: &#123;</span><br><span class="line">    &quot;number&quot;: &quot;6.5.4&quot;,</span><br><span class="line">    &quot;build_flavor&quot;: &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot;: &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot;: &quot;d2ef93d&quot;,</span><br><span class="line">    &quot;build_date&quot;: &quot;2018-12-17T21:17:40.758843Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot;: false,</span><br><span class="line">    &quot;lucene_version&quot;: &quot;7.5.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot;: &quot;5.6.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot;: &quot;5.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot;: &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止服务</span></span><br><span class="line">root@itcast:~# jps</span><br><span class="line">68709 Jps</span><br><span class="line">68072 Elasticsearch</span><br><span class="line">kill 68072 #通过kill结束进程</span><br></pre></td></tr></table></figure><p><strong>安装报错</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动出错，</span></span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at</span><br><span class="line">least [65536]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解决：切换到root用户，编辑limits.conf 添加类似如下内容</span></span><br><span class="line">vi /etc/security/limits.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加如下内容:  添加后需要重新登录配置才生效，<span class="built_in">exit</span>退出后重新su - elsearch登录</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line"></span><br><span class="line">[2]: max number of threads [1024] for user [elsearch] is too low, increase to at least</span><br><span class="line">[4096]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解决：切换到root用户，进入limits.d目录下修改配置文件。</span></span><br><span class="line">vi /etc/security/limits.d/[xx]-nproc.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改如下内容：</span></span><br><span class="line">* soft nproc 1024</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改为</span></span><br><span class="line">* soft nproc 4096</span><br><span class="line">[3]: system call filters failed to install; check the logs and fix your configuration</span><br><span class="line">or disable system call filters at your own risk</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解决：Centos6不支持SecComp，而ES5.2.0默认bootstrap.system_call_filter为<span class="literal">true</span></span></span><br><span class="line">vim config/elasticsearch.yml</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加：</span></span><br><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure><h3 id="elasticsearch-head"><a href="#elasticsearch-head" class="headerlink" title="elasticsearch-head"></a>elasticsearch-head</h3><p>由于ES官方并没有为ES提供界面管理工具，仅仅是提供了后台的服务。elasticsearch-head是一个为ES开发的一个页<br>面客户端工具，其源码托管于GitHub，地址为：<a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p>4种安装方式：</p><ul><li>源码安装，通过npm run start启动（不推荐）</li><li>通过docker安装（推荐）</li><li>通过chrome插件安装（推荐）<ul><li><a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/related?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/related?utm_source=chrome-ntp-icon</a></li></ul></li><li>通过ES的plugin方式安装（不推荐）</li></ul><blockquote><p>注意： </p><p>由于前后端分离开发，所以会存在跨域问题，需要在服务端做CORS的配置，如下： </p><p>1、vim elasticsearch.yml </p><p>2、添加http.cors.enabled: true http.cors.allow-origin: “*” </p><p>通过chrome插件的方式安装不存在该问题。</p></blockquote><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>Elasticsearch插件地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><ul><li>安装：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装方法：将下载到的elasticsearch-analysis-ik-6.5.4.zip解压到es安装目录：elasticsearch/plugins/ik目录下即可。</span></span><br><span class="line">mkdir plugins/ik</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">unzip elasticsearch-analysis-ik-6.5.4.zip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启</span></span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><h3 id="java客户端"><a href="#java客户端" class="headerlink" title="java客户端"></a>java客户端</h3><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--itcast es高级--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="rest低级客户端"><a href="#rest低级客户端" class="headerlink" title="rest低级客户端"></a>rest低级客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestEsBase</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(RestEsBase.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">MAPPER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="keyword">private</span> RestClient restClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">restClientBuilder</span> <span class="operator">=</span> restClient.builder(</span><br><span class="line"><span class="comment">//                new HttpHost(&quot;192.168.43.128&quot;, 9200,  &quot;http&quot;),</span></span><br><span class="line"><span class="comment">//                ... 可添加多个作为集群</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;192.168.43.128&quot;</span>, <span class="number">9200</span>,  <span class="string">&quot;http&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        restClientBuilder.setFailureListener(<span class="keyword">new</span> <span class="title class_">RestClient</span>.FailureListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;is error...&quot;</span> + node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.restClient = restClientBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        restClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询es状态</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetInfo</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/_cluster/state&quot;</span>);</span><br><span class="line">        request.addParameter(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateDate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&quot;Post&quot;</span>, <span class="string">&quot;/haoke/house&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;2001&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;张江高科&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;price&quot;</span>,<span class="string">&quot;3500&quot;</span>);</span><br><span class="line">        request.setJsonEntity(MAPPER.writeValueAsString(data));</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;/haoke/house/s6Go-XwB6CaVutaqNdyL&quot;</span>);</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryData</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;haoke/house/uqGm-nwB6CaVutaqcNw7&quot;</span>);</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(response.getEntity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rest高级客户端"><a href="#rest高级客户端" class="headerlink" title="rest高级客户端"></a>rest高级客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestEsBaseHighLevel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(RestEsBaseHighLevel.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">MAPPER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">restClientBuilder</span> <span class="operator">=</span> RestClient.builder(</span><br><span class="line"><span class="comment">//                new HttpHost(&quot;192.168.43.128&quot;, 9200,  &quot;http&quot;),</span></span><br><span class="line"><span class="comment">//                ... 可添加多个作为集群</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;192.168.43.128&quot;</span>, <span class="number">9200</span>,  <span class="string">&quot;http&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(restClientBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        restHighLevelClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增 同步操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;2002&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;南京西路 拎包入住 一室一厅&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;price&quot;</span>, <span class="string">&quot;4500&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;haose&quot;</span>).source(data);</span><br><span class="line">        <span class="type">IndexResponse</span> <span class="variable">indexResponse</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span> + indexResponse.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;index:&quot;</span> + indexResponse.getIndex());</span><br><span class="line">        System.out.println(<span class="string">&quot;type:&quot;</span> + indexResponse.getType());</span><br><span class="line">        System.out.println(<span class="string">&quot;version:&quot;</span> + indexResponse.getVersion());</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + indexResponse.getResult());</span><br><span class="line">        System.out.println(<span class="string">&quot;shardInfo:&quot;</span> + indexResponse.getShardInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增，异步操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreateAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;2003&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;南京东路 最新房源 二室一厅&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;price&quot;</span>, <span class="string">&quot;5500&quot;</span>);</span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>).source(data);</span><br><span class="line">        <span class="built_in">this</span>.restHighLevelClient.indexAsync(</span><br><span class="line">            indexRequest,</span><br><span class="line">            RequestOptions.DEFAULT,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ActionListener</span>&lt;IndexResponse&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(IndexResponse indexResponse)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;id:&quot;</span> + indexResponse.getId());</span><br><span class="line">                    System.out.println(<span class="string">&quot;index:&quot;</span> + indexResponse.getIndex());</span><br><span class="line">                    System.out.println(<span class="string">&quot;type:&quot;</span> + indexResponse.getType());</span><br><span class="line">                    System.out.println(<span class="string">&quot;version:&quot;</span> + indexResponse.getVersion());</span><br><span class="line">                    System.out.println(<span class="string">&quot;result:&quot;</span> + indexResponse.getResult());</span><br><span class="line">                    System.out.println(<span class="string">&quot;shardInfo:&quot;</span> + indexResponse.getShardInfo());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">                    System.out.println(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>, <span class="string">&quot;vaHB-nwB6CaVutaq-tzA&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定返回字段</span></span><br><span class="line">        String[] includes = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;title&quot;</span>, <span class="string">&quot;id&quot;</span>&#125;;</span><br><span class="line">        String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">        <span class="type">FetchSourceContext</span> <span class="variable">fetchSourceContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FetchSourceContext</span>(<span class="literal">true</span>, includes, excludes);</span><br><span class="line">        getRequest.fetchSourceContext(fetchSourceContext);</span><br><span class="line">        <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;data: &quot;</span> + response.getSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        RestEsUtils.init(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;192.168.43.128&quot;</span>, <span class="number">9200</span>,  <span class="string">&quot;http&quot;</span>));</span><br><span class="line">        String[] includes = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;title&quot;</span>, <span class="string">&quot;id&quot;</span>&#125;;</span><br><span class="line">        Map&lt;String, Object&gt; query = RestEsUtils.query(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>, <span class="string">&quot;vaHB-nwB6CaVutaq-tzA&quot;</span>, includes);</span><br><span class="line">        System.out.println(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExiste</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">GetRequest</span> <span class="variable">getRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;haose&quot;</span>,<span class="string">&quot;vaHB-nwB6CaVutaq-tzA&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;exist:&quot;</span> + exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">deleteRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>, <span class="string">&quot;vaHB-nwB6CaVutaq-tzA&quot;</span>);</span><br><span class="line">        <span class="type">DeleteResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">updateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>, <span class="string">&quot;uqGm-nwB6CaVutaqcNw7&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;张江高科2&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;price&quot;</span>, <span class="string">&quot;5000&quot;</span>);</span><br><span class="line">        updateRequest.doc(data);</span><br><span class="line">        <span class="type">UpdateResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;version:&quot;</span> + response.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试搜索</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;haoke&quot;</span>);</span><br><span class="line">        searchRequest.types(<span class="string">&quot;house&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;拎包入住&quot;</span>));</span><br><span class="line">        sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">        sourceBuilder.size(<span class="number">5</span>);</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> <span class="title class_">TimeValue</span>(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> <span class="built_in">this</span>.restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;search data count：&quot;</span> + search.getHits().totalHits);</span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Kibana：数据查看"><a href="#2、Kibana：数据查看" class="headerlink" title="2、Kibana：数据查看"></a>2、Kibana：数据查看</h2><p><strong>部署安装</strong></p><ul><li>下载安装包(官网)：<a href="https://www.elastic.co/cn/products/kibana">https://www.elastic.co/cn/products/kibana</a></li><li>上传安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压安装包</span></span><br><span class="line">tar -xvf kibana-6.5.4-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件</span></span><br><span class="line">vim config/kibana.yml</span><br><span class="line">server.host: &quot;ip&quot; #对外暴露服务的地址</span><br><span class="line">elasticsearch.url: &quot;http://es ip地址:9200&quot; #配置Elasticsearch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line">./bin/kibana</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过浏览器进行访问</span></span><br><span class="line">http://192.168.40.133:5601/app/kibana</span><br></pre></td></tr></table></figure><h2 id="3、Filebeat：轻量日志采集器"><a href="#3、Filebeat：轻量日志采集器" class="headerlink" title="3、Filebeat：轻量日志采集器"></a>3、Filebeat：轻量日志采集器</h2><p><strong>部署安装</strong></p><ul><li><p>下载：<a href="https://www.elastic.co/downloads/beats">https://www.elastic.co/downloads/beats</a></p></li><li><p>上传并解压</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ./beats</span><br><span class="line">tar -xvf filebeat-6.5.4-linux-x86_64.tar.gz</span><br><span class="line">cd filebeat-6.5.4-linux-x86_64  # 进入安装目录，</span><br></pre></td></tr></table></figure><ul><li>添加配置：【…安装目录下/test.yml】</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定输入</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-<span class="built_in">type</span>: stdin <span class="comment">#当前控制台输入</span></span></span><br><span class="line">- type: log  # 读取日志文件输入</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /home/elsearch/beats/*.log # 日志路径</span><br><span class="line">  tags: [&quot;haoke-im&quot;] # 添加自定义tag，便于后续处理</span><br><span class="line">  fields: #添加自定义子段</span><br><span class="line">    from: haoke-im</span><br><span class="line">  fields_under_root: true #true为添加到根节点，false为添加到字节点 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定索引分片</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3 #指定索引分片数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到控制台</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">output.consol:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> pretty: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">enable</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到es</span></span><br><span class="line">output.elasticsearch: #指定es配置</span><br><span class="line">  hosts: [&quot;192.168.43.128:9200&quot;]</span><br></pre></td></tr></table></figure><ul><li>启动并输入</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动filebeat 当前目录：【...安装目录下/】</span></span><br><span class="line">./filebeat -e -c test.yml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./filebeat -e -c test.yml -d <span class="string">&quot;publish&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数说明</span></span><br><span class="line">-e: 输出到标准输出，默认输出到syslog和logs下</span><br><span class="line">-c: 指定配置文件</span><br><span class="line">-d: 输出debug信息</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据配置输入路径：如上/home/elsearch/beats/*.<span class="built_in">log</span>   添加a.log并输入数据保存退出</span></span><br></pre></td></tr></table></figure><ul><li>查看es数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;filebeat-6.5.4-2021.11.08&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WXT4_3wBfzb1yMzuFiLV&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-11-08T14:33:39.569Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost.localdomain&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/elsearch/beats/a.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;haoke-im&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;beat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.5.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost.localdomain&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost.localdomain&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;haoke-im&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prospector&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="读取nginx日志"><a href="#读取nginx日志" class="headerlink" title="读取nginx日志"></a>读取nginx日志</h3><ul><li>下载nginx：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></li><li>上传解压</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir nginx</span><br><span class="line">tar -xvf nginx-1.11.6.tar.gz</span><br><span class="line">yum -y install pcre-devel zlib-devel</span><br><span class="line">./configure</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line">cd 【...安装目录/sbin/】</span><br><span class="line">./nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过浏览器访问页面并且查看日志</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问地址：http://服务器地址/</span></span><br><span class="line">tail -f 【...安装目录/logs/access.log】</span><br></pre></td></tr></table></figure><ul><li>添加配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定输入</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-<span class="built_in">type</span>: stdin</span></span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /usr/local/nginx/logs/*.log</span><br><span class="line">  tags: [&quot;nginx&quot;] # 添加自定义tag，便于后续处理</span><br><span class="line">  fields: #添加自定义子段</span><br><span class="line">    from: nginx-log</span><br><span class="line">  fields_under_root: true #true为添加到根节点，false为添加到字节点 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定索引分片</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3 #指定索引分片数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到控制台</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">output.consol:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> pretty: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">enable</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到es</span></span><br><span class="line">output.elasticsearch: #指定es配置</span><br><span class="line">  hosts: [&quot;192.168.43.128:9200&quot;]</span><br></pre></td></tr></table></figure><ul><li>启动后，访问nginx，可以在Elasticsearch中看到索引以及查看数据</li></ul><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>日志数据的读取以及处理都是自己手动配置的，其实，在Filebeat中，有大量的Module，可以简化我 们的配置，直接就可以使用，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">目录：【...安装目录/】</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">命令</span></span><br><span class="line">./filebeat modules list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">内容</span></span><br><span class="line">Enabled:</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">apache2</span><br><span class="line">auditd</span><br><span class="line">elasticsearch</span><br><span class="line">haproxy</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">mongodb</span><br><span class="line">mysql</span><br><span class="line">nginx</span><br><span class="line">osquery</span><br><span class="line">postgresql</span><br><span class="line">redis</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">traefik</span><br></pre></td></tr></table></figure><h4 id="nginx-model使用"><a href="#nginx-model使用" class="headerlink" title="nginx-model使用"></a>nginx-model使用</h4><ul><li>开启或关闭module。如：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./filebeat modules enable nginx #启动</span><br><span class="line">./filebeat modules disable nginx #禁用</span><br></pre></td></tr></table></figure><ul><li>查看修改nginxmodel配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入modle目录</span></span><br><span class="line">cd modules.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改nginx.yml</span></span><br><span class="line">- module: nginx</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Access logs</span></span><br><span class="line">  access:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/access.log*&quot;]</span><br><span class="line">    # Set custom paths for the log files. If left empty,</span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    #var.paths:</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Error logs</span></span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/error.log*&quot;]</span><br><span class="line">    # Set custom paths for the log files. If left empty,</span><br><span class="line">    # Filebeat will choose the paths depending on your OS.</span><br><span class="line">    #var.paths:</span><br></pre></td></tr></table></figure><ul><li>修改或添加filebeat启动配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx-conf-module.yml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定索引分片</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3 #指定索引分片数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到es</span></span><br><span class="line">output.elasticsearch: #指定es配置</span><br><span class="line">  hosts: [&quot;192.168.43.128:9200&quot;]</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启models</span></span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: false</span><br></pre></td></tr></table></figure><ul><li>启动filebeat</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -c -e nginx-conf-module.yml </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报错</span></span><br><span class="line">2021-11-13T16:23:09.788+0800ERRORfileset/factory.go:142Error loading pipeline: Error loading pipeline for fileset nginx/access: This module requires the following Elasticsearch plugins: ingest-user-agent, ingest-geoip. You can install them by running the following commands on all the Elasticsearch nodes:</span><br><span class="line">    sudo bin/elasticsearch-plugin install ingest-user-agent</span><br><span class="line">    sudo bin/elasticsearch-plugin install ingest-geoip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解决：需要在Elasticsearch中安装ingest-user-agent、ingest-geoip插件。根据命令或离线安装</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">离线安装：需要ingest-user-agent.tar、ingest-geoip.tar、ingest-geoip-conf.tar 3个文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ingest-user-agent.tar、ingest-geoip.tar解压到plugins下</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ingest-geoip-conf.tar解压到config下</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启es</span></span><br></pre></td></tr></table></figure><ul><li>刷新nginx，查看es数据</li></ul><h2 id="4、Logstash：数据处理"><a href="#4、Logstash：数据处理" class="headerlink" title="4、Logstash：数据处理"></a>4、Logstash：数据处理</h2><p><strong>部署安装</strong></p><ul><li><p>下载：<a href="https://www.elastic.co/cn/downloads/logstash">https://www.elastic.co/cn/downloads/logstash</a></p></li><li><p>上传安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查jdk环境，要求jdk1.8+</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压安装包</span></span><br><span class="line">tar -xvf logstash-6.5.4.tar.gz</span><br></pre></td></tr></table></figure><h3 id="读取自定义日志"><a href="#读取自定义日志" class="headerlink" title="读取自定义日志"></a><strong>读取自定义日志</strong></h3><ul><li>添加配置文件：【test-pipeline.conf 】</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入</span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123; </span><br><span class="line">    path =&gt; &quot;/home/elsearch/logstash/logs/app.log&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">过滤</span></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line">./bin/logstash -f ./itcast-pipeline.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">写日志到文件</span></span><br><span class="line">cd /home/elsearch/logstash/logs</span><br><span class="line">echo &quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id=1002&quot; &gt;&gt; app.log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出的结果</span></span><br><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; =&gt; [</span><br><span class="line">        [0] &quot;2019-03-15 21:21:21&quot;,</span><br><span class="line">        [1] &quot;ERROR&quot;,</span><br><span class="line">        [2] &quot;读取数据出错&quot;,</span><br><span class="line">        [3] &quot;参数：id=1002&quot;</span><br><span class="line">    ],</span><br><span class="line">          &quot;host&quot; =&gt; &quot;hadoop01&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2021-11-14T06:26:14.291Z,</span><br><span class="line">          &quot;path&quot; =&gt; &quot;/home/elsearch/logstash/logs/app.log&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析数据写出到es"><a href="#解析数据写出到es" class="headerlink" title="解析数据写出到es"></a>解析数据写出到es</h3><ul><li>添加配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入</span></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123; </span><br><span class="line">    path =&gt; &quot;/home/elsearch/logstash/logs/app.log&quot;</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">过滤</span></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">output &#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> stdout &#123;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   codec =&gt; rubydebug</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> &#125;</span></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.43.128:9200&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>写日志到文件测试输出</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/elsearch/logstash/logs</span><br><span class="line">echo &quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id=1002&quot; &gt;&gt; app.log</span><br></pre></td></tr></table></figure><h2 id="5、整合elk收集日志"><a href="#5、整合elk收集日志" class="headerlink" title="5、整合elk收集日志"></a>5、整合elk收集日志</h2><p>Elasticsearch + Logstash + Beats + Kibana整合。</p><h3 id="5-1、准备项目：test-elk"><a href="#5-1、准备项目：test-elk" class="headerlink" title="5-1、准备项目：test-elk"></a><strong>5-1、准备项目：test-elk</strong></h3><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>log日志文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,A1,A2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%p] %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%c] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.appender.A2</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.A2.File</span> = <span class="string">/home/elsearch/logstash/logs/app.log</span></span><br><span class="line"><span class="attr">log4j.appender.A2.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.A2.Threshold</span> = <span class="string">INFO</span></span><br><span class="line"><span class="attr">log4j.appender.A2.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.A2.layout.ConversionPattern</span> =<span class="string">[%p] %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%c] - %m%n</span></span><br></pre></td></tr></table></figure><ul><li>springboot项目模拟操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.dashboard;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.RandomUtils;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(Main.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] VISIT = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;浏览页面&quot;</span>, <span class="string">&quot;评论商品&quot;</span>, <span class="string">&quot;加入收藏&quot;</span>, <span class="string">&quot;加入购物车&quot;</span>, <span class="string">&quot;提交订单&quot;</span>, <span class="string">&quot;使用优惠券&quot;</span>, <span class="string">&quot;领取优惠券&quot;</span>, <span class="string">&quot;搜索&quot;</span>, <span class="string">&quot;查看订单&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">sleep</span> <span class="operator">=</span> RandomUtils.nextLong(<span class="number">200</span>, <span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">            Thread.sleep(sleep);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">maxUserId</span> <span class="operator">=</span> <span class="number">9999L</span>;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> RandomUtils.nextLong(<span class="number">1</span>, maxUserId);</span><br><span class="line">            <span class="type">String</span> <span class="variable">visit</span> <span class="operator">=</span> VISIT[RandomUtils.nextInt(<span class="number">0</span>, VISIT.length)];</span><br><span class="line">            <span class="type">DateTime</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxHour</span> <span class="operator">=</span> now.getHourOfDay();</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxMillis</span> <span class="operator">=</span> now.getMinuteOfHour();</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxSeconds</span> <span class="operator">=</span> now.getSecondOfMinute();</span><br><span class="line">            <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.plusHours(-(RandomUtils.nextInt(<span class="number">0</span>, maxHour)))</span><br><span class="line">                    .plusMinutes(-(RandomUtils.nextInt(<span class="number">0</span>, maxMillis)))</span><br><span class="line">                    .plusSeconds(-(RandomUtils.nextInt(<span class="number">0</span>, maxSeconds)))</span><br><span class="line">                    .toString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;DAU|&quot;</span> + userId + <span class="string">&quot;|&quot;</span> + visit + <span class="string">&quot;|&quot;</span> + date;</span><br><span class="line">            LOGGER.info(result);</span><br><span class="line">            Thread.sleep(<span class="number">1</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打jar包上传linux运行（由于用filebeat作为日志收集，需要把项目部署在filebeat同一机器）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行之后，就可以将日志写入到app.log文件中</span></span><br><span class="line">java -jar test-elk-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h3 id="5-2、启动es"><a href="#5-2、启动es" class="headerlink" title="5-2、启动es"></a><strong>5-2、启动es</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入es安装目录启动es</span></span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><h3 id="5-3、配置logstash并启动"><a href="#5-3、配置logstash并启动" class="headerlink" title="5-3、配置logstash并启动"></a><strong>5-3、配置logstash并启动</strong></h3><ul><li>logstatsh进行数据处理发送到es。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=====logstatsh安装目录下添加配置文件：【test-elk.conf】</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入</span></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; &quot;5044&quot;</span><br><span class="line">    codec =&gt; json</span><br><span class="line">    client_inactivity_timeout =&gt; 36000</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    split =&gt; &#123;&quot;message&quot;=&gt;&quot;|&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">      &quot;userId&quot; =&gt; &quot;%&#123;message[1]&#125;&quot;</span><br><span class="line">      &quot;visit&quot; =&gt; &quot;%&#123;message[2]&#125;&quot;</span><br><span class="line">      &quot;date&quot; =&gt; &quot;%&#123;message[3]&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    convert =&gt; &#123;</span><br><span class="line">      &quot;userId&quot; =&gt; &quot;integer&quot;</span><br><span class="line">      &quot;visit&quot; =&gt; &quot;string&quot;</span><br><span class="line">      &quot;date&quot; =&gt; &quot;string&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出</span></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.43.128:9200&quot;]</span><br><span class="line">    codec =&gt; &quot;json&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># =====启动</span></span></span><br><span class="line">./bin/logstash -f test-elk.conf</span><br></pre></td></tr></table></figure><h3 id="5-3、配置filebeat并启动"><a href="#5-3、配置filebeat并启动" class="headerlink" title="5-3、配置filebeat并启动"></a><strong>5-3、配置filebeat并启动</strong></h3><ul><li>使用filebeat作为日志收集发送到logstash。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># =====filebeat安装目录下添加配置文件：【test-elk.yml】</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配在输入</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - /home/elsearch/logstash/logs/*.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置分片数</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3 #指定索引分片数</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出到logstash</span></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;192.168.43.129:5044&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># =====启动</span></span></span><br><span class="line">./filebeat -e -c test-elk.yml</span><br></pre></td></tr></table></figure><h3 id="5-5、查看es中数据"><a href="#5-5、查看es中数据" class="headerlink" title="5-5、查看es中数据"></a><strong>5-5、查看es中数据</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入kibanan安装目录启动kibanan   数据没有写入es时可以删除es中的索引重试。</span></span><br><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure><ul><li>创建index</li></ul><p><img src="../img/image-20211114220720781.png" alt="image-20211114220720781"></p><ul><li>查看数据</li></ul><p><img src="../img/image-20211114220849172.png" alt="image-20211114220849172"></p><ul><li>获取通过elasticsearch-head插件查看也可以</li></ul><p><img src="../img/image-20211114221903732.png" alt="image-20211114221903732"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【freemarker】简单使用</title>
      <link href="/aiyblog/2021/08/26/%E3%80%90freemarker%E3%80%91%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/aiyblog/2021/08/26/%E3%80%90freemarker%E3%80%91%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="freemarker简单使用"><a href="#freemarker简单使用" class="headerlink" title="freemarker简单使用"></a>freemarker简单使用</h2><ul><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- feermarker --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;dd.MM.yyyy HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">//生日</span></span><br><span class="line">    <span class="keyword">private</span> Float money;<span class="comment">//钱包</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; friends;<span class="comment">//朋友列表</span></span><br><span class="line">    <span class="keyword">private</span> Student bestFriend;<span class="comment">//最好的朋友</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建模板【ftl1.ftl】 </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf‐8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello $&#123;name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1-对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &lt;#--</span><br><span class="line">        // 1-放置对象</span><br><span class="line">        Student stu1 = new Student();</span><br><span class="line">        stu1.setName(&quot;xiaoai&quot;);</span><br><span class="line">        stu1.setAge(21);</span><br><span class="line">        stu1.setMoney(1000.86f);</span><br><span class="line">        stu1.setBirthday(new Date());</span><br><span class="line">        map.put(&quot;stu1&quot;,stu1);//向数据模型放数据</span><br><span class="line">    --&gt;</span><br><span class="line">    -----stu1-----<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    name：$&#123;stu1.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    age:$&#123;stu1.age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    money:$&#123;stu1.money&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    birthday:$&#123;stu1.birthday?string(&quot;yyyy年MM月dd日 HH:mm:ss&quot;)&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2-列表遍历  + if判断<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &lt;#--</span><br><span class="line">    --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px solid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>最好的朋友<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>朋友个数<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>朋友列表<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &lt;#if stuList??&gt; &lt;#--如果stuList存在--&gt;</span><br><span class="line">            &lt;#list stuList as stu&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span></span></span><br><span class="line"><span class="tag">                       &lt;#<span class="attr">if</span> <span class="attr">stu.name</span> ==<span class="string">&#x27;xiaoai&#x27;</span>&gt;</span></span><br><span class="line">                            style=&quot;background:red;&quot;</span><br><span class="line">                       &lt;/#if&gt;</span><br><span class="line">                    &gt;</span><br><span class="line">                        $&#123;stu.name!&#x27;&#x27;&#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;(stu.birthday?date)!&#x27;&#x27;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;(stu.bestFriend.name)!&#x27;&#x27;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;(stu.friends?size)!0&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        &lt;#if stu.friends??&gt;</span><br><span class="line">                            &lt;#list stu.friends as firend&gt;</span><br><span class="line">                                $&#123;firend.name!&#x27;&#x27;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                            &lt;/#list&gt;</span><br><span class="line">                        &lt;/#if&gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &lt;/#list&gt;</span><br><span class="line">        &lt;/#if&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3-list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &lt;#--</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px solid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &lt;#list stuList as stu&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &lt;/#list&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>4-map<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &lt;#--</span><br><span class="line">    --&gt;</span><br><span class="line">    输出学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    -----stu1-----<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    name：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    age:$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    -----stu2-----<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    name:$&#123;stuMap.stu2.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    age:$&#123;stuMap.stu2.age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    遍历学生：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px solid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &lt;#list stuMap?keys as key&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;key_index +1 &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[key].name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[key].age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[key].money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &lt;/#list&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指令1：if<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &lt;#--</span><br><span class="line"></span><br><span class="line">    --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>内建函数：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    1-集合大小：$&#123;stuList?size&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&lt;#--    2-函数引用：$&#123;stu1?toString&#125;--&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>end...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/freemarker&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreemarkerController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    RestTemplate restTemplate;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/ftl1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">freemarker</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1-放置对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu1.setName(<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line">        stu1.setAge(<span class="number">21</span>);</span><br><span class="line">        stu1.setMoney(<span class="number">1000.86f</span>);</span><br><span class="line">        stu1.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        map.put(<span class="string">&quot;stu1&quot;</span>,stu1);<span class="comment">//向数据模型放数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2-列表</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu2.setName(<span class="string">&quot;xiaoai2&quot;</span>);</span><br><span class="line">        stu2.setAge(<span class="number">25</span>);</span><br><span class="line">        stu2.setMoney(<span class="number">4000.86f</span>);</span><br><span class="line">        stu2.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 朋友列表</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu3.setName(<span class="string">&quot;xiaoai3&quot;</span>);</span><br><span class="line">        stu3.setAge(<span class="number">23</span>);</span><br><span class="line">        stu3.setMoney(<span class="number">43300.86f</span>);</span><br><span class="line">        stu3.setBirthday(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;Student&gt; friends = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        friends.add(stu1);</span><br><span class="line">        friends.add(stu3);</span><br><span class="line">        stu2.setFriends(friends);</span><br><span class="line">        stu2.setBestFriend(stu1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3-list</span></span><br><span class="line">        List&lt;Student&gt; stuList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        stuList.add(stu1);</span><br><span class="line">        stuList.add(stu2);</span><br><span class="line">        map.put(<span class="string">&quot;stuList&quot;</span>,stuList); <span class="comment">//向数据模型放数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//map</span></span><br><span class="line">        HashMap&lt;String,Student&gt; stuMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        stuMap.put(<span class="string">&quot;stu1&quot;</span>,stu1);</span><br><span class="line">        stuMap.put(<span class="string">&quot;stu2&quot;</span>,stu2);</span><br><span class="line">        map.put(<span class="string">&quot;stuMap&quot;</span>,stuMap);<span class="comment">//向数据模型放数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回模板文件名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ftl1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态化"><a href="#静态化" class="headerlink" title="静态化"></a>静态化</h3><p><strong>一、简单模板静态化</strong></p><ul><li>创建模板【test.ftl】</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cityId&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>cityId<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>cityName<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cky2&quot;</span><span class="punctuation">:</span>  $<span class="punctuation">&#123;</span>cky2<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;countryId&quot;</span><span class="punctuation">:</span> $<span class="punctuation">&#123;</span>contryId<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>创建工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMarkerUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDate</span><span class="params">(String filepath, Map&lt;Object,Object&gt; mode)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, TemplateException &#123;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.getVersion());</span><br><span class="line">        <span class="comment">// 设置模板加载机制：</span></span><br><span class="line">        <span class="comment">// 1、类加载机制加载模板</span></span><br><span class="line">        cfg.setClassForTemplateLoading(FreeMarkerUtils.class,<span class="string">&quot;/freemarker&quot;</span>);</span><br><span class="line">        <span class="comment">// 2-1、目录路径加载模板</span></span><br><span class="line"><span class="comment">//        cfg.setDirectoryForTemplateLoading(new File(&quot;/freemarker&quot;));</span></span><br><span class="line">        <span class="comment">// 2-2、目录路径加载模板</span></span><br><span class="line"><span class="comment">//        String classpath = FreeMarkerUtils.class.getResource(&quot;/&quot;).getPath();</span></span><br><span class="line"><span class="comment">//        cfg.setDirectoryForTemplateLoading(new File(classpath +&quot;/freemarker&quot;));</span></span><br><span class="line">        <span class="comment">// 设置字符集</span></span><br><span class="line">        cfg.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载模板</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(filepath);</span><br><span class="line">        <span class="comment">// 静态化内容：</span></span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        template.process(mode,writer);</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        <span class="keyword">return</span> writer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFreeMarkerToJson</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;testFm.ftl&quot;</span>;</span><br><span class="line">    Map&lt;Object, Object&gt; mode = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    mode.put(<span class="string">&quot;cityId&quot;</span>,<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">    mode.put(<span class="string">&quot;cityName&quot;</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    mode.put(<span class="string">&quot;cky2&quot;</span>,<span class="string">&quot;800&quot;</span>);</span><br><span class="line">    mode.put(<span class="string">&quot;contryId&quot;</span>,<span class="string">&quot;000001&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> FreeMarkerUtils.getDate(filePath, mode);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TemplateException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、一次性收集模板(xml)</strong></p><ul><li>创建xml解析类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement(name = &quot;mappingItem&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MappingItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String solutionName;</span><br><span class="line">    <span class="keyword">private</span> String templateName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlAttribute(name = &quot;solutionName&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSolutionName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> solutionName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSolutionName</span><span class="params">(String solutionName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.solutionName = solutionName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlAttribute(name = &quot;templationName&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTemplateName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> templateName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTemplateName</span><span class="params">(String templateName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.templateName = templateName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@XmlRootElement(name = &quot;templateMapping&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateMapping</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;MappingItem&gt; mappingItemList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XmlElement(name = &quot;mappingItem&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;MappingItem&gt; <span class="title function_">getMappingItemList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mappingItemList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMappingItemList</span><span class="params">(List&lt;MappingItem&gt; mappingItemList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mappingItemList = mappingItemList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMarkerUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(FreeMarkerUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.VERSION_2_3_28);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cfg.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);</span><br><span class="line">            cfg.setClassForTemplateLoading(FreeMarkerUtils.class,<span class="string">&quot;/freemarker_template&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;FreeMaerkerUtils error.&quot;</span> + ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FreeMarkerUtils</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">processData</span><span class="params">(Map&lt;String,Object&gt; model, String templateName)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">StringWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>())&#123;</span><br><span class="line">            <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> LocaleContextHolder.getLocale();</span><br><span class="line">            <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> cfg.getTemplate(templateName, locale);</span><br><span class="line">            template.process(model, out);</span><br><span class="line">            result = out.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | TemplateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 1、通过xml配置文件获取模板</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">getTemplateConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; templateConfig = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> FreeMarkerUtils.class.getResourceAsStream(</span><br><span class="line">                <span class="string">&quot;/freemarker_template/freemarker_template_mapping.xml&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 读取jar包内置文件</span></span><br><span class="line">            <span class="type">JAXBContext</span> <span class="variable">context</span> <span class="operator">=</span> JAXBContext.newInstance(TemplateMapping.class);</span><br><span class="line">            <span class="type">Unmarshaller</span> <span class="variable">unmarshaller</span> <span class="operator">=</span> context.createUnmarshaller();</span><br><span class="line"></span><br><span class="line">            <span class="type">XMLInputFactory</span> <span class="variable">xif</span> <span class="operator">=</span> XMLInputFactory.newFactory();</span><br><span class="line">            xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES,<span class="literal">false</span>);</span><br><span class="line">            xif.setProperty(XMLInputFactory.SUPPORT_DTD, <span class="literal">false</span>);</span><br><span class="line">            <span class="type">XMLStreamReader</span> <span class="variable">xsr</span> <span class="operator">=</span> xif.createXMLStreamReader(inputStream);</span><br><span class="line"></span><br><span class="line">            <span class="type">TemplateMapping</span> <span class="variable">templateMapping</span> <span class="operator">=</span> (TemplateMapping) unmarshaller.unmarshal(xsr);</span><br><span class="line"></span><br><span class="line">            List&lt;MappingItem&gt; mappingItemList = templateMapping.getMappingItemList();</span><br><span class="line">            <span class="keyword">for</span> (MappingItem mappingItem : mappingItemList) &#123;</span><br><span class="line">                templateConfig.put(mappingItem.getSolutionName(), mappingItem.getTemplateName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            LOGGER.error(ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> templateConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、通过路径获取模板</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; templateFiles = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;template.base-template-path:/freemarker_template&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String baceTemplatePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;template.base-template-path:.ftl&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String templateSuffix;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initTemplateFile</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">resource</span> <span class="operator">=</span> FreeMarkerUtils.class.getResource(baceTemplatePath);</span><br><span class="line">            <span class="type">String</span> <span class="variable">rootPath</span> <span class="operator">=</span> resource.getPath();</span><br><span class="line">            <span class="type">File</span> <span class="variable">rootFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(rootPath);</span><br><span class="line">            File[] listFiles = rootFile.listFiles();</span><br><span class="line">            Objects.requireNonNull(listFiles, String.format(Locale.ROOT, <span class="string">&quot;[%s] no template file.&quot;</span>, baceTemplatePath));</span><br><span class="line">            <span class="keyword">for</span> (File file : listFiles) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Objects.isNull(file) &amp;&amp; file.isFile() &amp;&amp; file.getName().endsWith(templateSuffix))&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> file.getPath();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">                    templateFiles.put(</span><br><span class="line">                            fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>)), filePath.substring(rootPath.length())</span><br><span class="line">                    );</span><br><span class="line">                    LOGGER.info(<span class="string">&quot;get template path:&quot;</span> + filePath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception)&#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;initTemplateFile faild.&quot;</span>, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getTemplateFiles</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> templateFiles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建目录及定义模板</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 【/freemarker_template/freemarker_template_mapping.xml】</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">templateMapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappingItem</span> <span class="attr">solutionName</span>=<span class="string">&quot;test1&quot;</span> <span class="attr">templationName</span>=<span class="string">&quot;test1.ftl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mappingItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappingItem</span> <span class="attr">solutionName</span>=<span class="string">&quot;test2&quot;</span> <span class="attr">templationName</span>=<span class="string">&quot;test2.ftl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mappingItem</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappingItem</span> <span class="attr">solutionName</span>=<span class="string">&quot;test3&quot;</span> <span class="attr">templationName</span>=<span class="string">&quot;test3.ftl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mappingItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">templateMapping</span>&gt;</span></span><br><span class="line">name: $&#123;name&#125;</span><br></pre></td></tr></table></figure><ul><li>创建测试接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/testTemplate&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">freemarker</span><span class="params">(Map&lt;String, Object&gt; map, String name)</span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; templateConfig = FreeMarkerUtils.getTemplateConfig();</span><br><span class="line">    Map&lt;String, Object&gt; mode = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    mode.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">templateName</span> <span class="operator">=</span> templateConfig.get(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> FreeMarkerUtils.processData(mode, templateName);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式体验</title>
      <link href="/aiyblog/2021/06/26/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BD%93%E9%AA%8C/"/>
      <url>/aiyblog/2021/06/26/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="springcloud"><a href="#springcloud" class="headerlink" title="springcloud"></a>springcloud</h2><p>springCloud是分布式微服务整体解决方案。<br>Spring Cloud 为开发者提供了在分布式系统(配置管理，[服务发现，熔断，路由，微代理，控制总线，一次性token，全局琐，leader选举，分布式session，集群状态）中快速构建的工具，使用Spring Cloud的开发者可以快速的启动服务或构建应用、同时能够快速和云平台资源进行对接。</p><p>SpringCloud分布式开发五大常用组件：</p><ul><li>服务发现——Netflix Eureka</li><li>客服端负载均衡——Netflix Ribbon</li><li>断路器——Netflix Hystrix</li><li>服务网关——Netflix Zuul</li><li>分布式配置——Spring Cloud Config</li></ul><p><strong>springCloud体验</strong><br>eureka 服务发现与注册<br>RestTemplate 发送http请求</p><h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><h3 id="dubbo-zookeep体验"><a href="#dubbo-zookeep体验" class="headerlink" title="dubbo+zookeep体验"></a><strong>dubbo+zookeep体验</strong></h3><p>dubbo是一个远程调用服务的分布式框架，可以实现远程通讯、动态配置、地址路由等等功能。它可以通过集成注册中心，来动态地治理服务发布和服务调用。相当于把服务注册和发布推送的功能分摊给了(zookeeper)注册中心<br>Dubbo实现服务调用是通过RPC的方式，即客户端和服务端共用一个接口(将接口打成一个jar包，在客户端和服务端引入这个jar包)，客户端面向接口写调用，服务端面向接口写实现，中间的网络通信交给框架去实现<br>Zookeeper 是 Apacahe Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心。【<a href="https://www.cnblogs.com/iisme/p/10620125.html">参考</a>】</p><ul><li><p>安装zookeep<br>可以通过docker容器快速安装</p></li><li><p>引入需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入dubbo--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入zookeeper客户端工具--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.101tec/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>服务提供端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">----服务接口</span><br><span class="line"><span class="keyword">package</span> com.xiaoai.ticket.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TicketService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----服务接口实现</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service  <span class="comment">// 该注解即把服务发布出去</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TicketService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《厉害了，我的国》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----配置文件</span><br><span class="line">dubbo:</span><br><span class="line">  application:</span><br><span class="line">    name: provider-ticket</span><br><span class="line">  registry:</span><br><span class="line">    address: zookeeper:<span class="comment">//192.168.121.128:2181</span></span><br><span class="line">  scan:</span><br><span class="line">    base-packages: com.xiaoai.ticket.service</span><br></pre></td></tr></table></figure></li><li><p>服务消费端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">----创建一样的接口</span><br><span class="line"><span class="keyword">package</span> com.xiaoai.ticket.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TicketService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----相关服务中调用远程服务</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>  <span class="comment">// 引入相关远程服务</span></span><br><span class="line">    TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ticket</span> <span class="operator">=</span> ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">&quot;拿到票：&quot;</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----配置文件</span><br><span class="line">dubbo:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer-user</span><br><span class="line">  registry:</span><br><span class="line">    address: zookeeper:<span class="comment">//192.168.121.128:2181</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用dubbo注意在启动器中开启dubbo支持：【@EnableDubbo】</p></blockquote></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">----在客户端调用远程服务</span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConsumerUserApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">      userService.hello();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----结果</span><br><span class="line">拿到票：《厉害了，我的国》</span><br></pre></td></tr></table></figure></li></ul><h3 id="dubbo-nacos-zuul体验"><a href="#dubbo-nacos-zuul体验" class="headerlink" title="dubbo+nacos+zuul体验"></a><strong>dubbo+nacos+zuul体验</strong></h3><p><strong>dubbo</strong> 远程调用<br><strong>nacos</strong> 配置中心、服务发现<br><strong>zuul</strong> 网关路由</p><p>例子：应用项目去调用消费服务项目，消费服务项目去调用提供服务项目</p><ul><li>引入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在启动类中添加注解【@EnableDiscoveryClient】开启服务发现<br>服务接口可单独提取作api项目，在实现项目中引入api项目实现相关接口即可，在其他项目需要另一个项目的服务时直接引入api项目即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">----服务接口</span><br><span class="line"><span class="keyword">package</span> com.xiaowei.service2.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProviderService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">service</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----服务接口实现</span><br><span class="line"><span class="keyword">package</span> com.xiaowei.service2.service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@org</span>.apache.dubbo.config.annotation.Service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProviderService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Provider Invoke【提供服务端service2-server】执行...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">----配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;port:56040&#125;</span> <span class="comment">#启动端口 命令行注入</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/service2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment">#</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">62f4e350-bb14-4271-9b4e-6ba2005f3f1c</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">DEFAULT</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 连接配置中心配置对应配置文件，通过配置中心可获取项目相关配置，</span></span><br><span class="line">      <span class="comment"># 该项目暂未有其他配置，只是先配置连接 即可不配置</span></span><br><span class="line"><span class="comment">#      config:</span></span><br><span class="line"><span class="comment">#        server-addr: 127.0.0.1:8848 # 配置中心地址</span></span><br><span class="line"><span class="comment">#        file-extension: yaml # 配置文件后缀 默认是context-path.后缀来查找配置中心的文件</span></span><br><span class="line"><span class="comment">#        namespace: 62f4e350-bb14-4271-9b4e-6ba2005f3f1c # 开发环境</span></span><br><span class="line"><span class="comment">#        group: XIAOAI_MICROSERVICE_GROUP # 业务组，可理解为那个项目</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.xiaowei.service2.service</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;dubbo_port:20891&#125;</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">      <span class="attr">qos-enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">check:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>消费服务端<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----服务接口</span><br><span class="line"><span class="keyword">package</span> com.xiaowei.service1.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConsumerService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">service</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----服务接口实现</span><br><span class="line"><span class="keyword">package</span> com.xiaowei.service1.service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@org</span>.apache.dubbo.config.annotation.Service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ConsumerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.apache.dubbo.config.annotation.Reference</span><br><span class="line">    <span class="keyword">private</span> ProviderService providerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Consumer Invoke【消费服务端service1-server】执行...调用【提供服务端】：\n&quot;</span>+providerService.service();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">----配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;port:56030&#125;</span> <span class="comment">#启动端口 命令行注入</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/service1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment">#</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">62f4e350-bb14-4271-9b4e-6ba2005f3f1c</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">DEFAULT</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 连接配置中心配置对应配置文件，通过配置中心可获取项目相关配置，</span></span><br><span class="line">      <span class="comment"># 该项目暂未有其他配置，只是先配置连接 即可不配置</span></span><br><span class="line"><span class="comment">#      config:</span></span><br><span class="line"><span class="comment">#        server-addr: 127.0.0.1:8848 # 配置中心地址</span></span><br><span class="line"><span class="comment">#        file-extension: yaml # 配置文件后缀 默认是context-path.后缀来查找配置中心的文件</span></span><br><span class="line"><span class="comment">#        namespace: 62f4e350-bb14-4271-9b4e-6ba2005f3f1c # 开发环境</span></span><br><span class="line"><span class="comment">#        group: XIAOAI_MICROSERVICE_GROUP # 业务组，可理解为那个项目</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.xiaowei.service1.service</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;dubbo_port:20881&#125;</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">      <span class="attr">qos-enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">check:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>应用端<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">----应用端</span><br><span class="line"><span class="keyword">package</span> com.xiaowei.application.rest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/application1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.apache.dubbo.config.annotation.Reference</span><br><span class="line">    <span class="keyword">private</span> ConsumerService consumerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/service&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">service</span><span class="params">()</span>&#123;</span><br><span class="line">        String target=consumerService.service();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;application Invoke【应用端application-1】执行...调用【消费服务端】：\n&quot;</span>+target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">----配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;port:56020&#125;</span> <span class="comment">#启动端口 命令行注入</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/application1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">application1</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment">#</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">62f4e350-bb14-4271-9b4e-6ba2005f3f1c</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">DEFAULT</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 连接配置中心配置对应配置文件，通过配置中心可获取项目相关配置，</span></span><br><span class="line">      <span class="comment"># 该项目暂未有其他配置，只是先配置连接 即可不配置</span></span><br><span class="line"><span class="comment">#      config:</span></span><br><span class="line"><span class="comment">#        server-addr: 127.0.0.1:8848 # 配置中心地址</span></span><br><span class="line"><span class="comment">#        file-extension: yaml # 配置文件后缀 默认是context-path.后缀来查找配置中心的文件</span></span><br><span class="line"><span class="comment">#        namespace: 62f4e350-bb14-4271-9b4e-6ba2005f3f1c # 开发环境</span></span><br><span class="line"><span class="comment">#        group: XIAOAI_MICROSERVICE_GROUP # 业务组，可理解为那个项目----配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;port:56020&#125;</span> <span class="comment">#启动端口 命令行注入</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/application1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">application1</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment">#</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">62f4e350-bb14-4271-9b4e-6ba2005f3f1c</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">DEFAULT</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 连接配置中心配置对应配置文件，通过配置中心可获取项目相关配置，</span></span><br><span class="line">      <span class="comment"># 该项目暂未有其他配置，只是先配置连接 即可不配置</span></span><br><span class="line"><span class="comment">#      config:</span></span><br><span class="line"><span class="comment">#        server-addr: 127.0.0.1:8848 # 配置中心地址</span></span><br><span class="line"><span class="comment">#        file-extension: yaml # 配置文件后缀 默认是context-path.后缀来查找配置中心的文件</span></span><br><span class="line"><span class="comment">#        namespace: 62f4e350-bb14-4271-9b4e-6ba2005f3f1c # 开发环境</span></span><br><span class="line"><span class="comment">#        group: XIAOAI_MICROSERVICE_GROUP # 业务组，可理解为那个项目</span></span><br></pre></td></tr></table></figure><blockquote><p>以上即可通过dubbo实现正常服务调用了<br>可以加入网关服务,完成路由转发。网关：将两个使用不同协议的网络段连接bai在一起。可以看成将两个不同项目的服务进行连接。</p></blockquote><ul><li>zuul网关<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">----启动器开启网关代理</span></span><br><span class="line"><span class="string">@SpringBootApplication</span></span><br><span class="line"><span class="string">@EnableDiscoveryClient</span>  <span class="string">//开启服务发现</span></span><br><span class="line"><span class="string">@EnableZuulProxy</span>   <span class="string">//</span> <span class="string">开启网关代理</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">ApiGatewayBootstrap</span> &#123;</span><br><span class="line">    <span class="string">public</span> <span class="string">static</span> <span class="string">void</span> <span class="string">main(String</span>[] <span class="string">args)</span> &#123;</span><br><span class="line">        <span class="string">SpringApplication.run(ApiGatewayBootstrap.class</span>,<span class="string">args);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">----配置文件</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span> <span class="comment">#启动端口 命令行注入</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment">#</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">62f4e350-bb14-4271-9b4e-6ba2005f3f1c</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">DEFAULT</span></span><br><span class="line">     </span><br><span class="line">       <span class="comment"># 由于需要用到配置中心的配置，因此需要配置nacos相关信息</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment">#</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">62f4e350-bb14-4271-9b4e-6ba2005f3f1c</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">XIAOAI_MICROSERVICE_GROUP</span></span><br><span class="line"></span><br><span class="line"><span class="string">----配置中心配置文件：application1.yml</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">        <span class="attr">application1:</span> </span><br><span class="line">            <span class="attr">stripPreFix:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/application1/**</span>  <span class="comment"># 把以application1开头的请求路径都转发到服务名为application1的应用中</span></span><br></pre></td></tr></table></figure></li><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">----访问：http:<span class="comment">//localhost:56020/application1/application1/service</span></span><br><span class="line">application Invoke【应用端application-<span class="number">1</span>】执行...调用【消费服务端】：</span><br><span class="line">Consumer Invoke【消费服务端service1-server】执行...调用【提供服务端】：</span><br><span class="line">Provider Invoke【提供服务端service2-server】执行...</span><br><span class="line"></span><br><span class="line">----访问：http:<span class="comment">//localhost:8000/application1/application1/service</span></span><br><span class="line">application Invoke【应用端application-<span class="number">1</span>】执行...调用【消费服务端】：</span><br><span class="line">Consumer Invoke【消费服务端service1-server】执行...调用【提供服务端】：</span><br><span class="line">Provider Invoke【提供服务端service2-server】执行...</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210110174115590-208063695.png"></li></ul><p><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210110174135137-1473544368.png"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-1-DQL查询</title>
      <link href="/aiyblog/2021/04/24/sql/mysql-1-DQL%E6%9F%A5%E8%AF%A2/"/>
      <url>/aiyblog/2021/04/24/sql/mysql-1-DQL%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>as 或 省略as 空格后加别名</td><td>取别名</td></tr><tr><td>distinct</td><td>去重</td></tr><tr><td>+</td><td>只做数值加，有字符先尝试转换成数值再加，加null都等于null</td></tr><tr><td>in</td><td>子查询</td></tr><tr><td>group by 分组字段</td><td>分组</td></tr><tr><td>order by  排序字段 [asc/desc]</td><td>排序  asc=升序(默认) desc=倒序</td></tr><tr><td>having 条件</td><td>查询后的条件筛选，一般和group by 一起使用</td></tr></tbody></table><blockquote><p>where 后面要跟的是数据表里的字段，而having只是根据前面查询出来的是什么后面就可以接什么。</p></blockquote><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>一般在where后使用：</p><table><thead><tr><th>条件</th><th>运算符</th></tr></thead><tbody><tr><td>条件运算符</td><td>&lt; 、=、 != 、&lt;&gt;【表示不等于】、&gt;= 、&lt;=</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp; 、|| 、! 、and 、or、not</td></tr><tr><td>模糊查询</td><td>like 、between  and、in 、is null或is not null</td></tr><tr><td>安全等于</td><td>&lt;=&gt;  即可判断null值也可以判断普通数值</td></tr></tbody></table><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><p>函数可以嵌套使用，一个函数的结果可以作为另一个函数的参数</p><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><p>字符函数：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>LENGTH(字段)</strong></td><td>字段值字节长度</td></tr><tr><td><strong>CONCAT(xx,xx,xx)</strong></td><td>拼接，用逗号分隔</td></tr><tr><td><strong>ISNULL(判断字段，空时取值)</strong></td><td>判断是否为空</td></tr><tr><td><strong>UPPER(‘xxx’)</strong></td><td>变大写</td></tr><tr><td><strong>LOWER(‘xxx’)</strong></td><td>变小写</td></tr><tr><td><strong>SUBSTR(‘xxx’,索引)</strong></td><td>截取索引及其后面的字符，myslq索引从1开始</td></tr><tr><td><strong>SUBSTR(‘xxx’,索引,索引2)</strong></td><td>截取索引1到索引2的字符</td></tr><tr><td><strong>INSTR(‘xxx’,’子串’)</strong></td><td>返回子串第一次出现的索引</td></tr><tr><td><strong>TRIM(‘xxx’)</strong></td><td>去前后空格</td></tr><tr><td><strong>TRIM(‘指定字符’,’xxx’)</strong></td><td>去前后指定字符</td></tr><tr><td><strong>LPAD(‘xxx’,number,’指定字符’)</strong></td><td>左填充，用指定字符填充字符串到指定长度</td></tr><tr><td><strong>RPAD(‘xxx’,number,’指定字符’)</strong></td><td>右填充，用指定字符填充字符串到指定长度</td></tr><tr><td><strong>REPLACE(‘字符串’,’被替换值’,’替换值’)</strong></td><td>替换</td></tr></tbody></table><p>数学函数：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>ROUDN(number)</strong></td><td>四舍五入</td></tr><tr><td><strong>ROUDN(number,保留精度位数)</strong></td><td>四舍五入</td></tr><tr><td><strong>CEIL(number)</strong></td><td>向上取整</td></tr><tr><td><strong>FLOOR(number)</strong></td><td>向下取整</td></tr><tr><td><strong>TRUNCATE(number,保留位数)</strong></td><td>截断，</td></tr><tr><td><strong>MOD(num1,num2)</strong></td><td>取余</td></tr></tbody></table><p>日期函数：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>NOW()</strong></td><td>返回当前日期+时间</td></tr><tr><td><strong>CURADTE()</strong></td><td>返回当前日期</td></tr><tr><td><strong>CURTIME()</strong></td><td>返回当前时间</td></tr><tr><td><strong>YEAR(日期 或 ‘年-月-日’)</strong></td><td>返回日期中的年份</td></tr><tr><td><strong>MONTH(日期 或 ‘年-月-日’)</strong></td><td>返回日期中的月份</td></tr><tr><td><strong>MONTHNAME(日期 或 ‘年-月-日’)</strong></td><td>返回日期中的月份(英文)</td></tr><tr><td><strong>日、时、秒、分……</strong></td><td></td></tr><tr><td>**str_to_date()**：</td><td>将日期格式的字符转换成指定格式的日期   如：STR_TO_DATE(‘9-13-1999’ , %m-%d-%Y’) 1999-09-13</td></tr><tr><td>**date_format()**：</td><td>将日期转换成字符     如：DATE_FORMAT(‘2018/6/6 ,%Y年%m月%d日’) 2018年06月06日</td></tr></tbody></table><p>其他函数：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>VERSION()</strong></td><td>版本</td></tr><tr><td><strong>DATABASE()</strong></td><td>当前数据库</td></tr><tr><td><strong>USER()</strong></td><td>当前用户</td></tr></tbody></table><p>流程控制函数：<br><strong>IF(‘表达式’,成立返回结果,不成立返回结果)</strong>   判断<br><strong>CASE</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case 要新的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值1或语句1(这里如果是值就不用分号);   </span><br><span class="line">when 常量2 then 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><p>统计使用，又称聚合函数或统计函数或组函数</p><p><strong>sum()</strong> 求和<br><strong>avg()</strong> 平均值<br><strong>max()</strong> 最大值<br><strong>min()</strong> 最小值<br><strong>count()</strong> 统计个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sum、avg不支持字符串类型</span><br><span class="line">以上分组函数都忽略null值</span><br><span class="line">可以和distinct搭配  如：SUM(DISTINCT xxx)</span><br><span class="line">和分组函数一同查询的字段要求是group by 后的字段</span><br><span class="line"></span><br><span class="line">效率：</span><br><span class="line">MYISAM存储引擎下，COUNT(*)的效率高</span><br><span class="line">INNODB存储引擎下，COUNT(* )和COUNT(1)的效率差不多，比COUNT(字段)要高一些</span><br></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p><strong>完全连接</strong> 如：select * from table1，table2；  笛卡尔积</p><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p>按年代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sq192标准：仅仅支持内连接</span><br><span class="line">sq199标准(推荐)：支持内、外(左外和右外)、交叉</span><br></pre></td></tr></table></figure><p>按功能：</p><ul><li><p><strong>内连接：</strong>inner</p><ul><li>等值连接： 多表查询通过某字段相等作为条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 例<span class="number">1</span> </span><br><span class="line">  <span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line">  <span class="keyword">FROM</span> employees e,jobs j</span><br><span class="line">  <span class="keyword">WHERE</span> e.`job_id` <span class="operator">=</span> j.`job_id`;</span><br><span class="line">  </span><br><span class="line">  # 例<span class="number">2</span></span><br><span class="line">  <span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line">  <span class="keyword">FROM</span> employees e</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j <span class="keyword">ON</span> e.`job_id` <span class="operator">=</span> j.`job_id`;</span><br><span class="line">  </span><br><span class="line">  可接多个<span class="keyword">INNER</span> <span class="keyword">JOIN</span> ... <span class="keyword">ON</span></span><br></pre></td></tr></table></figure><ul><li>非等值连接：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 例<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e,jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id` 等号外其余条件判断 j.`job_id`;</span><br></pre></td></tr></table></figure><ul><li>自连接：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#案例:查询员工名和上级的名称</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,e.last_name,m.employee_id,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e, employees m</span><br><span class="line"><span class="keyword">WHERE</span> e.<span class="string">&#x27;manager_id&#x27;</span> <span class="operator">=</span>m.<span class="string">&#x27;employee_id`;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>外连接：</strong>outer</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名 [连接类型] <span class="keyword">join</span> 表<span class="number">2</span> 别名 <span class="keyword">on</span> 连接条件</span><br><span class="line">[<span class="keyword">where</span>筛选条件]</span><br><span class="line"></span><br><span class="line">外连接查询结果<span class="operator">=</span>内连接结果<span class="operator">+</span>主表中有而从表没有的记录 没匹配的显示<span class="keyword">null</span></span><br></pre></td></tr></table></figure><ul><li>左外连接：left [outer]</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">左边是主表 左表全显示</span><br><span class="line"></span><br><span class="line">#　例：</span><br><span class="line"><span class="keyword">SELECT</span> b.name, bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> boys bo</span><br><span class="line"><span class="keyword">ON</span> b.<span class="string">&#x27;boyfriend_id&#x27;</span> <span class="operator">=</span> bo.<span class="string">&#x27;id&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>右外连接：right [outer]</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">右边是主表   右表全显示</span><br><span class="line"></span><br><span class="line">＃　例：和上面左外效果一样</span><br><span class="line"><span class="keyword">SELECT</span> b.name, bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> beauty b</span><br><span class="line"><span class="keyword">ON</span> b.<span class="string">&#x27;boyfriend_id&#x27;</span> <span class="operator">=</span> bo.<span class="string">&#x27;id&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>全外连接：full [outer]</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左表全显示 右表全显示  即：左右表字段全显示，两表重合，该null的位置就null</span><br></pre></td></tr></table></figure></li><li><p><strong>交叉连接：</strong>cross join</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">笛卡尔乘积</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>可记：from后为左表，join后为右边</p></blockquote><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN、NOT IN</td><td>等于列表中的任意一个</td></tr><tr><td>ANY、SOME</td><td>和子查询返回的某一个值比较</td></tr><tr><td>ALL</td><td>和子查询返回的所有值比较</td></tr></tbody></table><ul><li>行子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 例:查询员工编号最小并且工资最高的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span>(empioyee_id,salary) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(employee_id), <span class="built_in">MAX</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>select后子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 例:查询每个都门的员工个数</span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span>,(</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">FROM</span> employees e</span><br><span class="line">    WHEREe.department_id <span class="operator">=</span> d.<span class="string">&#x27;department_id&#x27;</span></span><br><span class="line">）个数</span><br><span class="line"><span class="keyword">FROM</span> departments d;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">select</span>后面子查询只能返回一行一列</span><br></pre></td></tr></table></figure><ul><li>from后子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avgsalary,dep_id</span><br><span class="line">    <span class="keyword">FROM</span> dep</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> dep_id</span><br><span class="line">) avg</span><br><span class="line"><span class="keyword">WHERE</span> avg.avgsalary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><ul><li>exists后子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> EXTSTS(</span><br><span class="line">    <span class="keyword">SELECT</span> employee_id </span><br><span class="line">    <span class="keyword">FRoM</span> employees </span><br><span class="line">    <span class="keyword">WHERE</span> salary<span class="operator">=</span><span class="number">300000</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LIMIT 开始索引,显示条数</span><br><span class="line"></span><br><span class="line">page：第几页</span><br><span class="line">size：每页显示几条</span><br><span class="line">分页公式：(page<span class="number">-1</span>) <span class="operator">*</span> size</span><br></pre></td></tr></table></figure><ul><li>查询关键字及执行先后顺序说明</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">执行顺序 关键字</span><br><span class="line"></span><br><span class="line"><span class="number">7</span><span class="comment">--select 查询列表</span></span><br><span class="line"><span class="number">1</span><span class="comment">--from 表 </span></span><br><span class="line"><span class="number">2</span><span class="comment">--[连接类型] join 表2</span></span><br><span class="line"><span class="number">3</span><span class="comment">--on 连接亲件</span></span><br><span class="line"><span class="number">4</span><span class="comment">--whee 筛选条件</span></span><br><span class="line"><span class="number">5</span><span class="comment">--group by 分组列表</span></span><br><span class="line"><span class="number">6</span><span class="comment">--having 分组的筛选</span></span><br><span class="line"><span class="number">8</span><span class="comment">--order by 排序列表</span></span><br><span class="line"><span class="number">9</span><span class="comment">--1imit 偏移,条自数</span></span><br><span class="line"></span><br><span class="line">每一条字句都会生成一个虚拟表格</span><br></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p><strong>union</strong>  联合，合并，将多条查询语句结果合并成一个结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 例:查询中国用户中男性的信息以及外国用户中男性的用户信息</span><br><span class="line"><span class="keyword">SELECT</span> id,cnam,csex <span class="keyword">FROM</span> t_ca <span class="keyword">WHERE</span> csex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> t_idy tName,tGender <span class="keyword">FROM</span> t_ua <span class="keyword">WHERE</span> tGender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">id cname csex</span><br><span class="line"><span class="number">2</span>  小李   男</span><br><span class="line"><span class="number">1</span>  john  male</span><br><span class="line"><span class="number">3</span>  jack  male</span><br></pre></td></tr></table></figure><blockquote><p>联合查询中多条查询列数需要一致</p><p>多条查询语句查询的每列类型和顺序最好一致</p><p>联合查询默认去重，要显示所有用：union all</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-2-DML、DDL</title>
      <link href="/aiyblog/2021/04/24/sql/mysql-2-DML%E3%80%81DDL/"/>
      <url>/aiyblog/2021/04/24/sql/mysql-2-DML%E3%80%81DDL/</url>
      
        <content type="html"><![CDATA[<h2 id="DML语法"><a href="#DML语法" class="headerlink" title="DML语法"></a>DML语法</h2><h3 id="插入："><a href="#插入：" class="headerlink" title="插入："></a>插入：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>,......) </span><br><span class="line"><span class="keyword">values</span>(值<span class="number">1</span>,......)</span><br><span class="line"></span><br><span class="line">方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> 表名(列名<span class="number">1</span>,......) </span><br><span class="line"><span class="keyword">values</span>(值<span class="number">1</span>,......),</span><br><span class="line"><span class="keyword">values</span>(值<span class="number">1</span>,......),</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">方式<span class="number">3</span>：</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> 表名()(</span><br><span class="line"><span class="keyword">select</span> ....;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">方式<span class="number">4</span>：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 </span><br><span class="line"><span class="keyword">set</span> 列名<span class="operator">=</span>值,</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span> 列名<span class="operator">=</span>值,......</span><br><span class="line">[<span class="keyword">where</span> 筛选条件] </span><br></pre></td></tr></table></figure><ul><li>修改多表的记录语法:</li></ul><p>sql92语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名,表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">set</span> 列<span class="operator">=</span>值,..: ..</span><br><span class="line"><span class="keyword">where</span> 连接条件 <span class="keyword">and</span> 筛选条件;</span><br></pre></td></tr></table></figure><p>sql99语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名</span><br><span class="line">[<span class="keyword">inner</span><span class="operator">/</span><span class="keyword">left</span><span class="operator">/</span><span class="keyword">right</span>] <span class="keyword">join</span> 表<span class="number">2</span> 别名 <span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">set</span> 列<span class="operator">=</span>值,......</span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line">[<span class="keyword">where</span> 筛选条件]</span><br><span class="line"></span><br><span class="line">不加筛选条件即删除整表</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多表删除 和更新类似</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除全表：<span class="keyword">truncate</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><p><strong>truncate和delete对比：</strong></p><ul><li>假如表有自增长列，删除数据后，自增序号从删除点后一个序号开始</li><li>truncate无返回值，delete有返回值</li><li>truncate无法回滚，delete可回滚</li></ul><h2 id="DDL语法"><a href="#DDL语法" class="headerlink" title="DDL语法"></a>DDL语法</h2><table><thead><tr><th align="left">关键字</th><th>说明</th></tr></thead><tbody><tr><td align="left">create</td><td>创建</td></tr><tr><td align="left">rename</td><td>重命名</td></tr><tr><td align="left">alter</td><td>修改</td></tr><tr><td align="left">drop</td><td>删除</td></tr><tr><td align="left">if/if not exists</td><td>判断存在</td></tr></tbody></table><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">选择数据库：</span><br><span class="line">use 数据库名;</span><br><span class="line"></span><br><span class="line">创建数据库：</span><br><span class="line"><span class="keyword">create</span> datebase 库名</span><br><span class="line"><span class="keyword">create</span> datebase if <span class="keyword">not</span> <span class="keyword">exists</span> 库名   先判断数据库是否存在</span><br><span class="line"></span><br><span class="line">修改库：</span><br><span class="line">rename database 旧库名 <span class="keyword">to</span> 新库名      <span class="number">5.1</span><span class="number">.7</span>存在，已废弃</span><br><span class="line"></span><br><span class="line">更改库字符集：</span><br><span class="line"><span class="keyword">alter</span> database 库名  <span class="type">character</span> <span class="keyword">set</span> 字符集</span><br><span class="line"></span><br><span class="line">删除库：</span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> 库名</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ul><li>表操作</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">创建表:</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列名 类型 [约束] [约束] ...,</span><br><span class="line">....,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">修改表名:</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 旧表名 rename <span class="keyword">to</span> 新表名</span><br><span class="line"></span><br><span class="line">删除表：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br><span class="line"></span><br><span class="line">表复制：</span><br><span class="line"># 仅仅复制表结构</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">like</span> 被复制的表名; </span><br><span class="line"># 复制表结构和数据，加<span class="keyword">where</span>可限定复制部分数据</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 被复制的表名;   </span><br><span class="line"># 复制表的某些字段</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">select</span> 字段<span class="number">1</span>,... <span class="keyword">from</span> 被复制的表名 <span class="keyword">where</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>列操作</li></ul><p>格式：alter table 表名 add|drop|modify|change column 列名 【列类型 约束】;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">修改列名：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change <span class="keyword">column</span> 旧列名 新列名 [类型]</span><br><span class="line"></span><br><span class="line">修改列的类型或约束：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify <span class="keyword">column</span> 列名 新类型</span><br><span class="line"></span><br><span class="line">添加新列：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 列名 类型</span><br><span class="line"></span><br><span class="line">删除列：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名</span><br></pre></td></tr></table></figure><h2 id="常见数据类型"><a href="#常见数据类型" class="headerlink" title="常见数据类型"></a>常见数据类型</h2><h3 id="数值型："><a href="#数值型：" class="headerlink" title="数值型："></a>数值型：</h3><p>创建表时定义字段类型说明：</p><p><strong>整型</strong>：Tinyint、Smallint、Meditmint、Int/Integer、Bigint</p><ul><li>不设置符号，默认有符号，想设置无符号在创建表时添加unsigned关键字</li><li>插入数值超出整型范围，报【out for range异常】，并插入临界值</li><li>不设置长度，有默认长度值 </li></ul><p><strong>小数：</strong></p><p>浮点数： Float(M,D)、Double(M,D)   </p><p>定点数： DEC(M,D)/DECIMAL(M,D)</p><ul><li>M=整数和小数共几位数，D=精度几位数  超出范围插入临界值</li><li>M和D都可以省略</li><li>如果是float和double，会根据插入数据进度来决定精度</li></ul><blockquote><p>选择类型原则：所选择的类型越简单越好，能保存数值类型越小越好</p></blockquote><h3 id="字符型："><a href="#字符型：" class="headerlink" title="字符型："></a>字符型：</h3><p><strong>短文本：</strong>Char(M)、Varchar(M)</p><ul><li>char表固定长度，varchar即可变长度(根据插入数据角色长度)</li><li>char费空间、效率高，varchar省空间、效率低。</li><li>char省略M默认1，varchar不可省</li></ul><p><strong>长文本：</strong>Text(文本)、Blob(较大的二进制)</p><p><strong>其他：</strong>Binary、Varbinary、Enum、Set</p><ul><li><p>Binary、Varbinary用于保存较短的二进制</p></li><li><p>Enum即枚举，Set即集合，在创建表格时指定只能插入的数据</p></li></ul><h3 id="日期型："><a href="#日期型：" class="headerlink" title="日期型："></a>日期型：</h3><p><strong>日期：</strong>Date、Datetime、Timestamp(时间戳)、Time、Year</p><ul><li><p>Datetime范围1000-9999，Timestamp范围1970-2038</p></li><li><p>Datetime不受时区影响，Timestamp受时区影响，</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">更换时区：</span><br><span class="line"><span class="keyword">set</span> time_zone <span class="operator">=</span> 时区</span><br></pre></td></tr></table></figure><h2 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h2><table><thead><tr><th align="left">关键字</th><th align="left">约束名</th><th>说明</th></tr></thead><tbody><tr><td align="left">NOT NULL</td><td align="left">非空</td><td>保证该字段不能为null。如：姓名、学号</td></tr><tr><td align="left">DEFAULT</td><td align="left">默认值</td><td>如果插入没规定其他值,会添默认值。如：性别</td></tr><tr><td align="left">UNIQUE</td><td align="left">唯一</td><td>保证值唯一性，可为空。如：座位号</td></tr><tr><td align="left">PRIMARY KEY</td><td align="left">主键</td><td>本表主要的列可做主键</td></tr><tr><td align="left">FOREIGN KEY</td><td align="left">外键</td><td>关联其他表格，限制两表关系，本表字段值必须是其他表字段值(一般是其他表的主键列)</td></tr><tr><td align="left">CHECK</td><td align="left">检查</td><td>自定义检查约束限制条件(mysql不支持)。</td></tr></tbody></table><p><strong>添加约束时机：</strong></p><ul><li>创建表时</li><li>修改表时</li></ul><p><strong>列级约束：</strong></p><ul><li>六大约束语法上都支持，但外键没效果，</li></ul><p><strong>表级约束：</strong></p><ul><li>默认、非空约束不支持</li></ul><p>例如：创建表添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 添加列级约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo (</span><br><span class="line">    id <span class="type">INT</span> PRIMARYKEY, # 主键 主键默认必须非空，唯一</span><br><span class="line">    stuName <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NoT</span> NULI, # 非空</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>)  <span class="keyword">CHECK</span>(gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">OR</span> gender <span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),# 检查</span><br><span class="line">    seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>, # 唯一</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>, # 默认约束</span><br><span class="line">    majorid <span class="type">INT</span> <span class="keyword">FOREIGN</span> KEY <span class="keyword">REFERENCEs</span> major(id) # 外键 引入major表的id字段</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 添加表级约束   格式：字段下面添加  [<span class="keyword">constraint</span>约束名] 约束类型(字段名)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stuinfo (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    stuname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    seat <span class="type">INT</span>,</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    majorid <span class="type">INT</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">CONSTRAINT</span> pk <span class="keyword">PRIMARY</span> KEY(id),# 主键</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> uq <span class="keyword">UNIQUE</span>(seat), # 唯一键</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> ck <span class="keyword">CHECK</span>(gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span><span class="keyword">OR</span> gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>)，# 检查</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> KEY(majorid) <span class="keyword">REFERENCES</span>  major(id) # 外键</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>列级约束和表级约束有什么区别？</strong></p><ul><li><p>约束范围不一样</p></li><li><p>列级约束是定义在列属性中的，而表级约束是定义在列之后的，两者本质上没什么区别</p></li><li><p>如果约束需要同时对多列进行约束那么就只能采用表级约束，因为表级约束面向的是表（当然就包括所有列）</p></li><li><p>列级约束只能针对该列进行约束。如：gender字段中check约束</p></li></ul><p><strong>什么时候用列级，什么时候用表级？通用写法：</strong></p><ul><li>外键定义表级约束</li></ul><h3 id="外键"><a href="#外键" class="headerlink" title="外键:"></a>外键:</h3><ul><li>要求在从表设置外键关系</li><li>从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</li><li>主表的关联列必须是一个key(一般是主键或唯—)</li><li>插入数据时:先插入主表，再插入从表。删除数据时，先删除从表，再删除主表。</li></ul><p><strong>修改表时删除约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1</span>．期制除非空约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> stuname <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NULL</span>;</span><br><span class="line"># <span class="number">2</span>．删除默认约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo MODIFY <span class="keyword">COLUMN</span> age <span class="type">INT</span> ;</span><br><span class="line"># <span class="number">3.</span>册除主键</span><br><span class="line">AITER <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"># <span class="number">4</span>．册除唯一</span><br><span class="line">AITERT ABLE stuinfo <span class="keyword">DROP</span> INDEX seat;</span><br><span class="line"># <span class="number">5.</span>删除外键</span><br><span class="line">AITER <span class="keyword">TABLE</span> stuinfo <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名</span><br></pre></td></tr></table></figure><h3 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h3><p>标识列又称自增长列。</p><p>可以不用手动插入值，系统提供默认的序列值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 建表时设置标识列</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_identity(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, # AUTO_INCREMENT标识自增长</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 查看系统自增量，每次增加步长的值</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%auto_inerement%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>标识列必须和主键搭配吗？</strong></p><ul><li>不一定，但要求是一个key</li><li>标识列至多只有一个</li><li>标识列类型只能是数值型</li><li>可设置每次增量的步长值，</li><li>可修改标识列初始值，即第一次插入数据时指定标识列的值</li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基础</title>
      <link href="/aiyblog/2021/04/24/sql/redis%E5%9F%BA%E7%A1%80/"/>
      <url>/aiyblog/2021/04/24/sql/redis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="redis："><a href="#redis：" class="headerlink" title="redis："></a>redis：</h2><p>一款高性能的NOSQL系列的非关系型数据库    存储 key:value 类型数据    数据之间没关联，存储在内存中</p><h3 id="redis数据结构"><a href="#redis数据结构" class="headerlink" title="redis数据结构"></a>redis数据结构</h3><p>key,value格式的数据，key都是字符串，value有5种数据结构</p><p><strong>1) 字符串类型</strong>     </p><p>string     </p><ul><li>set key</li><li>get key</li><li>del key</li></ul><p><strong>2) 哈希类型</strong>  </p><p>hash  map格式          </p><ul><li>hset key     field value</li><li>hget key    field</li><li>hdel key    field</li><li>hgetall key</li></ul><p><strong>3) 列表类型</strong></p><p>list    linked、list格式。支持重复元素</p><ul><li>lpush  列表名 value</li><li>rpush  列表名 value</li><li>lrange 列表名 start end</li><li>lpop 列表名  =删最左边并返回</li><li>rpop 列表名  =删最右边并返回</li></ul><p><strong>4) 集合类型</strong> </p><p>set    不允许重复元素 </p><ul><li>sadd      集合名 value </li><li>smenbers 集合名</li><li>srem      集合名 value</li></ul><p><strong>5) 有序集合类型</strong></p><p> sortedset    不允许重复元素，且元素有顺序  自动排序    通过score对value排序</p><ul><li>zadd   集合名 score vlaue </li><li>zrange  集合名 start end </li><li>zrem   集合名 value</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keys * 查询所有键</span><br><span class="line">type key获取键对应值的类型</span><br><span class="line">del key删除指定的key value</span><br></pre></td></tr></table></figure><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>【RDB】 默认方式 不需配置  在一定间隔时间中，检测key的变化情况，然后持久化数据<br>【AOF】 日记记录方式，可以记录每一条命令的操作，可以每一次命令操作后， 持久化数据</p><table><thead><tr><th align="left">持久化</th><th align="left"></th></tr></thead><tbody><tr><td align="left">appendonly</td><td align="left">no==关闭 yes==开启</td></tr><tr><td align="left">appendfsync always</td><td align="left">每一次操作进行持久化</td></tr><tr><td align="left">appendfsync everysec</td><td align="left">每秒进行持久化</td></tr><tr><td align="left">appendfsync no</td><td align="left">不进行持久化</td></tr></tbody></table><h2 id="java操作redis"><a href="#java操作redis" class="headerlink" title="java操作redis"></a>java操作redis</h2><h3 id="jedis使用"><a href="#jedis使用" class="headerlink" title="jedis使用"></a>jedis使用</h3><ul><li>下载jedis的jar包（java操作redis数据库的工具）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">commons-pool2-<span class="number">2.3</span>.jar</span><br><span class="line">jedis-<span class="number">2.7</span><span class="number">.0</span>.jar</span><br></pre></td></tr></table></figure><ul><li>使用    new Jedis()获取连接 和redis命令一样的方法名方法有相同的作用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);<span class="comment">//如果使用空参构造，默认为localhost和6379端口</span></span><br></pre></td></tr></table></figure><h3 id="jedis连接池：JedisPool"><a href="#jedis连接池：JedisPool" class="headerlink" title="jedis连接池：JedisPool"></a>jedis连接池：JedisPool</h3><ul><li>创建JedisPool    </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//pro为读取配置文件的对象</span></span><br><span class="line"><span class="comment">//maxTotal：最大连接数</span></span><br><span class="line">config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxTotal&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//maxIdle：最大空闲数，数据库连接的最大空闲时间。超过空闲时间，数据库连接将被标记为不可用，然后被释放。设为0表示无限制。</span></span><br><span class="line">config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxIdle&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">JedisPool</span>([config],主机ip地址,端口号);</span><br><span class="line"><span class="comment">// 调用方法 </span></span><br><span class="line">getResource() <span class="comment">// 该方法获取Jedis连接</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>使用redis缓存一些不经常发生变化的数据。</li><li>数据库的数据一旦发生改变，则需要更新缓存。<pre><code>  * 1-数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入  * 2-在service对应的增删改方法中，将redis数据删除。</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql优化笔记1</title>
      <link href="/aiyblog/2021/04/24/sql/sql%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B01/"/>
      <url>/aiyblog/2021/04/24/sql/sql%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><ul><li>连接层：提供与客户端连接</li><li>服务层：提供用户使用接口、提供sql优化器</li><li>引擎层：提供各种存储方式<ul><li>InnoDB：事务有限-适合高并发-行锁</li><li>MyISAM：性能优先-表锁</li></ul></li><li>存储层：存储数据</li></ul><p><strong>命令</strong></p><p>查询数据库引擎：show engines；</p><p>查看当前使用引擎：show variables like ‘%storage_engine%’;</p><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><p>原因：性能低、执行时间太长、等待时间太长、SQL语句欠佳(连接查询)、索引失效、服务器参数设置不合理（缓冲、线程数）</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>主要优化索引（index） <strong>索引</strong>：帮助mysql高效获取数据的数据结构（树：B树【默认】、hash树）<strong>B树</strong>：二叉树，小的放左、大的放右</p><p>索引=相当书的目录  创建索引相当于创建了一个数据结构。</p><p><strong>弊端</strong>：</p><ul><li>索引本身很大，可存放内存、硬盘</li><li>索引不是所有情况均适用：<ul><li>1-少量数据 </li><li>2-频繁更新字段 </li><li>3-很少使用字段</li></ul></li><li>提高查，降低增删改效率</li></ul><p><strong>优势</strong>：</p><ul><li>提高查询效率（降低io使用率）</li><li>降低cpu使用率（因为B树索引本身已经排好序）</li></ul><p>3层Btree可存放上百万条数据</p><p><strong>Btree</strong>：一般都指B+树，数据全部放在叶节点数</p><ul><li>查询任意数据次数：n次</li><li>n=B+树高度</li></ul><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><p><strong>单值索引</strong>：单列，一个表可以多个单值索引</p><p><strong>唯一索引</strong>：不能重复。如：id字段</p><p><strong>复合索引</strong>：多个列构成的索引。相当于二级目录，需要按索引字段顺序使用。 如：（name,age）查询name叫张三的，查到2个，然后再查age。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 创建索引</span><br><span class="line">语法：create 索引类型 索引名 on 表(字段...)</span><br><span class="line">方法1：</span><br><span class="line">create indexdept_index on tb(dept) ; -- 单值</span><br><span class="line">create unique index name_index on tb(name);  -- 唯一:</span><br><span class="line">create index dept_name_index on tb(dept,name); -- 复合索引</span><br><span class="line">方法2：</span><br><span class="line">alter table tb add index indexdept_index(dept) ; -- 单值</span><br><span class="line">alter table tb add unique index name_index(name); -- 唯一:</span><br><span class="line">alter table tb add index dept_name_index(dept,name); -- 复合索引</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">语法：drop index 索引名 on 表名;</span><br><span class="line"></span><br><span class="line">-- 查询索引</span><br><span class="line">语法：show index form 表名;</span><br><span class="line">语法：show index form 表名 \G;</span><br></pre></td></tr></table></figure><blockquote><p>注意：一个字段如果是primary key ，则该字段默认就是 主键索引=和唯一索引相似。</p><p>主键与唯一区别：主键不能为null，唯一索引可以为null。</p></blockquote><h3 id="sql性能问题"><a href="#sql性能问题" class="headerlink" title="sql性能问题"></a>sql性能问题</h3><ul><li>myslq查询优化器会干扰优化</li><li>分析sql执行计划  关键字<strong>explain</strong>=可以模拟sql优化器执行sql语句，让开发人员知道编写的sql的状况。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra</span><br><span class="line"></span><br><span class="line">id：编号</span><br><span class="line">select_type：查询类型</span><br><span class="line">table：查询表</span><br><span class="line">partitions：</span><br><span class="line">type：类型</span><br><span class="line">possible_keys：预测用到索引</span><br><span class="line">key：实际使用索引 </span><br><span class="line">key_len：实际使用索引的长度</span><br><span class="line">ref：表之间的引用</span><br><span class="line">rows：通过索引查询到的数据量</span><br><span class="line">filtered：</span><br><span class="line">Extra：额外的信息  </span><br></pre></td></tr></table></figure><h4 id="执行计划字段说明"><a href="#执行计划字段说明" class="headerlink" title="执行计划字段说明"></a><strong>执行计划字段说明</strong></h4><ul><li>创建表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- 准备数据</span><br><span class="line">-- 课程表</span><br><span class="line">create table course(</span><br><span class="line">cid int(3), </span><br><span class="line">cname varchar(20), </span><br><span class="line">tid int(3)</span><br><span class="line">);</span><br><span class="line">-- 教师</span><br><span class="line">create table teacher(</span><br><span class="line">tid int(3),</span><br><span class="line">tname varchar(20),</span><br><span class="line">    tcid int(3)</span><br><span class="line">);</span><br><span class="line">-- 教师描述</span><br><span class="line">create tableteacherCard(</span><br><span class="line">tcid int(3),</span><br><span class="line">    tcdesc varchar(200)</span><br><span class="line">);</span><br><span class="line">insert into course values(1,&#x27;java&#x27;,1);</span><br><span class="line">insert into course values(2,&#x27;html&#x27;,1);</span><br><span class="line">insert into course values(3,&#x27;sql&#x27;,2);</span><br><span class="line">insert into course values(4,&#x27;web&#x27;,3);</span><br><span class="line">insert into teacher values(1,&#x27;tz&#x27;,1);</span><br><span class="line">insert into teacher values(3,&#x27;tw&#x27;,2);</span><br><span class="line">insert into teacher values(4,&#x27;tl&#x27;,3);</span><br><span class="line">insert into teacherCard values(1,&#x27;tzdesc&#x27;);</span><br><span class="line">insert into teacherCard values(3,&#x27;twdesc&#x27;);</span><br><span class="line">insert into teacherCard values(4,&#x27;tldesc&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询课程编号为2或教师证编号为3的老师信息</span><br><span class="line">select t.*</span><br><span class="line">from teacher t,course c, teacherCard tc</span><br><span class="line">where t.tid = c.tid and t.tcid = tc.tcid and (c.cid=2 or tc.tcid=3);</span><br></pre></td></tr></table></figure><ul><li>执行计划：<strong>explain + sql</strong>；</li></ul><p><strong>id</strong>：编号</p><blockquote><p>id值相等，则为从上往下顺序执行。</p><p>id值不同，id值越大的优先查询（本质：嵌套子查询时，先查内层，再查外层）。</p></blockquote><p>表的执行顺序 因数量的个数改变而改变的原因：笛卡尔积   <strong>数据量小的表优先查询</strong></p><p><strong>select_type</strong>：查询类型</p><ul><li> PRIMARY：包含子查询sql的 主查询（最外层）</li><li>SUBQUERY：包含子查询sql的 子查询（非最外层）</li><li>simple：简单查询（不包含子查询、union）</li><li>derived：衍生查询（使用到了临时表）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 衍生查询</span><br><span class="line">explain select cr.cname from (select * from course where tid in (1,2)) cr;</span><br></pre></td></tr></table></figure><p><strong>type</strong>：索引类型   以下常用</p><p>system &gt; const  &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</p><blockquote><p>system，const只是理想情况，实际能达到 ref &gt; range</p><p><strong>system</strong>（忽略）：只有一条数据的系统表 或 衍生表只有一条数据的主查询。</p><p><strong>const</strong>：仅仅能查到一条数据的sql，用于Primary key 或 unique索引 </p><p><strong>eq_ref</strong>：唯一性索引，对于每个索引键的查询，返回匹配唯一行数据（有且仅有1个，不能多，不能0）就能达到eq_ref。</p><p><strong>ref</strong>：非唯一性索引，对于每个索引键的查询，返回匹配的所有行（0或多个）</p><p><strong>range</strong>：检索指定范围的行，weher后是一个范围查询（between 、&gt; &lt; &gt;=、特殊：in有时会失效，从而转为all）</p><p><strong>index</strong>：查询全部索引中的数据  如：explain select tid from teacher ; – tid是索引，只需扫描索引表，不需全表扫描。</p><p><strong>all</strong>：查询全部表中数据   如：explain select cid from course ;  – cid不是索引，需要全表扫描。</p></blockquote><p><strong>possible_keys</strong>：可能用到的索引</p><p><strong>key</strong>：实际用到的索引</p><blockquote><p>possible_keys/key为Null 则说明没有用到索引。</p></blockquote><p><strong>key_len</strong>：索引长度 </p><p>作用：用于判断复合索引是否被完全使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 增加一个复合索引</span><br><span class="line">alter table test_kl add index name_namel_index(name, name1) ;</span><br><span class="line"></span><br><span class="line">-- name 和 name1数据类型都为 char(20)，name不能为null，name1可以;</span><br><span class="line">-- key_len = 60  等于60是因为一个字符占3字节。char(20)所以 20*3=60</span><br><span class="line">explain select * from test_kl where name = &#x27;&#x27;;</span><br><span class="line">-- key_len = 121  key_len根据字段类型长度计算，多1表示字段可为null。</span><br><span class="line">explain select * from test_kl where name1 =&#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">-- mysql用两个字节表示可变长度</span><br><span class="line">alter table test_kl add column name2 varchar(20); -- 字段name2可以为Null</span><br><span class="line">alter table test_kl add index name2_index (name2);</span><br><span class="line">explain select * from test_kl where name2=&#x27;&#x27;; -- key_len = 63  不为null+1  可变长度+2  所以20*3+1+2=63</span><br></pre></td></tr></table></figure><blockquote><p>utf8:1个字符3个字节</p><p>gbk: 1个字符2个字节</p><p>latin: 1个字符1个字节</p></blockquote><p><strong>ref</strong>：与type中的ref不同，作用：指明当前表查询时所参照的字段。</p><ul><li>如：const = 常量</li></ul><p><strong>rows</strong>：被索引优化后查询的数据个数 （实际通过索引而查询到的数据个数）</p><p><strong>Extra</strong>：额外说明。</p><ul><li>using filesort：性能消耗大，需要”额外“的一次排序/查询。常见于order by 语句中。</li></ul><p>排序前需先查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 对于单索引，如果排序和查找是同一个字段，则不会出现using filesort。如果是不同字段，则会出现。</span><br><span class="line">explain select * from test02 where a1 =&#x27;&#x27; order by a1; -- a1:姓名a2:年龄</span><br><span class="line">explain select * from test02 where al =&#x27;&#x27; order by a2; -- 出现using filesort</span><br><span class="line"></span><br><span class="line">-- 复合索引，对于索引包括的列不能跨列排序（需要满足最佳左前缀），否则出现using filesort。</span><br><span class="line">alter table test02 add index idx_al_a2_a3 (al,a2, a3);</span><br><span class="line">explain select * from test02 where al=&#x27;&#x27; order by a2 ; -- 没有跨列，</span><br><span class="line">explain select * from test02 where a2=&#x27;&#x27; order by a3; -- 跨了a1，出现using filesort</span><br><span class="line">explain select * from test02 where al=&#x27;&#x27; order by a3; -- 跨了a2，出现using filesort</span><br></pre></td></tr></table></figure><ul><li>using temporary：性能损耗大，用到了临时表。 一般出现在group by 语句中。</li></ul><p>原因：已经有表了，但不使用，必须再来一张表。即额外再多使用一张表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from test03 where a2=2 and a4=4 group by a2,a4; --没有using temporary</span><br><span class="line">explain select * from test03 where a2=2 and a4=4 group by a3; --有using temporary</span><br></pre></td></tr></table></figure><ul><li>using index：性能提升，索引覆盖。不需回表查询</li></ul><p>原因：不读取原文件，只从索引文件获取数据。</p><p>使用到的列全部都在索引中，就是索引覆盖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alter table test02 add inx_a1_a2(a1,a2);</span><br><span class="line"></span><br><span class="line">explain select a1,a3 from test02 where a1=&#x27;&#x27; or a3=&#x27;&#x27;;  -- a3不是索引，无法覆盖，不会出现using index</span><br><span class="line">explain select a1,a2 from test02 where a1=&#x27;&#x27; or a2=&#x27;&#x27;;  -- 出现using index</span><br><span class="line">explain select a1,a2 from test02; --  </span><br></pre></td></tr></table></figure><blockquote><p>用到索引覆盖（using index）时：对key和possible_key有影响。</p><p>没where：索引只出现在执行计划字段key中</p><p>没where：索引出现在key和possible_key中。</p></blockquote><ul><li>using where：需要回表查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- age是索引列,name不是索引，所以需要回表查询，出现using where</span><br><span class="line">explain select name,age from test02 where age=18;</span><br></pre></td></tr></table></figure><ul><li>impossible where： where子句永远为false。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- impossible where如:</span><br><span class="line">explain select a1 from test02 where a1=&#x27;x&#x27; and a1=&#x27;y&#x27;;  -- 精确查询，a1不可能即为x也为y。</span><br></pre></td></tr></table></figure><ul><li>using join buffer：内部对sql进行了优化。</li></ul><p><strong>sql执行</strong></p><ul><li>编写过程：select distinct  .. from .. join .. on .. where .. group by .. having .. order by ..</li><li>解析过程：from .. on .. join .. where .. group by .. having .. select distinct .. order by .. </li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 创建复合索引</span><br><span class="line">alter table test03 add index idx_a1_a2_a3_4(a1,a2,a3,a4) ;</span><br><span class="line"></span><br><span class="line">-- 推荐写法，顺序使用索引</span><br><span class="line">explain select al,a2,a3,a4 from test03 where a1=1 and a2=2 and a3=3 and a4 =4; </span><br><span class="line">-- 使用索引顺序和索引顺序不同，但真正执行前，经过sql优化器调整，结果和上条sql一致。</span><br><span class="line">explain select a1,a2,a3,a4 from test03 where a4=1 and a3=2 and a2=3 and a1 =4; =</span><br><span class="line">-- 以下两个sql使用了全部索引字段。</span><br><span class="line"></span><br><span class="line">-- 以上SQL用到了al a2两个索引，该两个字段不需要回表查询using index，可通过key_len验证。</span><br><span class="line">-- a1,a2数据类型=int(4)  所以key_len=8</span><br><span class="line">explain select al,a2,a3,a4 from test03 where al=1 and a2=2 and a4=4 order by a3;  </span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><ul><li>如果复合索引是使用索引顺序全部一致（且不跨列使用）则复合索引全部使用。部分一致则部分索引使用。</li></ul><h4 id="单表优化"><a href="#单表优化" class="headerlink" title="单表优化"></a>单表优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表添加数据</span><br><span class="line">create table book (</span><br><span class="line">bid int(4) primary key,</span><br><span class="line">name varchar(20) not null,</span><br><span class="line">authorid int(4) not null,</span><br><span class="line">publicid int(4) not null, </span><br><span class="line">typeid int(4) not null</span><br><span class="line">);</span><br><span class="line">insert into book values(1,&#x27;tjava&#x27;,1,1,2);</span><br><span class="line">insert into book values(2,&#x27;tc&#x27;,2,1,2);</span><br><span class="line">insert into book values(3,&#x27;wx&#x27;,3,2,1);</span><br><span class="line">insert into book values(4,&#x27;math&#x27;,4,2,3);</span><br><span class="line"></span><br><span class="line">-- 查询authorid=1且typeid为2或3的bid</span><br><span class="line">explain select bid from book where typeid in(2,3) and authorid=1 order by typeid desc ;</span><br><span class="line"></span><br><span class="line">-- 优化：加索引</span><br><span class="line">alter table book add index idx_bta (bid,typeid,authorid) ; </span><br><span class="line">-- 根据SQL实际解析的顺序，调整索引的顺序:  一旦进行升级优化，需要将之前废弃索引删除，防止干扰。</span><br><span class="line">alter table book add index idx_bta (typeid,authorid,bid);</span><br><span class="line"></span><br><span class="line">-- 再次优化：（之前是index级别):思路。因为范围查询in有时会实现，因此交换索引的顺序，把可能失效的索引放后</span><br><span class="line">alter table book add index idx_atb(authorid,typeid, bid);</span><br><span class="line">explain select bid from book where authorid=1 and typeid in(2,3) order by typeid desc</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><ul><li>索引不能跨列使用(最佳左前缀)，保持索引定义和使用顺序一致，</li><li>索引需要逐步优化，</li><li>将含in 的范围查询放where 最后，防止索引失效。索引失效后会回原表查询。</li></ul><blockquote><p>Extra中同时出现using where(需回原表查)，using index(不需回原表查) </p><p>原因：查询时，使用的某一索引正常则不需要回原表查，而某一索引列失效则造成需要回原表查。</p></blockquote><h4 id="多表优化"><a href="#多表优化" class="headerlink" title="多表优化"></a>多表优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表和数据</span><br><span class="line">create table teacher2(</span><br><span class="line">tid int(4) primary key,</span><br><span class="line">cid int(4) not null</span><br><span class="line">);</span><br><span class="line">insert into teacher2 values(1,2);</span><br><span class="line">insert into teacher2 values(2,1);</span><br><span class="line">insert into teacher2 values(3,3);</span><br><span class="line"></span><br><span class="line">create table course2(</span><br><span class="line">cid int(4),</span><br><span class="line">cname varchar(20)</span><br><span class="line">);</span><br><span class="line">insert into course2 values(1,&#x27;java&#x27;);</span><br><span class="line">insert into course2 values(1,&#x27;python&#x27;);</span><br><span class="line">insert into course2 values(1,&#x27;kotlin&#x27;);</span><br><span class="line"></span><br><span class="line">explain select * from teacher2 t left outer join course2 c on t.cid=c.cid where c.cname=&#x27;java&#x27;;</span><br><span class="line">-- 加索引，往哪加？ 原则：1-小表驱动大表 where 小表.x=大表.y  2-索引建立在经常使用的字段上（左外连接左表加，右外连接右表加）。</span><br><span class="line">-- 对于双层循环：一般建议数据小的循环放外层，大的循环放内层。 小表在左可造成外层循环小。</span><br><span class="line">alter table teacher2 add index index_ teacher2_cid(cid);</span><br><span class="line">alter table course2 add index index_ course2_cname(cname);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><ul><li>小表驱动大表。</li><li>索引建立在经常查询字段上。</li></ul><h3 id="避免索引失效原则"><a href="#避免索引失效原则" class="headerlink" title="避免索引失效原则"></a>避免索引失效原则</h3><p>sql优化是一个概率层面的优化。至于是否实际使用了个人优化的sql，需通过explain进行推测。</p><ul><li>复合索引，不要跨列或无序使用（最佳左前缀）尽量使用全索引匹配。</li><li>不要在索引上进行任何操作（如计算、函数、类型转换等），否则索引失效。</li><li>复合索引中，如果左则索引失效，右则索引全部失效（最佳左前缀）。单独索引则不会如此。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 复合索引</span><br><span class="line">alter table book add index index_authorid_typeid(authorid,typeid)</span><br><span class="line">explain select * from book where authorid=1 and typeid=2; -- 用到了at2个索引</span><br><span class="line">explain select * from book where authorid=1 and typeid*2=2; -- 用到了al个索引</span><br><span class="line">explain select * from book where authorid*2=l and typeid*2=2; -- 用到了0个索</span><br><span class="line">explain select * from book where authorid*2=l and typeid=2; -- 用到了0个索引</span><br></pre></td></tr></table></figure><ul><li>复合索引，不能使用不等于（!= 、&lt;&gt;）或 is null 否则自身及右侧索引全部失效。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alter table book add index idx_book_at(authorid,typeid) ;</span><br><span class="line">explain select * from book where authorid = 1 and typeid = 2; -- 复合索引idx_book_at全部使用</span><br><span class="line">explain select * from book where authprid &gt; 1 and typeid = 2; -- 复合索引中如果有&gt;，则自身和右侧索引全部失效。</span><br><span class="line">explain select * from book where authprid = 1 and typeid &gt; 2; -- 复合索引idx_book_at全部使用</span><br><span class="line">-- 明显的概率问题。</span><br><span class="line">explain select * from book where authprid &lt; 1 and typeid = 2; -- 复合索引idx_book_at中typeid使用了</span><br><span class="line">explain select * from book where authprid &lt; 4 and typeid = 2; -- 复合索引idx_book_at全部失效。</span><br></pre></td></tr></table></figure><blockquote><p>索引优化，是一个大部分情况使用的结论，由于sql优化器等原因，结论不是100%正确。</p></blockquote><ul><li><p>一般而言，范围查询（&gt;、&lt; 、in等）之后的索引失效。</p></li><li><p><strong>补救</strong>：尽量使用索引覆盖（using index） 如：复合索引(a,b,c)，查询select a,b,c from xx.. where a=.. and b=.. ..;</p></li><li><p>like尽量以“常量开头”，不要以“%”开头，否则失效。使用索引覆盖一定程度上可以解决该问题。</p></li><li><p>尽量不要使用类型转换（显式、隐式转换），否则索引失效。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from teacher where tname=&#x27;abc&#x27;;</span><br><span class="line">explain select * from teacher where tname=123; -- 隐式转换，因此索引失效。</span><br></pre></td></tr></table></figure><ul><li>尽量不要使用or，否则索引失效。甚至可以把左侧的索引失效。</li></ul><h3 id="常见优化方法"><a href="#常见优化方法" class="headerlink" title="常见优化方法"></a>常见优化方法</h3><h4 id="exists和in："><a href="#exists和in：" class="headerlink" title="exists和in："></a><strong>exists和in</strong>：</h4><p>主查询数据集大，用in。子查询数据集大，用exists</p><p><strong>exists语法</strong>：将主查询的结果，放到子查询中进行条件校验（如果有数据，则校验成功），如果符合校验，则保留数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select .. from table where exists/in (子查询);</span><br><span class="line"></span><br><span class="line">-- exists </span><br><span class="line">select tname from teacher where exists (select * from teacher where tid =9999);</span><br><span class="line"></span><br><span class="line">-- in</span><br><span class="line">select * from table where tid in (1,3,5);</span><br><span class="line">select * from A where id in (select id from B);</span><br></pre></td></tr></table></figure><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a><strong>order by</strong></h4><p>using filesort有两种算法（根据IO的次数）：双路排序（io较耗性能）、单路排序</p><p>MySQL4.1之前默认使用<strong>双路排序</strong>（扫描2次磁盘：1-从磁盘读排序字段后进行排序【在buffer中进行】 2-扫描其他字段）</p><p>MySQL4.1之后默认使用<strong>单路排序</strong>（只读取一次【全部字段】，在buffer中进行排序。但单路排序有一定隐患【不一定真的1次io，可能多次】）</p><blockquote><p>原因：如果数据量特别大，无法一次性读取完，会进行“分片读取，多次读取”</p><p>注意：使用时，单路比多路占更多buffer。</p><p>如果数据量大，可以考虑调大buffer的容量大小：set max_length_for_sort_data = 1024(单位=字节)</p></blockquote><p>max_length_for_sort_data值太低，mysql自动从单路切换到双路。</p><ul><li>选择使用单路、双路，调整buffer容量大小。</li><li>避免select * …  。并且*很多实现索引覆盖。</li><li>复合索引不要跨列使用，避免using filesort</li><li>保证全部排序字段 排序一致性（都是升序或降序）</li></ul><h3 id="慢查询sql优化"><a href="#慢查询sql优化" class="headerlink" title="慢查询sql优化"></a>慢查询sql优化</h3><p><strong>慢查询日志</strong>：mysql提供的一种日志记录，用于记录mysql中响应时间超过阈值的sql语句（<strong>long_query_time</strong>，默认10秒）。</p><ul><li>慢查询日志默认关闭的，建议开发调优打开，最终部署是关闭。</li><li>检查是否开启慢查询日志：<strong>show variables like ‘%slow_query_log%;’</strong><ul><li>临时开启：<strong>set global slow_query_log = 1;</strong> – 内存中开启</li><li>永久开启：/etc/my.cnf 中[mysqld]后追加配置。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log=1</span><br><span class="line">s1ow_query_1og_file=/var/lib/mysq1/localhost-slow.log </span><br><span class="line">-- 保存后重启mysql</span><br></pre></td></tr></table></figure><ul><li>查看慢查询阈值：<strong>show variables like ‘%long_query_time%’*;</strong><ul><li>临时设置：<strong>set global long_query_time = 5;</strong>  修改后重新登录后生效。</li><li>永久设置：/etc/my.cnf 中[mysqld]后追加配置</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">long_query_time = 5</span><br><span class="line">-- 保存后重启mysql</span><br></pre></td></tr></table></figure><ul><li><p>查询超过阀值的sql数量: <strong>show global status like ‘%slow_queries%’;</strong></p></li><li><p>通过mysqldumpslow工具查看慢sql</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 工具命令</span><br><span class="line">mysqldumpslow --help</span><br><span class="line">s：排序方式</span><br><span class="line">r：逆序</span><br><span class="line">l：锁定时间</span><br><span class="line">g：正则匹配模式 </span><br><span class="line"></span><br><span class="line">--使用举例：语法：mysqldumpslow 参数 慢查询日志文件路径</span><br><span class="line">--获取返回记录最多的3个SQL</span><br><span class="line">mysqldumpslow -s r -t 3 /var/lib/mysql/1ocalhost-slow.log</span><br><span class="line">--获取访问次数最多的3个SQL</span><br><span class="line">mysqldumpslow -s c -t 3 /var/lib/mysql/localhost-slow.log</span><br><span class="line">--按照时间排序，前10条包含left join查询语句的SQL</span><br><span class="line">mysqldumpslow -s t -t 10 -g &quot;left join&quot;</span><br></pre></td></tr></table></figure><h3 id="分析海量数据"><a href="#分析海量数据" class="headerlink" title="分析海量数据"></a>分析海量数据</h3><p>分析海量数据：<strong>profiles</strong></p><ul><li>show profiles; – 默认关闭，<ul><li>作用：会记录所有profiling打开之后全部sql查询语句所花费的时间。</li><li>缺点：不够精确，只能看到总共消费时间，不能看到各硬件(cpu、io等)消费时间</li><li>精确分析：show profile all for query  之前查询sql的id（编号） 如：show profile all for query  2  = 查询第二次查询sql花费时间。</li><li>精确分析：show profile  cpu,block io for query  之前查询sql的id（编号）</li></ul></li><li>查看：show variables like ‘%profiling%’;</li><li>打开：set profiling = on;</li></ul><p><strong>全局查询日志</strong>：记录开启之后的全部sql语句。（全局记录操作，仅在调优、开发过程中打开即可，最终部署实施时一定关闭）</p><ul><li>查看：show variables like ‘%general_log%’;</li><li>打开命令：开启后，所有sql会被记录到系统自带表【mysql.general_log】中或文件中。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set global general_log = 1; </span><br><span class="line">-- 设置将全部sql记录到表中</span><br><span class="line">set global log_ouput=&#x27;table&#x27;; </span><br><span class="line">-- 设置将全部sql记录到文件中</span><br><span class="line">set global log_ouput=&#x27;file&#x27;; </span><br><span class="line">set global general_log_file=&#x27;/tmp/general.log&#x27;; </span><br></pre></td></tr></table></figure><h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><p>解决因资源共享而造成的并发问题。</p><h4 id="操作类型"><a href="#操作类型" class="headerlink" title="操作类型"></a><strong>操作类型</strong></h4><ul><li><strong>读锁</strong>（共享锁）：对同一个数据，多个读操作可同时进行，互不干扰。</li><li><strong>写锁</strong>（互斥锁）：如果当前操作没完，则无法进行其他读操作、写操作</li></ul><h4 id="操作范围"><a href="#操作范围" class="headerlink" title="操作范围"></a><strong>操作范围</strong></h4><ul><li><strong>表锁</strong>：一次性对一张表整体加锁。如：MyISAM使用表锁。开销小、加锁快、无死锁。但锁范围大，容易发生冲突，并发度低。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表和数据</span><br><span class="line">create table tablelock(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20)</span><br><span class="line">)engine myisam;</span><br><span class="line">-- oracl默认不支持自增，需借助序列来实现。</span><br><span class="line">insert into tablelock(name) values(&#x27;a1&#x27;);</span><br><span class="line">insert into tablelock(name) values(&#x27;a2&#x27;);</span><br><span class="line">insert into tablelock(name) values(&#x27;a3&#x27;);</span><br><span class="line">insert into tablelock(name) values(&#x27;a4&#x27;);</span><br><span class="line">insert into tablelock(name) values(&#x27;a5&#x27;);</span><br><span class="line"></span><br><span class="line">-- 增加锁   </span><br><span class="line">-- 语法：lock table 表1 read/write, 表2 read/write, ...</span><br><span class="line">-- 查看加锁的表：show open tables;   -- Name_locked=1说明表加锁了</span><br><span class="line">-- 表锁定严重程度：show status like &#x27;table%&#x27;;    </span><br><span class="line">-- Table_locks_immediate字段：可能获取到的锁</span><br><span class="line">-- Table_locks_waited字段：需要等待的表锁数（值越大说明存在越大的锁竞争）</span><br><span class="line">-- 建议：Table_locks_immediate/Table_locks_waited &gt; 5000 建议采用InnoDb引擎，否则采用MyISAM引擎。</span><br><span class="line">-- 加锁：lock table x表 read/write;</span><br><span class="line">-- 释放锁：unlock tables</span><br></pre></td></tr></table></figure><p>加读锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 加读锁</span><br><span class="line">lock table tablelock read;</span><br><span class="line"></span><br><span class="line">-- 会话：session=每个访问数据的dos命令行=数据库客户端工具</span><br><span class="line">-- 会话0（当前会话）</span><br><span class="line">lock table tablelock read ;</span><br><span class="line">select * from tablelock ;-- 读，可以</span><br><span class="line">delete from table1ock where id = 1; -- 写（增删改），不可以</span><br><span class="line">select * from emp ; -- 其他表读不可以</span><br><span class="line">delete from emp where eno = 1; -- 其他表写不可以</span><br><span class="line">-- 小结：会话给a表加了读锁，当前会话对a表读可以，写不可以，对其他表读写都不可以。</span><br><span class="line"></span><br><span class="line">-- 会话1（其他会话）</span><br><span class="line">select * from tablelock ;-- 读(查)，可以</span><br><span class="line">delete from tablelock where id =i ; -- 写，会“等待”会话0将锁释放</span><br><span class="line">select * from emp ; -- 其他表读可以</span><br><span class="line">delete from emp where eno = 1; -- 其他表写可以</span><br><span class="line">-- 小结：会话0对a表加了read锁，其他会话对a表读可以，写等待锁释放，对其他表读写都可以。</span><br></pre></td></tr></table></figure><p>加写锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 加写锁</span><br><span class="line">lock table tablelock writer;</span><br><span class="line"></span><br><span class="line">-- 会话0（当前会话）：会话给a表加了writer锁，当前会话对a表读写可以，对其他表读写不可以。</span><br><span class="line">-- 会话1（其他会话）：会话0对a表加writer锁，其他会话对读写操作需等待锁释放，对其他表读写都可以。</span><br></pre></td></tr></table></figure><blockquote><p>MySQL表级锁的锁模式：MyISAM在执行查询语句(SELECT)前，会自动给涉及的所有表加读锁，在执行更新操作（DML）前，会自动给涉及的表加写锁。</p><p>所以对MyISAM表进行操作，会有以下情况:<br>a、对MyISAM表的读操作（加读锁），不会阻塞其他进程（会话）对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。<br>b、对MyISAM表的写操作（加写锁)，会阻塞其他进程（会话）对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。</p></blockquote><ul><li><strong>行锁</strong>：一次性对一条数据加锁。如：InnoDB使用行锁。开销大、加锁慢；容易死锁，缩范围小，不易冲突，并发度高（小概率并发问题：脏读、幻读、不可重复读、丢失更新等）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表和数据  mysql自动commit，oracle不会自动commit</span><br><span class="line">create table linelock(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20)</span><br><span class="line">)engine innodb;</span><br><span class="line">insert into linelock(name) values(&#x27;a1&#x27;);</span><br><span class="line">insert into linelock(name) values(&#x27;a2&#x27;);</span><br><span class="line">insert into linelock(name) values(&#x27;a3&#x27;);</span><br><span class="line">insert into linelock(name) values(&#x27;a4&#x27;);</span><br><span class="line">insert into linelock(name) values(&#x27;a5&#x27;);</span><br><span class="line"></span><br><span class="line">-- 为了研究行锁，暂时将自动commit关闭（三种方式执行任一即可）： </span><br><span class="line">set autocommit = 0;</span><br><span class="line">start transaction;</span><br><span class="line">begin;</span><br><span class="line"></span><br><span class="line">-- 会话0</span><br><span class="line">insert into linelock(name) values(6,&#x27;a6&#x27;); -- 未提交，数据在缓存</span><br><span class="line">-- 会话1</span><br><span class="line">update linelock set name=&#x27;ax&#x27; where id=6; -- 更新时发现此数据被加锁了，直到其他会话释放锁（即commit/rollback）后才能操作。</span><br><span class="line"></span><br><span class="line">-- 操作不同数据  两者互不干扰</span><br><span class="line">insert into linelock(name) values(8,&#x27;a8&#x27;);</span><br><span class="line">update linelock set name=&#x27;ax&#x27; where id=5;  </span><br></pre></td></tr></table></figure><blockquote><p>表锁通过unlock tables或事务解锁，行锁通过事务解锁</p></blockquote><p>行锁注意事项：</p><ul><li>sql没有使用索引，行锁转表锁。</li><li>行锁特殊情况：间隙锁（值在范围内，但不存在该值）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- linelock表中没有id=7的数据</span><br><span class="line">update linelock set name =&#x27;x&#x27; where id&lt;1 and id&lt;9; -- 此范围中，没有id=7的数据，则id=7成为间隙</span><br><span class="line">-- mysql会自动给间隙加锁 称间隙锁。</span><br><span class="line">-- 其他会话操作间隙时会被锁住。</span><br><span class="line">-- 行锁:如果有where，则实际加锁的范围就是where后面的范围（不是实际的值)</span><br></pre></td></tr></table></figure><p>行锁分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查看</span><br><span class="line">show status like &#x27;%innodb_row_lock%&#x27;;  </span><br><span class="line">-- 参数</span><br><span class="line">-- Innodb_row_lock——current_waits：当前正在等待锁的数量</span><br><span class="line">-- Innodb_row_lock_time：等待总时长。从系统启到现在一共等待的时间</span><br><span class="line">-- Innodb_row_lock_time_avg：平均等待时长。从系统启到现在平均等待的时间</span><br><span class="line">-- Innodb_row_lock_time_max：最大等待时长。从系统启到现在最大一次等待的时间</span><br><span class="line">-- Innodb_row_lock_waits：等待次数。</span><br></pre></td></tr></table></figure><blockquote><p>可以通过在sql后加 <strong>for update</strong> 对query语句进行加锁。</p><p>如：select * from linelock where id =2 for update ;</p></blockquote><ul><li><strong>页锁</strong>：</li></ul>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql异常捕获</title>
      <link href="/aiyblog/2021/04/24/sql/mysql%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/"/>
      <url>/aiyblog/2021/04/24/sql/mysql%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li>表与数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `alias`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `alias` (</span><br><span class="line">  `alias_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `alias_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_croatian_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`alias_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_croatian_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of alias</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;xiaoai&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;filegw&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;romavi&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;livedata&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;apigw&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;liveapp&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;sns&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account_group`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_group` (</span><br><span class="line">  `account_group_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `alias_id` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `account_group_code` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_croatian_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `account_group_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_croatian_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `account_group_by` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_croatian_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `modify_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`account_group_id`),</span><br><span class="line">  KEY `fk_aliasid` (`alias_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_aliasid` <span class="keyword">FOREIGN</span> KEY (`alias_id`) <span class="keyword">REFERENCES</span> `alias` (`alias_id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">14</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_croatian_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of account_group</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;filegw&#x27;</span>, <span class="string">&#x27;fgroup1&#x27;</span>, <span class="string">&#x27;fwx1068943&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;apigw&#x27;</span>, <span class="string">&#x27;vigroup&#x27;</span>, <span class="string">&#x27;xiaoai&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;apigw&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;liveapp&#x27;</span>, <span class="string">&#x27;111xia&#x27;</span>, <span class="string">&#x27;asdfa&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;liveapp&#x27;</span>, <span class="string">&#x27;wangsiw&#x27;</span>, <span class="string">&#x27;gaaada&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;xiaoai&#x27;</span>, <span class="string">&#x27;lisigroup&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;romavi&#x27;</span>, <span class="string">&#x27;wangqi&#x27;</span>, <span class="string">&#x27;asdf&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;romavi&#x27;</span>, <span class="string">&#x27;qiqiang&#x27;</span>, <span class="string">&#x27;qiqiqi&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;romavi&#x27;</span>, <span class="string">&#x27;zhangsss&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;xiaoai&#x27;</span>, <span class="string">&#x27;lisisisi&#x27;</span>, <span class="string">&#x27;sili&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;sns&#x27;</span>, <span class="string">&#x27;zhaoqiangsun&#x27;</span>, <span class="string">&#x27;sualoi&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account_group` <span class="keyword">VALUES</span> (<span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;romavi&#x27;</span>, <span class="string">&#x27;xiaowangpooo&#x27;</span>, <span class="string">&#x27;323423&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>, <span class="string">&#x27;2021-09-23 23:03:20&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>重复插入数据，发生异常</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 存储过程，创造异常</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> duplicate_teams(<span class="keyword">out</span> p_processed <span class="type">smallint</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> p_processed<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `alias` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;xiaoai&#x27;</span>);</span><br><span class="line"><span class="keyword">set</span> p_processed<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><ul><li>处理格式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式</span></span><br><span class="line"><span class="keyword">DECLARE</span> handler_action HANDLER</span><br><span class="line"><span class="keyword">FOR</span> condition_value [, condition_value] ...</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">异常操作...</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 选项</span></span><br><span class="line"><span class="comment">-- handler_action:</span></span><br><span class="line">CONTINUE：继续执行当前的程序(接着执行出错的<span class="keyword">SQL</span>的下一条语句)；</span><br><span class="line">EXIT：当前程序终止(退出当前<span class="keyword">declare</span>所在的<span class="keyword">begin</span> <span class="keyword">end</span>)；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- condition_value:</span></span><br><span class="line">mysql_error_code</span><br><span class="line"><span class="keyword">SQLSTATE</span> [<span class="keyword">VALUE</span>] sqlstate_value</span><br><span class="line">condition_name</span><br><span class="line"><span class="keyword">SQLWARNING</span></span><br><span class="line"><span class="keyword">NOT</span> FOUND</span><br><span class="line"><span class="keyword">SQLEXCEPTION</span></span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过alias_id对应，批量替换account_group表account_group_code字段数据为alias表alias_name字段数据</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> batch_update_account_group_code;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> batch_update_account_group_code()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> alias_id <span class="type">int</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">declare</span> alias_name <span class="type">varchar</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">declare</span> account_group_id <span class="type">int</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">declare</span> account_group_code <span class="type">varchar</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">declare</span> done <span class="type">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">declare</span> v_code <span class="type">varchar</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">declare</span> v_msg TEXT;</span><br><span class="line">    <span class="keyword">declare</span> v_status <span class="type">varchar</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">declare</span> v_result TEXT;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义游标</span></span><br><span class="line"><span class="keyword">declare</span> ags_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> ag.alias_id,ag.account_group_id <span class="keyword">from</span> account_group ag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> continue handler <span class="keyword">for</span> <span class="keyword">not</span> found <span class="keyword">set</span> done <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 异常处理</span></span><br><span class="line"><span class="keyword">DECLARE</span> exit HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLEXCEPTION</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">get</span> DIAGNOSTICS <span class="keyword">CONDITION</span> <span class="number">1</span></span><br><span class="line">v_code <span class="operator">=</span> MYSQL_ERRNO,v_msg <span class="operator">=</span> MESSAGE_TEXT;</span><br><span class="line"><span class="keyword">SET</span> v_result <span class="operator">=</span> CONCAT(<span class="string">&#x27;error:&#x27;</span>,v_code,<span class="string">&#x27; msg:&#x27;</span>,v_msg);</span><br><span class="line"><span class="keyword">SET</span> v_status <span class="operator">=</span> <span class="string">&#x27;EXCEPTION&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> v_status,v_result;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> ags_cursor;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取数据</span></span><br><span class="line">  ags_loop:LOOP</span><br><span class="line"><span class="keyword">fetch</span> ags_cursor <span class="keyword">into</span> alias_id,account_group_id; </span><br><span class="line">if done <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> </span><br><span class="line">leave ags_loop;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">select</span> a.alias_name <span class="keyword">into</span> alias_name <span class="keyword">from</span> alias a <span class="keyword">where</span> a.alias_id <span class="operator">=</span> alias_id;</span><br><span class="line"><span class="keyword">update</span> account_group ag <span class="keyword">set</span> ag.account_group_code <span class="operator">=</span> alias_name <span class="keyword">where</span> ag.account_group_id <span class="operator">=</span> account_group_id; </span><br><span class="line"><span class="keyword">end</span> LOOP;</span><br><span class="line"><span class="keyword">close</span> ags_cursor;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oracle基础</title>
      <link href="/aiyblog/2021/04/24/sql/oracle%E5%9F%BA%E7%A1%80/"/>
      <url>/aiyblog/2021/04/24/sql/oracle%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Oracle基础"><a href="#Oracle基础" class="headerlink" title="Oracle基础"></a>Oracle基础</h2><h3 id="单行函数："><a href="#单行函数：" class="headerlink" title="单行函数："></a>单行函数：</h3><p>作用于一行，返回一个值</p><ul><li>字符函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(&quot;yse&quot;) <span class="keyword">from</span> dual;<span class="comment">--结果：YES</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(&quot;YES&quot;) <span class="keyword">from</span> dual;<span class="comment">--结果：yse</span></span><br></pre></td></tr></table></figure><ul><li>数值函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="number">26.18</span>,<span class="number">1</span>) <span class="keyword">from</span> dual; <span class="comment">--四舍五入，后面参数表示保留的小数， 整数==往后保留，负数==往前保留</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="number">56.16</span>,<span class="number">1</span>) <span class="keyword">from</span> dual; <span class="comment">--直接截取，不再看后面位数是否大于5</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">10</span>,<span class="number">3</span>) <span class="keyword">from</span> dual; <span class="comment">--求模(取余) 结果：1</span></span><br></pre></td></tr></table></figure><ul><li>日期函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询出emp表中所有员工入职距离现在几天</span></span><br><span class="line"><span class="keyword">select</span> sysdate<span class="operator">-</span>e.hiredate </span><br><span class="line"><span class="keyword">from</span> emp e;<span class="comment">--sysdate==当前系统时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--算出明天此刻</span></span><br><span class="line"><span class="keyword">select</span> sysdate<span class="operator">+</span><span class="number">1</span> </span><br><span class="line"><span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出emp表中所有员工入职距离现在几月</span></span><br><span class="line"><span class="keyword">select</span> months<span class="operator">-</span><span class="keyword">between</span>(sysdate,e.hiredate) </span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出emp表中所有员工入职距离现在几年</span></span><br><span class="line"><span class="keyword">select</span> months<span class="operator">-</span><span class="keyword">between</span>(sysdate,e.hiredate)<span class="operator">/</span><span class="number">12</span> </span><br><span class="line"><span class="keyword">from</span> emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询出emp表中所有员工入职距离现在几周</span></span><br><span class="line"><span class="keyword">select</span> round((sysdate<span class="operator">-</span>e.hiredate)<span class="operator">/</span><span class="number">7</span>) </span><br><span class="line"><span class="keyword">from</span> emp e;round()<span class="operator">=</span><span class="operator">=</span>四舍五入函数</span><br></pre></td></tr></table></figure><ul><li>转换函数    </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--时间转字符串格式</span></span><br><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;fm yyyy-mm-dd hh24:mi:ss&#x27;</span>) </span><br><span class="line"><span class="keyword">from</span> dual;  fm<span class="operator">=</span><span class="operator">=</span>时分秒前不加<span class="number">0</span> <span class="number">24</span><span class="operator">=</span><span class="operator">=</span><span class="number">24</span>小时制</span><br><span class="line"></span><br><span class="line"><span class="comment">--字符串转日期</span></span><br><span class="line"><span class="keyword">select</span> to_char(<span class="string">&#x27;2020-7-13 22:41:21&#x27;</span>,<span class="string">&#x27;fm yyyy-mm-dd hh24:mi:ss&#x27;</span>) </span><br><span class="line"><span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><ul><li>通用函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 算出emp表中所有员工的年薪</span></span><br><span class="line"><span class="comment">--sal=月薪字段 e=emp的别名 comm=一年的奖金</span></span><br><span class="line"><span class="keyword">select</span> e.sal<span class="operator">*</span><span class="number">12</span><span class="operator">+</span>e.comm</span><br><span class="line"><span class="keyword">from</span> emp e; </span><br><span class="line"></span><br><span class="line"><span class="comment">--奖金里面有null时，null值和任意数字做算数运算，结果都是null</span></span><br><span class="line"><span class="comment">--解决：nvl()函数:如果值为null用0代替</span></span><br><span class="line"><span class="keyword">select</span> e.sal<span class="operator">*</span><span class="number">12</span><span class="operator">+</span>nvl(e.comm,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">from</span> emp e;</span><br></pre></td></tr></table></figure><h3 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h3><p>作用于多行，返回一个值</p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">count(1)</td><td align="left">查询总数量，<br/>1= * 表示主键即所有</td></tr><tr><td align="left">sum(‘字段’)</td><td align="left">求和</td></tr><tr><td align="left">max(‘字段’)</td><td align="left">最大值</td></tr><tr><td align="left">min(‘字段’)</td><td align="left">最小值</td></tr><tr><td align="left">avg(‘字段’)</td><td align="left">平均值</td></tr></tbody></table><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询出每个部门的平均工资</span></span><br><span class="line"><span class="keyword">select</span> e.deptno, <span class="built_in">avg</span>(e.sal) <span class="comment">--如果加这段：,e.ename 则报错</span></span><br><span class="line"><span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.deptno</span><br></pre></td></tr></table></figure><ul><li>分组查询中，出现在group by后面的原始列，才能出现在select后面</li><li>没有出现在group by后的列，想在select后面出现，必须加上聚合函数</li><li>聚合函数有一个特性，可以把多行记录变成一个值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询出平均工资高于2000的部门信息</span></span><br><span class="line"><span class="keyword">select</span> e.deptno, <span class="built_in">avg</span>(e.sal) asal  <span class="comment">--如果加这段及haveing后面用asal来判断则报错</span></span><br><span class="line"><span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.deptno</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(e.sal)<span class="operator">&gt;</span><span class="number">2000</span>;</span><br></pre></td></tr></table></figure><ul><li>所有条件都不能使用别名来判断。</li></ul><blockquote><p>如：select ename,sal s from emp where s&gt;1500; –会报错，s别名不能用来判断</p></blockquote><p><strong>where和having的区别</strong></p><ul><li>where是过滤分组前的数据，having是过滤后的数据</li><li>表现形式：where 必须是在group by之前，having是在group by之后</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询返回一个值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询工资和员工SCOTT一样的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> sal <span class="operator">=</span> (<span class="comment">-- 由于ename字段不是主键，姓名为&#x27;SCOTT&#x27;的数据可能不止一条，所以上面用等号有时会有问题 解决：用in代替等号即可</span></span><br><span class="line">    <span class="keyword">select</span> sal </span><br><span class="line">    <span class="keyword">from</span> emp </span><br><span class="line">    <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>子查询返回一个集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询出工资和10号部门任意员工一样的员工信息</span><br><span class="line">select * </span><br><span class="line">from emp </span><br><span class="line">where sal in (</span><br><span class="line">    select sal </span><br><span class="line">    from emp </span><br><span class="line">    where deptno = 10;</span><br><span class="line">) -- deptno==部门编号</span><br></pre></td></tr></table></figure><p>子查询返回一张表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询出每个部门最低工资，和最低工资员工姓名，和该员工所在部门名称</span></span><br><span class="line"><span class="comment">-- 三表联查，得到最终结果</span></span><br><span class="line"><span class="keyword">select</span> t.deptno ,t.msal,e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> deptno <span class="built_in">min</span>(sal) msal <span class="comment">--1-先查询每个部门最低工资 msal==最小工资字段别名</span></span><br><span class="line">    <span class="keyword">from</span> emp</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br><span class="line">) t,emp e,dept d</span><br><span class="line"><span class="keyword">where</span> t.deptno <span class="operator">=</span> e.deptno <span class="keyword">and</span> t.msal <span class="operator">=</span> e.sal <span class="keyword">and</span> e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure><h3 id="oracle分页"><a href="#oracle分页" class="headerlink" title="oracle分页"></a>oracle分页</h3><p>rownum行号：当我们做select操作的时候，每查询出一行记录，就会在该行上加一个行号，行号从1开始，依次递增，不能跳着走</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例：emp表工资倒叙排序后，每页五条记录，查询第二页</span></span><br><span class="line"><span class="comment">-- 第二页即：行号为6-10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 说明：排序操作会影响rownum的顺序 如：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">where</span> rownum <span class="operator">&lt;</span> <span class="number">4</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> e.sal <span class="keyword">desc</span>; <span class="comment">--查询排序后的前三条</span></span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line"><span class="keyword">select</span> rownum,t.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> e.sal <span class="keyword">desc</span></span><br><span class="line">) t </span><br><span class="line"><span class="keyword">where</span> rownum<span class="operator">&lt;</span><span class="number">4</span>;  <span class="comment">-- 先排序再加行号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 说明：rownum行号不能使用大于&gt;</span></span><br><span class="line"><span class="keyword">select</span> rownum,e.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"> <span class="keyword">from</span> emp e </span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> e.sal <span class="keyword">desc</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">where</span> rownum<span class="operator">&lt;</span><span class="number">11</span> <span class="keyword">and</span> rownum<span class="operator">&gt;</span><span class="number">5</span> <span class="comment">-- 查询无数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正确分页查询语句：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> rownum rn,tt.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span></span><br><span class="line">    ) tt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> e.sal <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">where</span> rownum<span class="operator">&lt;</span><span class="number">11</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">&gt;</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>概念：视图就是提供一个查询的窗口，所有数据来自于原表</p><p>视图的作用：</p><ul><li>视图可以屏蔽掉一些敏感字段。</li><li>保证总部和分部数据及时统一。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询语句创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> scott.emp; <span class="comment">--scott==用户名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建视图[必须有dba权限]</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> ename,job </span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询视图</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改视图(不推荐)</span></span><br><span class="line"><span class="keyword">update</span> v_emp </span><br><span class="line"><span class="keyword">set</span> job<span class="operator">=</span><span class="string">&#x27;CLERK&#x27;</span></span><br><span class="line"><span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;ALLEN&#x27;</span>;<span class="comment">--原表数据也被修改</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建只读视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_emp1 </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> ename,job </span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">with</span> read <span class="keyword">only</span>;<span class="comment">--无法修改</span></span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>概念：索引就是在表的列上构建一个二叉树。达到大幅度提高查询效率的目的，但是索引会影响增删改的效率</p><p><strong>单列索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建单列索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_ename <span class="keyword">on</span> emp(ename);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 触发规则：条件必须是索引列中的原始值。</span></span><br><span class="line"><span class="comment">-- 单行函数，模糊查询 都会影响索引的触发</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>复合索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建复合索引</span></span><br><span class="line"><span class="keyword">create</span> index idx_enamejob <span class="keyword">on</span> emp(ename,job);</span><br><span class="line"></span><br><span class="line"><span class="comment">--触发规则：复合索引中第一列为优先检索列。如果要触发复合索引，必须包含有优先检索列中的原始值</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span> <span class="keyword">and</span> job<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>; <span class="comment">--会触发复合索引，有优先检索列ename=&#x27;SCOTT&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span> <span class="keyword">or</span> job<span class="operator">=</span><span class="string">&#x27;xxx&#x27;</span>;  <span class="comment">--不触发索引。相当于两个语句，一个触发一个不触发即不触发。</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span>;  <span class="comment">--触发的是单列索引，既有单列也有复合，但查询为单列</span></span><br></pre></td></tr></table></figure><h3 id="pl-sql编程语言"><a href="#pl-sql编程语言" class="headerlink" title="pl/sql编程语言"></a>pl/sql编程语言</h3><ul><li>是对sql语言的扩展，是sql语言具有过程化编程的特性。</li><li>比一般的过程化编程语言更灵活高效。</li><li>主要用来编写存储过程和存储函数等。</li></ul><p><strong>声明方法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="comment">--定义一个数字变量i赋值为10</span></span><br><span class="line">i number(<span class="number">2</span>) :<span class="operator">=</span> <span class="number">10</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">--定义字符串变量s赋值为小明</span></span><br><span class="line">s varchar2(<span class="number">10</span>) :<span class="operator">=</span> <span class="string">&#x27;小明&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">--引用型变量，定义一个emp表中ename字段类型的变量ena</span></span><br><span class="line">ena emp.ename<span class="operator">%</span>type; </span><br><span class="line"></span><br><span class="line"><span class="comment">--记录型变量，定义一个存emp表中一行记录的变量，相当于一个对象</span></span><br><span class="line">emprow emp<span class="operator">%</span>rowtype; </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">dbms_output.put_line(i); <span class="comment">--输出变量i 结果：10</span></span><br><span class="line">dbms_output.put_line(s); <span class="comment">--输出变量s 结果：小明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">into</span> ena </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> empno<span class="operator">=</span><span class="number">7788</span>; <span class="comment">--从emp表中查询一个姓名赋值给变量ena</span></span><br><span class="line">dbms_output.put_line(ena); <span class="comment">--输出变量ena</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> emprow </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> empno<span class="operator">=</span><span class="number">7788</span>;</span><br><span class="line">dbms_output.put_line(emprow.ename <span class="operator">||</span><span class="string">&#x27;的工作为：&#x27;</span><span class="operator">||</span> emprow.job); <span class="comment">--结果例如==SCOTT的工作为：ANALYST</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--总结：</span></span><br><span class="line">赋值操作可以用【:<span class="operator">=</span>】也可以用【<span class="keyword">into</span>查询语句】赋值</span><br></pre></td></tr></table></figure><h3 id="流程结构："><a href="#流程结构：" class="headerlink" title="流程结构："></a>流程结构：</h3><p>if判断：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--输入小于18的数字，输出未成年；输入大于18小于40数字，输出中年人；输入大于40的数字，输出老年人</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">i number(<span class="number">3</span>) :<span class="operator">=</span> <span class="operator">&amp;</span>ii; <span class="comment">--输入一个数值类型的数据并赋值给i</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">if i<span class="operator">&lt;</span><span class="number">18</span> <span class="keyword">then</span></span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;未成年&#x27;</span>);</span><br><span class="line">elsif i<span class="operator">&lt;</span><span class="number">40</span> <span class="keyword">then</span></span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;中年人&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dbms_output.put_line(<span class="string">&#x27;老年人&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>loop循环:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--用三种方式输出1-10</span></span><br><span class="line"><span class="comment">-------------------------------------------while循环</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">i number(<span class="number">2</span>) :<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">while i<span class="operator">&lt;</span><span class="number">11</span> loop</span><br><span class="line">dbms_output.put_line(i);</span><br><span class="line">i :<span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-------------------------------------------exit循环</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">i number(<span class="number">2</span>) :<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">loop</span><br><span class="line">exit <span class="keyword">when</span> i<span class="operator">&gt;</span><span class="number">10</span>;</span><br><span class="line">dbms_output.put_line(i);</span><br><span class="line">i :<span class="operator">=</span> i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-------------------------------------------for循环</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> loop</span><br><span class="line">dbms_output.put_line(i);</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>概念：可以存放多个对象，多行记录，相对于集合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 输出emp表中所有员工的姓名及工作</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">cursor</span> c1 <span class="keyword">is</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> emp; <span class="comment">--定义了一个游标c1，并把emp表中所有数据存入了游标</span></span><br><span class="line"></span><br><span class="line">emprow emp<span class="operator">%</span>rowtype; <span class="comment">--记录型变量，定义一个存emp表中一行记录的变量，相当于一个对象</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">open</span> c1;<span class="comment">--打开游标</span></span><br><span class="line">loop</span><br><span class="line"><span class="keyword">fetch</span> c1 <span class="keyword">into</span> emprow; <span class="comment">--把emp一行数据复制给变量emprow</span></span><br><span class="line">exit <span class="keyword">when</span> c1<span class="operator">%</span>notfound; <span class="comment">--当游标找不到数据即最后一行时退出循环</span></span><br><span class="line">dbms_output.put_line(emprow.ename <span class="operator">||</span><span class="string">&#x27;--&#x27;</span><span class="operator">||</span> emprow.job);</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">close</span> c1;<span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--给指定部门员工涨工资</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">cursor</span> c2(eno emp.deptno<span class="operator">%</span>type) <span class="keyword">is</span> </span><br><span class="line"><span class="keyword">select</span> empno </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> deptno<span class="operator">=</span>eno; <span class="comment">--定义了一个游标并需要传入一个参数eno</span></span><br><span class="line"></span><br><span class="line">en emp.empno<span class="operator">%</span>type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">open</span> c2(<span class="number">10</span>);<span class="comment">--打开游标并传入参数10</span></span><br><span class="line">loop</span><br><span class="line"><span class="keyword">fetch</span> c2 <span class="keyword">into</span> en;</span><br><span class="line">exit <span class="keyword">when</span> c2<span class="operator">%</span>notfound;</span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal<span class="operator">+</span><span class="number">100</span> <span class="keyword">where</span> empno <span class="operator">=</span> en;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line">cloce c2;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>概念：存储过程就是提取已经编译好的一段pl/sql语言，放置在数据库端,可以直接被调用，这一段pl/sql一般都是固定步骤的业务。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建存储过程语法： </span></span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> replace] PROCEDUER 过程名[参数名 <span class="keyword">in</span><span class="operator">/</span><span class="keyword">out</span> 数据类型...]</span><br><span class="line"><span class="keyword">AS</span> 或 <span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">plsql子程序体;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例：给指定员工涨100块钱</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> pl(eno emp.empno<span class="operator">%</span>type) <span class="comment">--or replace表示如果已经存在该存储过程仍可以正常执行</span></span><br><span class="line"><span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> sal <span class="operator">=</span> sal<span class="operator">+</span><span class="number">100</span> <span class="keyword">where</span> empno <span class="operator">=</span> eno;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--测试存储过程p1</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">pl(<span class="number">7788</span>); <span class="comment">--结果：员工编号为7788的员工工资涨100</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><strong>out类型参数如何使用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--使用存储过程来算年薪</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> p_yearsal(eno emp.empno<span class="operator">%</span>type,yearsal <span class="keyword">out</span> number) <span class="comment">--yearsal out number表示yearsal参数为输出参数</span></span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">s number(<span class="number">10</span>); <span class="comment">--存放工资</span></span><br><span class="line">c emp.comm<span class="operator">%</span>type; <span class="comment">--存放奖金</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> sal<span class="operator">*</span><span class="number">12</span>,nvl(comm,<span class="number">0</span>) <span class="keyword">into</span> s,c </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> empno<span class="operator">=</span>eno;</span><br><span class="line">yearsal :<span class="operator">=</span> s<span class="operator">+</span>c;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--测试存储过程p_yearsal</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">yearsal number(<span class="number">10</span>); <span class="comment">--定义变量放入存储过程改变其值</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">p_yearsal(<span class="number">7788</span>,yearsal); <span class="comment">--yearsal的值在存储过程内被改变</span></span><br><span class="line">dbms_output.put_line(yearsal); <span class="comment">--结果：输出员工编号为7788的员工的年薪</span></span><br><span class="line">en</span><br></pre></td></tr></table></figure><blockquote><p>in和out类型参数的区别：凡是涉及到into查询语句赋值或 := 赋值操作的参数，都必须使用out来修饰 否则其余都用in</p></blockquote><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><p>与存储过程区别：</p><ul><li>存储函数可以有一个返回值，而存储过程没有</li><li>存储过程和存储函数的参数都不能带长度</li><li>存储函数的返回值类型不能带长度</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--通过存储函数实现计算指定员工的年薪</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> f_yearsal(eno emp.empno<span class="operator">%</span>type) <span class="keyword">return</span> number <span class="comment">--这里参数和返回值类型不能带长度</span></span><br><span class="line"><span class="keyword">is</span></span><br><span class="line">s number(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> sal<span class="operator">*</span><span class="number">12</span><span class="operator">+</span>nvl(comm,<span class="number">0</span>) <span class="keyword">into</span> s </span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line">    <span class="keyword">where</span> empno <span class="operator">=</span> eno;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--测试存储函数f_yearsal</span></span><br><span class="line"><span class="comment">--存储函数在调用的时候，返回值需要接收，不接受会报错</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">sal_year number(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">sal_year :<span class="operator">=</span> f_yearsal(<span class="number">7788</span>); </span><br><span class="line">dbms_output.put_line(sal_year);<span class="comment">--结果：输出员工编号为7788的员工的年薪</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p><strong>存储过程和存储函数的区别：</strong></p><ul><li>语法：<ul><li>关键字不一样</li><li>存储函数比存储过程多了两个return</li></ul></li><li>本质区别：<ul><li>存储函数有返回值，二存储过程没有返回值</li><li>如果存储过程想实现有返回值的业务，我们就必须使用out类型的参数</li><li>即便是存储过程使用out类型的参数，其本质也不是真的有了返回值</li><li>而是在存储过程内部给out类型参数赋值，在执行完毕后，我们直接拿到输出类型参数的值。</li></ul></li></ul><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>制定一个规则，在【增删改】操作的时候，只要满足该规则，自动触发，无需调用。</p><ul><li>语句级触发器：不包含有for each row的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例:插入一条记录，输出&#x27;创建xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建一个触发器t1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> t1</span><br><span class="line">after <span class="comment">--语句执行前还是后执行该触发器</span></span><br><span class="line"><span class="keyword">insert</span><span class="comment">--执行什么语句会触发</span></span><br><span class="line"><span class="keyword">on</span> person<span class="comment">--作用哪个表的触发器</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(<span class="string">&#x27;创建了一个person&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--触发t1</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(pid, name, gender, birthday) <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">1</span>, to_date(<span class="string">&#x27;2020-7-17&#x27;</span>, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li><p>行级触发器：</p><p>包含有for each row的就是行级触发器。</p><p>加for each row是为了使用 :old 或者 :new 对象获取一行记录</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例：不能给员工降薪</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> t2</span><br><span class="line">before</span><br><span class="line">updater</span><br><span class="line"><span class="keyword">on</span> emp</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> <span class="comment">--表示行级触发器</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">if :old.sal <span class="operator">&gt;</span> :new.sal <span class="keyword">then</span></span><br><span class="line"><span class="comment">-- 抛出一个异常raise_application_error(-20001~-20999之间,&#x27;错误提示信息&#x27;);</span></span><br><span class="line">raise_application_error(<span class="number">-20001</span>,<span class="string">&#x27;不能给员工降薪&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例：使用触发器实现主键自增</span></span><br><span class="line"><span class="comment">--分析：在用户插入操作之前，拿到即将插入的数据，给该数据中的主键列赋值，使用该功能用到行级触发器</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">trigger</span> auid</span><br><span class="line">before</span><br><span class="line"><span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> person</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> s_id_person.nextval <span class="keyword">into</span> :new.pid <span class="keyword">from</span> dual;</span><br><span class="line"><span class="comment">--s_person 自定义序列号名字 </span></span><br><span class="line"><span class="comment">--nextval 取序列的下一个值 </span></span><br><span class="line"><span class="comment">--dual 是oracle的bai虚拟表du,不是真实存在的</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="java调用存储过程或存储函数"><a href="#java调用存储过程或存储函数" class="headerlink" title="java调用存储过程或存储函数"></a>java调用存储过程或存储函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--需要jar包</span><br><span class="line">oracle10g == ojdbc14.jar</span><br><span class="line">oracle11g == ojdbc6.jar</span><br><span class="line">--需要接口</span><br><span class="line">CallableStatement</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleDemo</span> &#123;</span><br><span class="line"><span class="comment">//测试连接oracl数据库</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">javaCallOracle</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//加载数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line"><span class="comment">//得到Connection连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:oracle:thin:@192.168.88.6:1521:orcl&quot;</span>,</span><br><span class="line"><span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment">//得到预编译的Statement对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">&quot;select * from emp where empno = ?&quot;</span>);</span><br><span class="line"><span class="comment">//给参数赋值</span></span><br><span class="line">pstm.setObject(<span class="number">1</span>, <span class="number">7788</span>);</span><br><span class="line"><span class="comment">//执行数据库查询操作</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstm.executeQuery();</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">System.out.println(rs.getString(<span class="string">&quot;ename&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">pstm.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java调用存储过程</span></span><br><span class="line"><span class="comment"> * &#123;?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   调用存储函数使用</span></span><br><span class="line"><span class="comment"> * &#123;call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   调用存储过程使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">javaCallProcedure</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//加载数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line"><span class="comment">//得到Connection连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:oracle:thin:@192.168.88.6:1521:orcl&quot;</span>,</span><br><span class="line"><span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment">//得到预编译的Statement对象</span></span><br><span class="line"><span class="type">CallableStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> connection.prepareCall(<span class="string">&quot;&#123;call p_yearsal(?, ?)&#125;&quot;</span>);<span class="comment">//call p_yearsal(?, ?)为存储过程，带两个参数</span></span><br><span class="line"><span class="comment">//给参数赋值</span></span><br><span class="line">pstm.setObject(<span class="number">1</span>, <span class="number">7788</span>);<span class="comment">//第一个参数,查询的id</span></span><br><span class="line">pstm.registerOutParameter(<span class="number">2</span>, OracleTypes.NUMBER);<span class="comment">//无返回值，第二参数表示输出类型的参数==员工年薪</span></span><br><span class="line"><span class="comment">//执行数据库查询操作</span></span><br><span class="line">pstm.execute();</span><br><span class="line"><span class="comment">//输出结果[第二个参数]</span></span><br><span class="line">System.out.println(pstm.getObject(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">pstm.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java调用存储函数</span></span><br><span class="line"><span class="comment"> * &#123;?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   调用存储函数使用</span></span><br><span class="line"><span class="comment"> * &#123;call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   调用存储过程使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">javaCallFunction</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//加载数据库驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line"><span class="comment">//得到Connection连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:oracle:thin:@192.168.88.6:1521:orcl&quot;</span>,</span><br><span class="line">                                                            <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                                                            <span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment">//得到预编译的Statement对象</span></span><br><span class="line"><span class="type">CallableStatement</span> <span class="variable">pstm</span> <span class="operator">=</span> connection.prepareCall(<span class="string">&quot;&#123;?= call f_yearsal(?)&#125;&quot;</span>);</span><br><span class="line"><span class="comment">//给参数赋值</span></span><br><span class="line">pstm.setObject(<span class="number">2</span>, <span class="number">7788</span>);  <span class="comment">//第二个？表示存储函数参数==查询的id</span></span><br><span class="line">pstm.registerOutParameter(<span class="number">1</span>, OracleTypes.NUMBER);<span class="comment">//第一？表示存储函数返回值</span></span><br><span class="line"><span class="comment">//执行数据库查询操作</span></span><br><span class="line">pstm.execute();</span><br><span class="line"><span class="comment">//输出结果[第一个参数]</span></span><br><span class="line">System.out.println(pstm.getObject(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">pstm.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql-3-视图、存储过程、存储函数</title>
      <link href="/aiyblog/2021/04/24/sql/mysql-3-%E8%A7%86%E5%9B%BE%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E3%80%81%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0/"/>
      <url>/aiyblog/2021/04/24/sql/mysql-3-%E8%A7%86%E5%9B%BE%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E3%80%81%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>虚拟表，和普通表一样使用  mysql5.1出现新特性</li><li>通过 表动态生成的数据。</li><li>只保存sql逻辑，不保存查询结果，但视图可以当成表使用</li></ul><p><strong>创建视图</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 例：查询姓张的学生名和专业名</span><br><span class="line"># 创建视图  即保存学生和专业名连接后的表</span><br><span class="line">create view v1</span><br><span class="line">as</span><br><span class="line">select stuname,majorname</span><br><span class="line">from stuinfo s</span><br><span class="line">inner join major m on s.&#x27;majorid&#x27; = m.&#x27;id&#x27;;</span><br><span class="line"></span><br><span class="line"># 使用视图</span><br><span class="line">select * </span><br><span class="line">from v1</span><br><span class="line">where stuname like &#x27;张%&#x27;</span><br></pre></td></tr></table></figure><p><strong>视图好处</strong>：</p><ul><li>重用sql语句</li><li>简化复杂sql操作，不必知道查询细节</li><li>保护数据，提高安全性</li></ul><blockquote><p>视图相当于中间表</p></blockquote><p><strong>查看视图</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line">desc 视图名</span><br><span class="line"></span><br><span class="line"># 2</span><br><span class="line">show create view 视图名</span><br></pre></td></tr></table></figure><p><strong>修改视图</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 方式一</span><br><span class="line">create or replace view 视图名</span><br><span class="line">as</span><br><span class="line">新查询语句</span><br><span class="line"></span><br><span class="line"># 方式二</span><br><span class="line">alter view 视图名</span><br><span class="line">as</span><br><span class="line">新查询语句</span><br></pre></td></tr></table></figure><p><strong>删除视图</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 一次删除多个视图</span><br><span class="line">drop view 视图名,视图名2,...;</span><br></pre></td></tr></table></figure><p><strong>视图更新</strong>：</p><p>和普通表类似，insert into … 、update  … set …. 、</p><p>具备以下条件，视图不允许更新：</p><ul><li><p>1–创建视图时sql包含xx关键字、…</p><pre><code>- 分组函数</code></pre><ul><li>distinct</li><li>group by </li><li>haveing</li><li>union或union all</li></ul></li><li><p>2–常量视图</p></li><li><p>3–select中包含子查询</p></li><li><p>4–join on  </p><pre><code>- 可更新不能插入</code></pre></li><li><p>5–from自一个不能更新的视图</p></li><li><p>6–where 字句的子查询引用了from 字句中的表。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select last_name,email,salary</span><br><span class="line">from empl</span><br><span class="line">where empl_id in(</span><br><span class="line">select manager_id</span><br><span class="line">from empl</span><br><span class="line">where manager_id is not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a><strong>分类</strong></h3><p><strong>系统变量：</strong>系统提供，属于服务器层面</p><ul><li><p>全局</p><pre><code>- 作用域：针对所有会话(连接)有效，但不能跨重启。服务器每次重启都会自动为全局变量赋初始值。可修改配置文件配置永久生效。</code></pre></li><li><p>会话</p><ul><li>作用域：仅仅针对当前会话有效</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 全局</span><br><span class="line">show global variables;</span><br><span class="line"></span><br><span class="line"># 会话</span><br><span class="line">show variables;</span><br><span class="line">show session variables;</span><br><span class="line"></span><br><span class="line"># 查看部分系统变量</span><br><span class="line">show global/[session] variables like &#x27;%关键字%&#x27;;</span><br><span class="line"></span><br><span class="line"># 查看某个系统变量的值</span><br><span class="line">select @@global/[session].系统变量名;</span><br><span class="line"></span><br><span class="line"># 修改系统变量值</span><br><span class="line">set global/[session] 系统变量名=值;  # 方式1</span><br><span class="line">set @@global/[session].系统变量名=值; # 方式2</span><br></pre></td></tr></table></figure><blockquote><p>不写默认是session</p></blockquote><p><strong>自定义变量</strong>：用户自定义</p><ul><li>用户：<pre><code>  - 作用域：针对当前会话连接有效，同会话变量作用域</code></pre></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 赋值符号：=或:=</span><br><span class="line"></span><br><span class="line"># 定义、赋值</span><br><span class="line">set @用户变量名 = 值;</span><br><span class="line">set @用户变量名 := 值;</span><br><span class="line">select @用户变量名 = 值;</span><br><span class="line"></span><br><span class="line"># 更新</span><br><span class="line">set @用户变量名 = 值;</span><br><span class="line">set @用户变量名 := 值;</span><br><span class="line">select @用户变量名 := 值;</span><br><span class="line"></span><br><span class="line">select 字段 into @变量名</span><br><span class="line">from 表;</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">select @变量名</span><br></pre></td></tr></table></figure><ul><li>局部：<pre><code>  - 作用域：仅仅在定义它的begin ... end中有效  - 只能放在begin ... end 中第一句</code></pre></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 定义</span><br><span class="line">declare 局部变量名 类型;</span><br><span class="line">declare 局部变量名 类型 default 值; # 设置默认值</span><br><span class="line"></span><br><span class="line"># 赋值</span><br><span class="line">set 局部变量名 = 值;</span><br><span class="line">set 局部变量名 := 值;</span><br><span class="line">select @局部变量名 := 值;</span><br><span class="line"></span><br><span class="line">select 字段 into @局部变量名</span><br><span class="line">from 表;</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">select 局部变量名</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 例：两数求和</span><br><span class="line">set @a = 2;</span><br><span class="line">set @b = 3;</span><br><span class="line">set @sum = @a + @b;</span><br><span class="line">select @sum;  // 5</span><br></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>类似java中方法，好处：</p><ul><li>提高代码重用性</li><li>简化操作</li></ul><p>含义：一组预先编译好的sql语句集合，理解成批处理语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 创建</span><br><span class="line">create procedure 存储过程名([参数列表])</span><br><span class="line">begin</span><br><span class="line">方法体;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">call 存储过程名([参数列表])</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">drop procedure 存储过程名</span><br><span class="line"></span><br><span class="line"># 查看存储过程结构</span><br><span class="line">show create procedure 存储过程名</span><br><span class="line"></span><br><span class="line"># 修改，很少修改无法修改逻辑，即当无法修改</span><br></pre></td></tr></table></figure><p>参数三部分</p><ul><li>参数模式 <ul><li>in   该参数可作为输入。(即：该参数需要调用方传入)</li><li>out   参数可作为输出。(即：该参数可作为返回值)</li><li>inout  该参数即可做输入也可做输出。(即：该参数既需要传入，也可以返回)</li></ul></li><li>参数名 </li><li>参数类型</li></ul><blockquote><p> 参数格式如：in stuname varchar(40)</p></blockquote><p><strong>说明：</strong></p><ul><li>存储过程仅一句话，begin .. end可省</li><li>存储过程中每条sql语句结尾必须加分号</li><li>存储过程的结尾：使用delimiter设置   语法：delimiter 结束标志</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 例:插入5条数据</span><br><span class="line">delimiter $</span><br><span class="line">create procedure myp1()</span><br><span class="line">begin</span><br><span class="line">insert into emp(ename,age,sex) </span><br><span class="line">values(&#x27;xiaoai1&#x27;,16,&#x27;nan&#x27;),(&#x27;xiaoai2&#x27;,14,&#x27;nan&#x27;),(&#x27;xiaoai3&#x27;,16,&#x27;nan&#x27;),</span><br><span class="line">(&#x27;xiaoai4&#x27;,26,&#x27;nan&#x27;),(&#x27;xiaoai5&#x27;,15,&#x27;nan&#x27;);</span><br><span class="line">end $</span><br><span class="line"></span><br><span class="line">call myp1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 例：根据传递的名称查询</span><br><span class="line">delimiter $</span><br><span class="line">create procedure myp2(in ename varchar(255))</span><br><span class="line">begin</span><br><span class="line">select * </span><br><span class="line">from emp</span><br><span class="line">where emp.ename = ename;</span><br><span class="line">end $</span><br><span class="line"></span><br><span class="line">call myp2(&#x27;xiaoai1&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 例：根据传递的名称查询,并通过参数返回总数</span><br><span class="line">delimiter $</span><br><span class="line">create procedure myp3(in ename varchar(255),out ecount varchar(255))</span><br><span class="line">begin</span><br><span class="line">select count(*) into ecount </span><br><span class="line">from emp</span><br><span class="line">where emp.ename like ename;</span><br><span class="line">end $</span><br><span class="line"></span><br><span class="line">call myp3(&#x27;%xiaoai%&#x27;,@ecount);</span><br><span class="line">select @ecount;</span><br></pre></td></tr></table></figure><h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><p>和存储过程类似</p><p><strong>区别：</strong></p><ul><li>存储过程可有0-多个返回。存储函数有且仅有一个返回，</li><li>存储过程适合批量插入、更新。存储函数适合处理数据后返回一个结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建</span><br><span class="line">create function 函数名([参数列表]) returns 返回类型</span><br><span class="line">begin</span><br><span class="line">函数体;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">select 函数名(参数列表)  # 执行完函数中的语句 显示返回的值</span><br></pre></td></tr></table></figure><blockquote><p>参数格式如：stuname varchar(40)</p></blockquote><p><strong>说明：</strong></p><ul><li>如果return语句没放在函数体最后也不报错，但不建议</li><li>使用delimiter语句设置结束标志</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 查询表中数据总数</span><br><span class="line">create function myfun1() returns int</span><br><span class="line">begin</span><br><span class="line">    # 定义变量</span><br><span class="line">declare c int default 0;</span><br><span class="line"></span><br><span class="line">    # 执行语句</span><br><span class="line">select count(*) into c # 赋值</span><br><span class="line">from emp;</span><br><span class="line"></span><br><span class="line">    # 返回</span><br><span class="line">return c;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">select myfun1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 两数求和</span><br><span class="line">delimiter $</span><br><span class="line">create function test_fun(num1 float,num2 float) returns float</span><br><span class="line">begin</span><br><span class="line">declare sum float default 0;</span><br><span class="line">set sum = num1+num2;</span><br><span class="line">return sum;</span><br><span class="line">end $</span><br><span class="line"></span><br><span class="line">select test_fun()$</span><br></pre></td></tr></table></figure><h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><ul><li>顺序：从上往下依次执行</li><li>分支：两条或多条路径中选择一条执行</li><li>循环：满足一定条件基础上，重复执行一段代码</li></ul><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a><strong>分支</strong></h3><p><strong>IF</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">if(表达式1,表达式2,表达式3)</span><br><span class="line"></span><br><span class="line"># 例</span><br><span class="line">#例：创建函数，实现传入成绩，如果成绩&gt;90,返回A，如果成绩&gt;80,返回B，如果成绩&gt;60,返回C，否则返回D</span><br><span class="line">CREATE FUNCTION test_if(score FLOAT) RETURNS CHAR</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE ch CHAR DEFAULT &#x27;A&#x27;;</span><br><span class="line"></span><br><span class="line">IF score&gt;90 THEN set ch=&#x27;A&#x27;;</span><br><span class="line">ELSEIF score&gt;80 THEN set ch=&#x27;B&#x27;;</span><br><span class="line">ELSEIF score&gt;60 THEN set ch=&#x27;C&#x27;;</span><br><span class="line">ELSE set ch=&#x27;D&#x27;;</span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line">RETURN ch;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_if(87)$</span><br></pre></td></tr></table></figure><p><strong>case</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">CASE 变量|表达式|字段</span><br><span class="line">WHEN 要判断的值 THEN返回的值1</span><br><span class="line">WHEN 要判断的值 THEN返回的值2</span><br><span class="line">ELSE 要返回的值n</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 例：创建存储函数，根据传入的成绩，来显示等级，比如传入的成绩:90-100，显示A，80-90，显示B，60-80，显示c，否则，显示D</span><br><span class="line">CREATE FUNCTION test_case(score FLOAT) RETURNS CHAR</span><br><span class="line">BEGIN </span><br><span class="line">DECLARE ch CHAR DEFAULT &#x27;A&#x27;;</span><br><span class="line"></span><br><span class="line">CASE </span><br><span class="line">WHEN score&gt;90 THEN set ch=&#x27;A&#x27;;</span><br><span class="line">WHEN score&gt;80 THEN set ch=&#x27;B&#x27;;</span><br><span class="line">WHEN score&gt;60 THEN set ch=&#x27;C&#x27;;</span><br><span class="line">ELSE set ch=&#x27;D&#x27;;</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line">RETURN ch;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">SELECT test_case(56)$</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><strong>while</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 语法</span><br><span class="line">【标签:】while 循环条件 do</span><br><span class="line">循环体;</span><br><span class="line">end while 【标签】;</span><br><span class="line"></span><br><span class="line"># 例：批量插入，根据次数插入到admin表中多条记录</span><br><span class="line">CREATE PROCEDURE pro_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line"></span><br><span class="line">WHILE i &lt;= insertCount DO</span><br><span class="line">insert into admin(`username`,`password`)</span><br><span class="line">values(CONCAT(&#x27;xiaoai&#x27;,i),&#x27;666&#x27;);</span><br><span class="line">set i=i+1;</span><br><span class="line">END WHILE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL pro_while1(100)$  # 调用</span><br></pre></td></tr></table></figure><p><strong>lopp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#　语法：</span><br><span class="line">[标签:]loop</span><br><span class="line">循环体;</span><br><span class="line">end loop [标签];</span><br><span class="line"></span><br><span class="line"># 例：</span><br><span class="line">drop procedure if exists test;          #如果存在test存储过程则删除</span><br><span class="line">create procedure test()                 #创建无参存储过程,名称为test</span><br><span class="line">begin</span><br><span class="line">    declare i int;                      #申明变量</span><br><span class="line">    set i = 0;                          #变量赋值</span><br><span class="line">    lp : loop                           #lp为循环体名,可随意 loop为关键字</span><br><span class="line">        insert into test values(i);     #往test表添加数据</span><br><span class="line">        set i = i + 1;                  #循环一次,i加一</span><br><span class="line">        if i &gt; 10 then                  #结束循环的条件: 当i大于10时跳出loop循环</span><br><span class="line">            leave lp;</span><br><span class="line">        end if; </span><br><span class="line">    end loop;</span><br><span class="line">    select * from test;                 #查看test表数据</span><br><span class="line">end</span><br><span class="line">//                                      #结束定义语句</span><br><span class="line">call test();                            #调用存储过程</span><br><span class="line"></span><br><span class="line"># 用来模拟简单的死循环</span><br></pre></td></tr></table></figure><p><strong>repeat</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 语法：</span><br><span class="line">[标签:]repeat</span><br><span class="line">循环体;</span><br><span class="line">until 结束循环的条件</span><br><span class="line">end repeat [标签];</span><br><span class="line"></span><br><span class="line"># 例：</span><br><span class="line">delimiter //                            #定义标识符为双斜杠</span><br><span class="line">drop procedure if exists test;          #如果存在test存储过程则删除</span><br><span class="line">create procedure test()                 #创建无参存储过程,名称为test</span><br><span class="line">begin</span><br><span class="line">    declare i int;                      #申明变量</span><br><span class="line">    set i = 0;                          #变量赋值</span><br><span class="line">    repeat</span><br><span class="line">        insert into test values (i);    #往test表添加数据</span><br><span class="line">        set i = i + 1;                  #循环一次,i加一</span><br><span class="line">    until i &gt; 10 end repeat;            #结束循环的条件: 当i大于10时跳出repeat循环</span><br><span class="line">    select * from test;                 #查看test表数据</span><br><span class="line">end //                                  #结束定义语句</span><br><span class="line">call test();                            #调用存储过程https://blog.csdn.net/yangzjchn/article/details/82705565)</span><br></pre></td></tr></table></figure><p><strong>例题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* 知表stringcontent其中字段：</span><br><span class="line">id 自增长</span><br><span class="line">content varchar(20)</span><br><span class="line">   需求：向该表插入指定个数的，随机的字符串</span><br><span class="line">*/</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE test_randstr_insert(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 1;</span><br><span class="line">DECLARE str VARCHAR(26) DEFAULT &#x27;abcdefghijklmnopqrstuvwxyz&#x27;;</span><br><span class="line">DECLARE startIndex INT; #代表初始索引</span><br><span class="line">DECLARE len INT; #代表截取的字符长度</span><br><span class="line"></span><br><span class="line">WHILE i&lt;=insertcount DO</span><br><span class="line">SET startIndex=FLOOR(RAND()*26+1);#代表初始索引，随机范围1-26</span><br><span class="line">SET len=FLOOR(RAND()*(20-startIndex+1)+1);#代表截取长度，随机范围1-(20-startIndex+1)</span><br><span class="line">INSERT INTO stringcontent(content) VALUES(SUBSTR(str,startIndex,len));</span><br><span class="line">SET i=i+1;</span><br><span class="line">END WHILE;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">CALL test_randstr_insert(10)$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库事务</title>
      <link href="/aiyblog/2021/04/24/sql/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
      <url>/aiyblog/2021/04/24/sql/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>查看mysql支持的存储引擎：<code>show engines</code></p><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><h3 id="特点（ACID）"><a href="#特点（ACID）" class="headerlink" title="特点（ACID）"></a>特点（ACID）</h3><table><thead><tr><th>特点</th><th align="left"></th></tr></thead><tbody><tr><td>原子性</td><td align="left">要么都执行，要么都回滚</td></tr><tr><td>一致性</td><td align="left">保证数据的状态操作前和操作后保持一致</td></tr><tr><td>隔离性</td><td align="left">多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰</td></tr><tr><td>持久性</td><td align="left">一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</td></tr></tbody></table><h3 id="事务的分类："><a href="#事务的分类：" class="headerlink" title="事务的分类："></a>事务的分类：</h3><p><strong>隐式事务</strong> 没有明显的开启和结束事务的标志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如:insert、update、delete 语句本身就是一个事务</span><br></pre></td></tr></table></figure><p><strong>显式事务</strong> 具有明显的开启和结束事务的标志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、开启事务</span><br><span class="line">取消自动提交事务的功能</span><br><span class="line">set autocommit=0;</span><br><span class="line"></span><br><span class="line">2、编写事务的一组逻辑操作单元（多条sql语句）</span><br><span class="line">insert</span><br><span class="line">update</span><br><span class="line">delete</span><br><span class="line"></span><br><span class="line">3、提交事务或回滚事务</span><br><span class="line">commit;</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure><p><strong>使用到的关键字</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set autocommit=0;</span><br><span class="line">start transaction;</span><br><span class="line">commit;</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">savepoint  断点</span><br><span class="line">commit to 断点</span><br><span class="line">rollback to 断点</span><br></pre></td></tr></table></figure><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别:"></a>事务的隔离级别:</h3><ul><li>事务并发问题：当多个事务同时操作同一个数据库的相同数据时可能发生事务并发问题：</li></ul><table><thead><tr><th align="left">并发问题</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">脏读</td><td align="left">一个事务读取到了另外一个事务未提交的数据</td></tr><tr><td align="left">不可重复读</td><td align="left">同一个事务中，多次读取到的数据不一致</td></tr><tr><td align="left">幻读</td><td align="left">一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</td></tr></tbody></table><ul><li>事务并发问题避免：通过设置事务的隔离级别</li></ul><table><thead><tr><th align="left">隔离级别</th><th align="left">名词</th><th align="left">避免问题</th></tr></thead><tbody><tr><td align="left">读未提交</td><td align="left">READ UNCOMMITTED</td><td align="left"></td></tr><tr><td align="left">读已提交</td><td align="left">READ COMMITTED</td><td align="left">脏读</td></tr><tr><td align="left">可重复读</td><td align="left">REPEATABLE READ</td><td align="left">脏读、不可重复读、一部分幻读</td></tr><tr><td align="left">串行化</td><td align="left">SERIALIZABLE</td><td align="left">脏读、不可重复读、幻读</td></tr></tbody></table><blockquote><p>mysql默认使用隔离级别：可重复读，</p><p>oracle默认使用隔离级别：读已提交</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置隔离级别：</span><br><span class="line">set session/global  transaction isolation level 隔离级别名;</span><br><span class="line"></span><br><span class="line"># 查看隔离级别：</span><br><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure><h3 id="回滚点"><a href="#回滚点" class="headerlink" title="回滚点"></a>回滚点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置回滚点</span><br><span class="line">savepoint 回滚点名;</span><br><span class="line"></span><br><span class="line"># 回滚</span><br><span class="line">rollback to 回滚点名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql分支与循环</title>
      <link href="/aiyblog/2021/04/24/sql/mysql%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
      <url>/aiyblog/2021/04/24/sql/mysql%E5%88%86%E6%94%AF%E4%B8%8E%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="定义变量与赋值"><a href="#定义变量与赋值" class="headerlink" title="定义变量与赋值"></a>定义变量与赋值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">drop procedure if exists assignmentPro;</span><br><span class="line">create procedure assignmentPro()</span><br><span class="line">begin</span><br><span class="line">declare i int;</span><br><span class="line">declare name VARCHAR(255) DEFAULT &quot;xiaoai&quot;;</span><br><span class="line">-- 赋值</span><br><span class="line">set i = 10;</span><br><span class="line">select i;</span><br><span class="line">select @i:=20;</span><br><span class="line">select 30 into i;</span><br><span class="line">select i;</span><br><span class="line"></span><br><span class="line">select @j:=&quot;jjj&quot;;</span><br><span class="line">select @j=&quot;jjj&quot;;  -- 结果=1</span><br><span class="line">end //</span><br><span class="line">call assignmentPro();</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>格式：</p><blockquote><p>if  条件 then</p><p>​    分支1</p><p>else if  条件 then </p><p>​    分支2</p><p>else </p><p>​    分支3;</p><p>end if;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">drop procedure if exists ifPro;</span><br><span class="line">create procedure ifPro(in sexNum int)</span><br><span class="line">begin</span><br><span class="line">if sexNum = 0 then</span><br><span class="line">select &quot;男&quot; as sex;</span><br><span class="line">elseif sexNum = 1 then</span><br><span class="line">select &quot;女&quot; as sex;</span><br><span class="line">else </span><br><span class="line">select &quot;未知&quot; as sex;</span><br><span class="line">end if;</span><br><span class="line">end //</span><br><span class="line">call ifPro(0);</span><br><span class="line">call ifPro(1);</span><br><span class="line">call ifPro(2);</span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><p>格式1：</p><blockquote><p>case 变量|表达式|字段</p><p>when 值1 then</p><p>​    分支语句1；</p><p>when 值2 then</p><p>​    分支语句2；</p><p>else</p><p>​    分支语句3；</p><p>end</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">drop procedure if exists case1Pro;</span><br><span class="line">create procedure case1Pro(in sexNum int)</span><br><span class="line">begin</span><br><span class="line">case sexNum</span><br><span class="line">when 0 then</span><br><span class="line">select &quot;男&quot; as sex;</span><br><span class="line">when 1 then</span><br><span class="line">select &quot;女&quot; as sex;</span><br><span class="line">else </span><br><span class="line">select &quot;未知&quot; as sex;</span><br><span class="line">end case;</span><br><span class="line">end //</span><br><span class="line">call case1Pro(0);</span><br><span class="line">call case1Pro(1);</span><br><span class="line">call case1Pro(2);</span><br></pre></td></tr></table></figure><p>格式2：</p><blockquote><p>case</p><p>when 【变量|表达式|字段】= 值1 then</p><p>​    分支语句1；</p><p>when 【变量|表达式|字段】= 值2 then</p><p>​    分支语句2；</p><p>else</p><p>​    分支语句3；</p><p>end</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">drop procedure if exists case2Pro;</span><br><span class="line">create procedure case2Pro(in sexNum int)</span><br><span class="line">begin</span><br><span class="line">case</span><br><span class="line">when sexNum = 0 then</span><br><span class="line">select &quot;男&quot; as sex;</span><br><span class="line">when sexNum = 1 then</span><br><span class="line">select &quot;女&quot; as sex;</span><br><span class="line">else </span><br><span class="line">select &quot;未知&quot; as sex;</span><br><span class="line">end case;</span><br><span class="line">end //</span><br><span class="line">call case2Pro(0);</span><br><span class="line">call case2Pro(1);</span><br><span class="line">call case2Pro(2);</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p>格式：</p><blockquote><p>repeat</p><p>​    循环操作;</p><p>until 结束条件 end repeat；</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 定义一个带返回参数的存储过程，在存储过程中让返回参数循环从1加到10</span><br><span class="line">delimiter //</span><br><span class="line">drop procedure if exists repeatPro;</span><br><span class="line">create procedure repeatPro(out sum int)</span><br><span class="line">begin</span><br><span class="line">set sum = 0;</span><br><span class="line">repeat</span><br><span class="line">set sum = sum+1;</span><br><span class="line">until sum = 10 end repeat;</span><br><span class="line">select sum;</span><br><span class="line">end //</span><br><span class="line">call repeatPro(@sum);</span><br><span class="line">select @sum;  -- 结果：10</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>格式：</p><blockquote><p>while 循环条件 do</p><p>​    循环操作；</p><p>end while;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 定义一个带返回参数的存储过程，在存储过程中让返回参数循环从1加到10</span><br><span class="line">delimiter //</span><br><span class="line">drop procedure if exists endPro;</span><br><span class="line">create procedure endPro(out sum int)</span><br><span class="line">begin</span><br><span class="line">set sum = 0;</span><br><span class="line">while sum &lt;10 do</span><br><span class="line">set sum = sum+1;</span><br><span class="line">end while;</span><br><span class="line">end //</span><br><span class="line">call endPro(@sum);</span><br><span class="line">select @sum;  -- 结果：10</span><br></pre></td></tr></table></figure><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><p>格式：</p><blockquote><p>结束标志 : loop</p><p>​    循环操作;</p><p>​    leave 结束标志；(即：相当于循环条件，使用后会退出循环)</p><p>end loop;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 定义一个带返回参数的存储过程，在存储过程中让返回参数循环从1加到10</span><br><span class="line">delimiter //</span><br><span class="line">drop procedure if exists loopPro;</span><br><span class="line">create procedure loopPro(out sum int)</span><br><span class="line">begin</span><br><span class="line">set sum = 0;</span><br><span class="line">bk:loop</span><br><span class="line">set sum = sum+1;</span><br><span class="line">if sum = 10 then</span><br><span class="line">leave bk;</span><br><span class="line">end if;</span><br><span class="line">end loop;</span><br><span class="line">end //</span><br><span class="line">call loopPro(@sum);</span><br><span class="line">select @sum;  -- 结果：10</span><br></pre></td></tr></table></figure><blockquote><p>loop常与if一起使用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/aiyblog/2021/02/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/aiyblog/2021/02/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="标准字符集合"><a href="#标准字符集合" class="headerlink" title="标准字符集合"></a>标准字符集合</h2><table><thead><tr><th align="left">字符</th><th align="left"></th></tr></thead><tbody><tr><td align="left">\d</td><td align="left">任意一个数字，0-9中任意一个</td></tr><tr><td align="left">\D</td><td align="left">任意非数字</td></tr><tr><td align="left">\w</td><td align="left">任意一个字母、下划线、数字。即：A-Z a-z 0-9</td></tr><tr><td align="left">\W</td><td align="left">表示除[0－9a-zA-Z_]之外的字符</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。</td></tr><tr><td align="left">.</td><td align="left">匹配任意一个字符<br/>如要匹配包括<code>\n</code>在内的所有字符一般用：<code>[\s \S]</code></td></tr><tr><td align="left">\b</td><td align="left">单词边界</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界</td></tr></tbody></table><h2 id="自定义字符集"><a href="#自定义字符集" class="headerlink" title="自定义字符集"></a>自定义字符集</h2><ul><li><p>s使用中括号[] 包裹</p></li><li><p>特殊字符被包含到中括号中失去特殊意义，除了<code>^</code>,<code>-</code>之外。</p></li><li><p>标准字符集合中除小数字外，包括在中括号中，自定义字符集合将包括该集合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line">[\d . \- +] 匹配 数字、小数点、- +</span><br></pre></td></tr></table></figure></li></ul><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><table><thead><tr><th>使用</th><th>意义</th></tr></thead><tbody><tr><td>{n}</td><td>n次</td></tr><tr><td>{n,m}</td><td>至少n次，至多m次</td></tr><tr><td>{n,}</td><td>至少n次</td></tr><tr><td>？</td><td>0或1次。相当于{0,1}</td></tr><tr><td>+</td><td>至少1次。相当于{1,}</td></tr><tr><td>*</td><td>0或任意次。相当于：{0,}</td></tr></tbody></table><p><strong>贪婪模式</strong>：匹配字符越多越好(默认)</p><p><strong>非贪婪模式</strong>：匹配字符越少越好</p><blockquote><p>模式设置：在修饰匹配次数后加一个<code>?</code>即为非贪婪模式</p></blockquote><h2 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a>字符边界</h2><p>该组标记匹配的不是字符而是位置</p><table><thead><tr><th align="left">符号</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">以……开始</td></tr><tr><td align="left">$</td><td align="left">以……结束</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界</td></tr></tbody></table><blockquote><p>\b 匹配：前面字符和后面字符不全是\w</p></blockquote><h2 id="正则表达式匹配模式"><a href="#正则表达式匹配模式" class="headerlink" title="正则表达式匹配模式"></a>正则表达式匹配模式</h2><table><thead><tr><th align="left">模式</th><th align="left"></th></tr></thead><tbody><tr><td align="left"><strong>IGNORECASE</strong></td><td align="left">忽略大小写</td></tr><tr><td align="left"><strong>SINGLELINE</strong></td><td align="left">单行模式。整个文本看作一个字符串(小数点<code>.</code>可匹配\n在内任意字符)</td></tr><tr><td align="left"><strong>MULTILINE</strong></td><td align="left">多行模式。每行都是一个字符串<br/>如需仅匹配开始和结束位置，可用\A 和 \Z</td></tr></tbody></table><h2 id="选择符和分组"><a href="#选择符和分组" class="headerlink" title="选择符和分组"></a>选择符和分组</h2><p><strong>|</strong> ：或关系，匹配<code>|</code>左边或右边</p><p>**()**：捕获组</p><ul><li><p>括号中表达式可做整体修饰</p></li><li><p>取匹配结果时，括号中表达式匹配到的内容可单独得到。获取：\1</p></li><li><p>每一个括号分配一个编号，由左括号顺序从1开始自动编号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">括号： (  (  )(  )  )(  )</span><br><span class="line">顺序： 1  2   3      4</span><br></pre></td></tr></table></figure><ul><li>捕获是由整个正则表达式模式匹配的文本</li></ul></li></ul><p>**(?:Expression)**：非捕获组</p><ul><li>一些表达式中不得不使用(),但又不需要取保存()中子表达式匹配到的内容，这时可以用非捕获组来抵消使用()带来的副作用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line">(?:[a-z]&#123;2&#125;)  </span><br></pre></td></tr></table></figure><p><strong>反向引用</strong> </p><p>格式：\n</p><ul><li>每一对()会分配一个编号，根据左括号顺序从1开始</li><li>通过反向引用，可对分组已捕获的字符串进行引用</li></ul><h2 id="预搜索"><a href="#预搜索" class="headerlink" title="预搜索"></a>预搜索</h2><ul><li><p>只进行子表达式匹配，匹配内容不计入最终匹配结果，(即零宽度)</p></li><li><p>判断当前位置前后字符，但不匹配前后字符</p></li><li><p>匹配字符内容保存到最终结果为占有字符</p><ul><li>匹配字符位置匹配内容不保存到结果为零宽度</li></ul></li></ul><p><strong>(?= Expression)</strong> ：断言自身出现位置后面能匹配表达式</p><p>**(?&lt;= Expression)**：断言自身出现位置前面能匹配表达式</p><p>**(?! Expression)**：断言自身出现位置后面不能匹配表达式</p><p>**(?&lt;! Expression)**：断言自身出现位置前面不能匹配表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a(?=b)/</span>.<span class="title function_">exec</span>(str));<span class="comment">//返回a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a(?=b)c/</span>.<span class="title function_">exec</span>(str));<span class="comment">//返回null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a(?=b)bc/</span>.<span class="title function_">exec</span>(str));<span class="comment">//返回abc</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/aiyblog/2021/02/26/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/aiyblog/2021/02/26/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p><strong>特点：</strong>字节码随用随创建，随用随加载<br><strong>作用：</strong>不修改源码的基础上对方法增强<br><strong>分类：</strong></p><ul><li>基于接口的动态代理(缺点：如果被代理的类未实现任何接口则Proxy不能用)</li><li>基于子类的动态代理</li></ul><h3 id="基于接口的动态代理-代理实现接口的类"><a href="#基于接口的动态代理-代理实现接口的类" class="headerlink" title="基于接口的动态代理(代理实现接口的类)"></a>基于接口的动态代理(代理实现接口的类)</h3><p><strong>涉及类</strong>：Proxy<br><strong>提供</strong>：jdk官方<br><strong>如何创建代理对象</strong>：使用Proxy类中的newProxyInstance方法<br><strong>创建代理对象的要求</strong>：被代理类最少实现一个接口</p><ul><li><p>newProxyInstance()参数：</p><ul><li>ClassLoader：类加载器==用于加载代理对象字节码的。使用的是被代理对象的类加载器</li><li>Class[]：它是用于代理对象和被代理对象有相同的方法，即代理类实现的接口</li></ul></li><li><p>InvvocationHandler对象：它是让我们写如何代理。我们一般都是写一个该接口的实现类。通常情况下用匿名内部类，但不是必须的。此接口（InvvocationHandler）的实现类都是谁用谁写。</p></li><li><p>返回：一个被代理类类型的代理对象。</p></li></ul><p><em><strong>使用例子</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IProduce</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleProduct</span><span class="params">(<span class="type">float</span> money)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleService</span><span class="params">(<span class="type">float</span> money)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类(厂家/被代理对象)</span></span><br><span class="line"><span class="comment">// 一个生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Produce</span> <span class="keyword">implements</span> <span class="title class_">IProduce</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleProduct</span><span class="params">(<span class="type">float</span> money)</span>&#123;</span><br><span class="line">        <span class="comment">//厂家发货，厂家获得销售商品的钱</span></span><br><span class="line">        System.out.println(<span class="string">&quot;销售产品，厂家拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleService</span><span class="params">(<span class="type">float</span> money)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提供售后服务，厂家拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户类(通过动态代理拿货)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoaiying</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取厂家</span></span><br><span class="line">        <span class="keyword">final</span>  <span class="type">Produce</span> <span class="variable">produce</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Produce</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接联系厂家拿货</span></span><br><span class="line">        <span class="comment">// produce.saleProduct(10000f);//结果：销售产品，厂家拿到钱：10000</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理商拿货：获取动态代理(代理商)</span></span><br><span class="line">        <span class="type">IProduce</span> <span class="variable">proxyProducer</span>  <span class="operator">=</span> (IProduce) Proxy.newProxyInstance(</span><br><span class="line">                produce.getClass().getClassLoader(),</span><br><span class="line">                produce.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法,即相当于该方法具有拦截的功能</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy     代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method    当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args      当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>  和被代理对象执行的方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * 注：匿名内部类访问外部成员要求成员必须是最终的即final修饰</span></span><br><span class="line"><span class="comment">                     * invoke()方法：执行当前方法</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 可以在此提供增强的代码</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        <span class="comment">//创建返回值</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">//获取参数</span></span><br><span class="line">                        <span class="type">Float</span> <span class="variable">money</span> <span class="operator">=</span> (Float) args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//判断当前方法是不是销售那个方法</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;saleProduct&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                            returnValue = method.invoke(produce,money*<span class="number">0.8f</span>);<span class="comment">//代理商从客户那里拿走了0.2的价钱</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过代理商拿货</span></span><br><span class="line">        proxyProducer.saleProduct(<span class="number">10000f</span>);<span class="comment">//结果：销售产品，厂家拿到钱：8000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于子类的动态代理-代理普通类"><a href="#基于子类的动态代理-代理普通类" class="headerlink" title="基于子类的动态代理(代理普通类)"></a>基于子类的动态代理(代理普通类)</h3><p><strong>涉及类</strong>：Enhancer<br><strong>提供者</strong>：第三方cglib库<br><strong>如何创建代理对象</strong>：使用Ehancer类中的create()方法<br><strong>创建代理对象的要求</strong>：被代理类不能是最终类，即final修饰</p><ul><li><p>create()参数：</p><pre><code>- Class：字节码，用于指定被代理对象的字节码</code></pre></li><li><p>Callback：用于提供增强的代码</p></li></ul><p><em><strong>使用例子</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体类，一个生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Produce</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleProduct</span><span class="params">(<span class="type">float</span> money)</span>&#123;</span><br><span class="line">        <span class="comment">//厂家发货，厂家获得销售商品的钱</span></span><br><span class="line">        System.out.println(<span class="string">&quot;销售产品，厂家拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saleService</span><span class="params">(<span class="type">float</span> money)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提供售后服务，厂家拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户类(通过动态代理拿货)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Produce</span> <span class="variable">produce</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Produce</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//基于子类动态代理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取动态代理</span></span><br><span class="line">        <span class="type">Produce</span> <span class="variable">cglibProducer</span> <span class="operator">=</span> (Produce) Enhancer.create(</span><br><span class="line">                produce.getClass(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 被执行的代理对象的方法都会经过该方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">                     *  以上三个参数与基于接口动态代理中invoke方法参数一样</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> methodProxy</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">/**</span></span><br><span class="line"><span class="comment">                         * 可以在此提供增强的代码</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        <span class="comment">//创建返回值</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">//获取参数</span></span><br><span class="line">                        <span class="type">Float</span> <span class="variable">money</span> <span class="operator">=</span> (Float) args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">//判断当前方法是不是销售那个方法</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;saleProduct&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                            returnValue = method.invoke(produce,money*<span class="number">0.8f</span>);<span class="comment">//代理商从客户那里拿走了0.2的价钱</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过代理拿货</span></span><br><span class="line">        cglibProducer.saleProduct(<span class="number">12000f</span>);<span class="comment">//结果：销售产品，厂家拿到钱：9600</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-原则</title>
      <link href="/aiyblog/2021/02/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%88%99/"/>
      <url>/aiyblog/2021/02/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="七大设计原则"><a href="#七大设计原则" class="headerlink" title="七大设计原则"></a>七大设计原则</h1><p>所有原则都为了降低类之间的耦合。</p><h2 id="一、单一职责"><a href="#一、单一职责" class="headerlink" title="一、单一职责"></a>一、单一职责</h2><ul><li>降低类复杂度，一个类负责一项职责。</li><li>提高类可读性，可维护性。</li><li>降低变更引起的风险。</li><li>通常情况下，应遵循。只有逻辑够简单，才可在代码级别(通过if…else…)违反；只有类方法数量足够少，才可在方法级别(定义不同方法实现不同操作)保持单一职责</li></ul><h2 id="二、接口隔离"><a href="#二、接口隔离" class="headerlink" title="二、接口隔离"></a>二、接口隔离</h2><p>客户端不应依赖不需要的接口，即对一个类的依赖，应该建立在最小接口上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如：接口Interface有1、2、3等方法，B类实现了Interface接口。A类通过接口依赖B类，但A只需要用到接口中1、2两个方法。</span><br><span class="line">按接口隔离原则应把接口分离：</span><br><span class="line">1、Interface分成两个接口：Interface1有方法1、2；Interface2有方法3；</span><br><span class="line">2、B类实现接口Interface1即可；</span><br><span class="line">3、如果后续某个类需要用到Interface中1、2、3方法，再让B实现Interface2。</span><br></pre></td></tr></table></figure><h2 id="三、依赖倒转"><a href="#三、依赖倒转" class="headerlink" title="三、依赖倒转"></a>三、依赖倒转</h2><ul><li>底层模块尽量使用抽象类或接口，或两者都有，程序稳定性更好</li><li>变量声明类型尽量用抽象类或接口。这样变量引用和实际对象存在一个缓冲层(即接口)，利用程序扩展和优化。</li><li>继承时遵循里氏替换原则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户使用端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">       <span class="type">OpenAndCloseTv</span> <span class="variable">openAndCloseTv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndCloseTv</span>();</span><br><span class="line">       openAndCloseTv.open(<span class="keyword">new</span> <span class="title class_">Changhong</span>());</span><br><span class="line">       openAndCloseTv.open(<span class="keyword">new</span> <span class="title class_">Kangjia</span>());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开关接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndCloseTv</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndCloseTv</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndCloseTv</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tv类型接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义不同tv类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Changhong</span> <span class="keyword">implements</span> <span class="title class_">ITV</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;长虹电视打开。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Kangjia</span> <span class="keyword">implements</span> <span class="title class_">ITV</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;康佳电视打开了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">长虹电视打开。。。</span><br><span class="line">康佳电视打开了。。。</span><br></pre></td></tr></table></figure><p><strong>依赖关系传递三种方式：</strong></p><ul><li><p>接口传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//开关接口</span><br><span class="line">interface IOpenAndCloseTv&#123;</span><br><span class="line">    public void open(ITV tv);</span><br><span class="line">&#125;</span><br><span class="line">//实现</span><br><span class="line">class OpenAndCloseTv implements IOpenAndCloseTv&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void open(ITV tv) &#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------使用</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    OpenAndCloseTv openAndCloseTv = new OpenAndCloseTv();</span><br><span class="line">    openAndCloseTv.open(new Changhong());</span><br><span class="line">    openAndCloseTv.open(new Kangjia());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//开关接口</span><br><span class="line">interface IOpenAndCloseTv&#123;</span><br><span class="line">    public void open();</span><br><span class="line">&#125;</span><br><span class="line">//实现</span><br><span class="line">class OpenAndCloseTv implements IOpenAndCloseTv&#123;</span><br><span class="line">    private ITV tv; // 成员变量</span><br><span class="line">    public OpenAndCloseTv(ITV tv)&#123;</span><br><span class="line">        this.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void open() &#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------使用</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    OpenAndCloseTv openAndCloseTv = new OpenAndCloseTv(new Changhong());</span><br><span class="line">    openAndCloseTv.open();</span><br><span class="line">    OpenAndCloseTv openAndCloseTv2 = new OpenAndCloseTv(new Kangjia());</span><br><span class="line">    openAndCloseTv2.open();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>setter方法传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//开关接口</span><br><span class="line">interface IOpenAndCloseTv&#123;</span><br><span class="line">    public void open();</span><br><span class="line">    public void setTv(ITV tv)</span><br><span class="line">&#125;</span><br><span class="line">//实现</span><br><span class="line">class OpenAndCloseTv implements IOpenAndCloseTv&#123;</span><br><span class="line">    private ITV tv; // 成员变量</span><br><span class="line">    </span><br><span class="line">    @Override    </span><br><span class="line">    public void setTv(ITV tv)&#123;</span><br><span class="line">        this.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void open() &#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------使用</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    OpenAndCloseTv openAndCloseTv = new OpenAndCloseTv();</span><br><span class="line">    openAndCloseTv.setTv(new Changhong();</span><br><span class="line">    openAndCloseTv.open();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、里氏替换"><a href="#四、里氏替换" class="headerlink" title="四、里氏替换"></a>四、里氏替换</h2><p>一个类被其他类所继承，该类修改时，必须考虑所有子类。父类修改后，所有子类有可能产生故障。<br>如何正确使用继承？–》里氏替换原则</p><ul><li>使用基类的地方必须能透明使用子类对象。</li><li>使用继承时，在子类中尽量不要重写父类方法。</li><li>继承实际让两个类耦合性增强，在适当情况下可通过聚合，组合，依赖解决问题，不要通过继承。</li></ul><p>如某类子类需要改写父类方法，应把子类提升和父类一样的档次，把共同方法抽取，让子类和父类继承同一个更基层的基类。</p><blockquote><p>若要改变父，就不要做父子关系了，做兄弟关系吧。 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class Liskov &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">        A a = new A();</span><br><span class="line">        System.out.println(&quot;11-3=&quot;+a.func1(11,3));</span><br><span class="line">        System.out.println(&quot;1-8=&quot;+a.func1(1,8));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;----------------------------&quot;);</span><br><span class="line">        B b = new B();</span><br><span class="line">        System.out.println(&quot;11-3=&quot;+b.func1(11,3)); // 这里其实已经覆写父类方法了，所以-的话是错误的。</span><br><span class="line">        System.out.println(&quot;1-8=&quot;+b.func1(1,8));</span><br><span class="line">        System.out.println(&quot;11+3+9=&quot;+b.func2(11,3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A &#123;</span><br><span class="line">    public int func1(int num1,int num2)&#123;</span><br><span class="line">        return num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B extends A&#123;</span><br><span class="line">    // 重新了A 类方法，可能是无意识</span><br><span class="line">    @Override</span><br><span class="line">    public int func1(int a,int b)&#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    public int func2(int a,int b)&#123;</span><br><span class="line">        return func1(a,b)+9;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过里氏替换原则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class Liskov2 &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">        A a = new A();</span><br><span class="line">        System.out.println(&quot;11-3=&quot;+ a.func1(11,3));</span><br><span class="line">        System.out.println(&quot;1-8=&quot;+ a.func1(1,8));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;----------------------------&quot;);</span><br><span class="line">        B b = new B();</span><br><span class="line">        System.out.println(&quot;11+3=&quot;+ b.func1(11,3)); // 这里其实已经覆写父类方法了，所以-的话是错误的。</span><br><span class="line">        System.out.println(&quot;1+8=&quot;+ b.func1(1,8));</span><br><span class="line">        System.out.println(&quot;11+3+9=&quot;+ b.func2(11,3));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;11-3=&quot;+ b.func3(11,3)); //实际调用的是A类的方法。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class base&#123;</span><br><span class="line">    //共有的更基础的方法、成员变量定义到该类</span><br><span class="line">    //如：</span><br><span class="line">    public int funcMult(int num1,int num2)&#123;</span><br><span class="line">        return num1*num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class A extends base&#123;</span><br><span class="line">    public int func1(int num1,int num2)&#123;</span><br><span class="line">        return num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B extends base&#123;</span><br><span class="line">    private A  aobj = new A(); //通过组合方式解决继承问题-step1</span><br><span class="line"></span><br><span class="line">    public int func1(int a,int b)&#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    public int func2(int a,int b)&#123;</span><br><span class="line">        return func1(a,b)+9;</span><br><span class="line">    &#125;</span><br><span class="line">    public int func3(int a,int b)&#123;</span><br><span class="line">        return aobj.func1(a,b); //通过组合方式解决继承问题-step2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------结果</span><br><span class="line">11-3=8</span><br><span class="line">1-8=-7</span><br><span class="line">----------------------------</span><br><span class="line">11+3=14</span><br><span class="line">1+8=9</span><br><span class="line">11+3+9=23</span><br><span class="line">11-3=8</span><br></pre></td></tr></table></figure><h2 id="五、开闭原则"><a href="#五、开闭原则" class="headerlink" title="五、开闭原则"></a>五、开闭原则</h2><ul><li>最基础、最重要的设计原则</li><li>一个实体如类、模块、函数应【扩展开发(对提供方)，修改关闭(对使用方)】。抽象构建框架，实现扩展细节。</li><li>软件需变化，尽量通过扩展代码而不是修改已有代码。</li><li>编程中遵循其他原则，及设计模式目的就是遵循开闭原则(核心)。</li></ul><p>不遵循OCP原则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class Ocp &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        GraphicEditor graphicEditor = new GraphicEditor();</span><br><span class="line">        graphicEditor.drawShape(new Rectangle());</span><br><span class="line">        graphicEditor.drawShape(new Circle());</span><br><span class="line">        graphicEditor.drawShape(new Triangle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这是一个用于绘图的类 [使用方]</span><br><span class="line">class GraphicEditor &#123;</span><br><span class="line">    //接收Shape对象，调用draw方法</span><br><span class="line">    public void drawShape(Shape s) &#123;</span><br><span class="line">        if (s.m_type == 1)&#123;</span><br><span class="line">            drawRectangle();</span><br><span class="line">        &#125;else if (s.m_type == 2)&#123;</span><br><span class="line">            drawCircle();</span><br><span class="line">        &#125;else if (s.m_type == 3)&#123; //新增图形,使用方需要进行修改</span><br><span class="line">            drawTriangle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void drawRectangle()&#123; System.out.println(&quot; 绘制矩形 &quot;); &#125;</span><br><span class="line">    public void drawCircle() &#123; System.out.println(&quot; 绘制圆形 &quot;); &#125;</span><br><span class="line">    //新增图形,使用方需要进行修改</span><br><span class="line">    public void drawTriangle() &#123; System.out.println(&quot; 绘制三角形 &quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义各种图形</span><br><span class="line">//Shape类，基类，</span><br><span class="line">abstract class Shape &#123;</span><br><span class="line">    int m_type;</span><br><span class="line">&#125;</span><br><span class="line">//矩形</span><br><span class="line">class Rectangle extends Shape &#123;</span><br><span class="line">    Rectangle() &#123; super.m_type = 1; &#125;</span><br><span class="line">&#125;</span><br><span class="line">//圆形</span><br><span class="line">class Circle extends Shape &#123;</span><br><span class="line">    Circle() &#123; super.m_type = 2; &#125;</span><br><span class="line">&#125;</span><br><span class="line">//新增三角形</span><br><span class="line">class Triangle extends Shape &#123;</span><br><span class="line">    Triangle() &#123; super.m_type = 3; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------结果</span><br><span class="line"> 绘制矩形 </span><br><span class="line"> 绘制圆形 </span><br><span class="line"> 绘制三角形 </span><br></pre></td></tr></table></figure><p>遵循OCP原则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class Ocp &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //使用看看存在的问题</span><br><span class="line">        GraphicEditor graphicEditor = new GraphicEditor();</span><br><span class="line">        graphicEditor.drawShape(new Rectangle());</span><br><span class="line">        graphicEditor.drawShape(new Circle());</span><br><span class="line">        graphicEditor.drawShape(new Triangle());</span><br><span class="line">        graphicEditor.drawShape(new OtherGraphic());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这是一个用于绘图的类 [使用方]</span><br><span class="line">class GraphicEditor &#123;</span><br><span class="line">    //接收Shape对象，调用draw方法</span><br><span class="line">    public void drawShape(Shape s) &#123; s.draw(); //只需要新增图形就可以，不需要修改代码。 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Shape类，遵守ocp原则通过创建一个基类，</span><br><span class="line">abstract class Shape &#123;</span><br><span class="line">    public abstract void draw();//抽象方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//绘制不同图像时直接扩展，而不是修改。</span><br><span class="line">//矩形</span><br><span class="line">class Rectangle extends Shape &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;System.out.println(&quot; 绘制矩形 &quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line">//圆形</span><br><span class="line">class Circle extends Shape &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123; System.out.println(&quot; 绘制圆形 &quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line">//新增画三角形</span><br><span class="line">class Triangle extends Shape &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123; System.out.println(&quot; 绘制三角形 &quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line">//新增一个图形</span><br><span class="line">class OtherGraphic extends Shape &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123; System.out.println(&quot; 绘制其它图形 &quot;); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------结果</span><br><span class="line"> 绘制矩形 </span><br><span class="line"> 绘制圆形 </span><br><span class="line"> 绘制三角形 </span><br><span class="line"> 绘制其它图形 </span><br></pre></td></tr></table></figure><h2 id="六、迪米特法则"><a href="#六、迪米特法则" class="headerlink" title="六、迪米特法则"></a>六、迪米特法则</h2><p>核心是为了降低类之间的耦合。</p><ul><li>一个对象对其他对象保持最少了解。</li><li>也叫【最少知道原则】，即一个被依赖的类不管多复杂，尽量将逻辑封装类内部，对外只提供public方法，不对外泄露任何信息。</li><li>更简单定义：只与【直接朋友(两对象耦合即朋友，出现在成员变量，方法参数，方法返回值中的类为直接的朋友，出现在局部变量中的类不是直接的朋友，称陌生类)】通信。</li><li>耦合方式：依赖、关联、组合、聚合等。</li><li>陌生类最好不要以局部变量出现在类内部。</li></ul><p>非迪米特法则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">//客户端</span><br><span class="line">public class Demeter1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建了一个 SchoolManager 对象</span><br><span class="line">        SchoolManager schoolManager = new SchoolManager();</span><br><span class="line">        //输出学院的员工id 和  学校总部的员工信息</span><br><span class="line">        schoolManager.printAllEmployee(new CollegeManager());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//学校总部员工类</span><br><span class="line">class Employee &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    public void setId(String id) &#123; this.id = id; &#125;</span><br><span class="line">    public String getId() &#123; return id; &#125;</span><br><span class="line">&#125;</span><br><span class="line">//学院员工类</span><br><span class="line">class CollegeEmployee &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    public void setId(String id) &#123; this.id = id; &#125;</span><br><span class="line">    public String getId() &#123; return id; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//学院员工管理类</span><br><span class="line">class CollegeManager &#123;</span><br><span class="line">    //返回学院的所有员工</span><br><span class="line">    public List&lt;CollegeEmployee&gt; getAllEmployee() &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = new ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123; //这里我们增加了10个员工到 list</span><br><span class="line">            CollegeEmployee emp = new CollegeEmployee();</span><br><span class="line">            emp.setId(&quot;学院员工id= &quot; + i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//学校管理类</span><br><span class="line">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span><br><span class="line">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 </span><br><span class="line">class SchoolManager &#123;</span><br><span class="line">    //返回学校总部的员工</span><br><span class="line">    public List&lt;Employee&gt; getAllEmployee() &#123;</span><br><span class="line">        List&lt;Employee&gt; list = new ArrayList&lt;Employee&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 5; i++) &#123; //这里我们增加了5个员工到 list</span><br><span class="line">            Employee emp = new Employee();</span><br><span class="line">            emp.setId(&quot;学校总部员工id= &quot; + i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //该方法完成输出学校总部和学院员工信息(id)</span><br><span class="line">    void printAllEmployee(CollegeManager sub) &#123;</span><br><span class="line">        //分析问题</span><br><span class="line">        //1. 这里的 CollegeEmployee 不是  SchoolManager的直接朋友</span><br><span class="line">        //2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span><br><span class="line">        //3. 违反了 迪米特法则 </span><br><span class="line"></span><br><span class="line">        //获取学院员工</span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">        System.out.println(&quot;------------学院员工------------&quot;);</span><br><span class="line">        for (CollegeEmployee e : list1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        //获取学校总部员工</span><br><span class="line">        List&lt;Employee&gt; list2 = this.getAllEmployee();</span><br><span class="line">        System.out.println(&quot;------------学校总部员工------------&quot;);</span><br><span class="line">        for (Employee e : list2) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------结果</span><br><span class="line">------------学院员工------------</span><br><span class="line">学院员工id= 0</span><br><span class="line">学院员工id= 1</span><br><span class="line">学院员工id= 2</span><br><span class="line">学院员工id= 3</span><br><span class="line">学院员工id= 4</span><br><span class="line">学院员工id= 5</span><br><span class="line">学院员工id= 6</span><br><span class="line">学院员工id= 7</span><br><span class="line">学院员工id= 8</span><br><span class="line">学院员工id= 9</span><br><span class="line">------------学校总部员工------------</span><br><span class="line">学校总部员工id= 0</span><br><span class="line">学校总部员工id= 1</span><br><span class="line">学校总部员工id= 2</span><br><span class="line">学校总部员工id= 3</span><br><span class="line">学校总部员工id= 4</span><br></pre></td></tr></table></figure><p>遵循迪米特法则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">//客户端</span><br><span class="line">public class Demeter1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;~~~使用迪米特法则的改进~~~&quot;);</span><br><span class="line">        //创建了一个 SchoolManager 对象</span><br><span class="line">        SchoolManager schoolManager = new SchoolManager();</span><br><span class="line">        //输出学院的员工id 和  学校总部的员工信息</span><br><span class="line">        schoolManager.printAllEmployee(new CollegeManager());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//学校总部员工类</span><br><span class="line">class Employee &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    public void setId(String id) &#123; this.id = id; &#125;</span><br><span class="line">    public String getId() &#123; return id; &#125;</span><br><span class="line">&#125;</span><br><span class="line">//学院员工类</span><br><span class="line">class CollegeEmployee &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    public void setId(String id) &#123; this.id = id; &#125;</span><br><span class="line">    public String getId() &#123; return id; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//学院员工管理类</span><br><span class="line">class CollegeManager &#123;</span><br><span class="line">    //返回学院的所有员工</span><br><span class="line">    public List&lt;CollegeEmployee&gt; getAllEmployee() &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = new ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123; //这里我们增加了10个员工到 list</span><br><span class="line">            CollegeEmployee emp = new CollegeEmployee();</span><br><span class="line">            emp.setId(&quot;学院员工id= &quot; + i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">    //输出学院员工的信息</span><br><span class="line">    public void printEmployee() &#123;</span><br><span class="line">        //获取到学院员工</span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = getAllEmployee();</span><br><span class="line">        System.out.println(&quot;------------学院员工------------&quot;);</span><br><span class="line">        for (CollegeEmployee e : list1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//学校管理类</span><br><span class="line">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span><br><span class="line">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则</span><br><span class="line">class SchoolManager &#123;</span><br><span class="line">    //返回学校总部的员工</span><br><span class="line">    public List&lt;Employee&gt; getAllEmployee() &#123;</span><br><span class="line">        List&lt;Employee&gt; list = new ArrayList&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 5; i++) &#123; //这里我们增加了5个员工到 list</span><br><span class="line">            Employee emp = new Employee();</span><br><span class="line">            emp.setId(&quot;学校总部员工id= &quot; + i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //该方法完成输出学校总部和学院员工信息(id)</span><br><span class="line">    void printAllEmployee(CollegeManager sub) &#123;</span><br><span class="line">        //分析问题</span><br><span class="line">        //1. 将输出学院的员工方法，封装到CollegeManager</span><br><span class="line">        sub.printEmployee();</span><br><span class="line"></span><br><span class="line">        //获取到学校总部员工</span><br><span class="line">        List&lt;Employee&gt; list2 = this.getAllEmployee();</span><br><span class="line">        System.out.println(&quot;------------学校总部员工------------&quot;);</span><br><span class="line">        for (Employee e : list2) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------结果</span><br><span class="line">~~~使用迪米特法则的改进~~~</span><br><span class="line">------------学院员工------------</span><br><span class="line">学院员工id= 0</span><br><span class="line">学院员工id= 1</span><br><span class="line">学院员工id= 2</span><br><span class="line">学院员工id= 3</span><br><span class="line">学院员工id= 4</span><br><span class="line">学院员工id= 5</span><br><span class="line">学院员工id= 6</span><br><span class="line">学院员工id= 7</span><br><span class="line">学院员工id= 8</span><br><span class="line">学院员工id= 9</span><br><span class="line">------------学校总部员工------------</span><br><span class="line">学校总部员工id= 0</span><br><span class="line">学校总部员工id= 1</span><br><span class="line">学校总部员工id= 2</span><br><span class="line">学校总部员工id= 3</span><br><span class="line">学校总部员工id= 4</span><br></pre></td></tr></table></figure><h2 id="七、合成复用原则"><a href="#七、合成复用原则" class="headerlink" title="七、合成复用原则"></a>七、合成复用原则</h2><ul><li>尽量使用组合/聚合的方式，不是使用继承。</li></ul><h2 id="类之间关系"><a href="#类之间关系" class="headerlink" title="类之间关系"></a>类之间关系</h2><p>所有都可以归为依赖。</p><ul><li><strong>依赖：</strong><ul><li><strong>通过方法参数传递依赖进来。</strong></li><li>类中用到了对方。</li><li>类成员属性</li><li>方法返回类型</li><li>方法接收参数</li><li>方法中使用</li></ul></li><li>**泛化(继承):**依赖关系的特例<ul><li>泛化关系就是继承关系。</li></ul></li><li><strong>实现：</strong>依赖关系的特例<ul><li>类实现了某一接口。</li></ul></li><li><strong>关联：</strong>依赖关系的特例。类与类之间的联系。<ul><li>具有导航性(单向或双向)，多重性(一对一、一对多等)</li><li>如人和身份证类</li></ul></li><li><strong>聚合：</strong>关联关系的特例。<ul><li><strong>添加类属性，通过方法设置进来。</strong></li><li>整体与部分的关系，整体与部分可以分开。即可有可无。</li><li>导航性(a聚合b还是b聚合类)，多重性(单聚合-聚合一个还是多聚合-聚合多个)</li><li>如：人和身份证、台式主机和显示器。</li></ul></li><li><strong>组合：</strong>关联关系的特例。<ul><li><strong>构建属性直接new一个出来。</strong></li><li>整体与部分的关系，整体与部分不可分开。</li><li>随着当前类创建而创建，销毁而销毁。</li><li>如：人和自己的头</li><li>级联删除即组合关系。</li></ul></li></ul><h2 id="设计原则核心思想"><a href="#设计原则核心思想" class="headerlink" title="设计原则核心思想"></a>设计原则核心思想</h2><ul><li>找出可能需变化之处独立出来，不要和不需变化的代码混写。</li><li>针对接口编程，不是具体实现类编程</li><li>为交互对象之间低耦合设计努力</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】数据访问</title>
      <link href="/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/"/>
      <url>/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<ul><li>无论何种jdbc都需要引入mysql驱动依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一、整合jdbc"><a href="#一、整合jdbc" class="headerlink" title="一、整合jdbc"></a>一、整合jdbc</h2><p>1-引入jdbc依赖jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2-配置文件添加数据源配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb?characterEncoding=UTF-8&amp;&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>3-测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootDataJdbcApplicationTests</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置使用druid数据源"><a href="#配置使用druid数据源" class="headerlink" title="配置使用druid数据源"></a>配置使用druid数据源</h3><h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><p>druid可以在各种jdbc中使用，其是作为数据源，可以用也可以不用。不配置druid就会使用springboot默认数据源。<br>1-引入druid依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入自定义数据源druid--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2-配置文件指定数据源类型</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb?characterEncoding=UTF-8&amp;&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><h4 id="修改druid配置"><a href="#修改druid配置" class="headerlink" title="修改druid配置"></a><strong>修改druid配置</strong></h4><p>需要log4j日志支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb?characterEncoding=UTF-8&amp;&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#   数据源其他配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>手动配置返回DataSource类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 切换数据源，自定义dataSource类加载数据源为druid配置</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置druid的监控"><a href="#配置druid的监控" class="headerlink" title="配置druid的监控"></a><strong>配置druid的监控</strong></h4><p>配置类中添加servlet和filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切换数据源，自定义dataSource类加载数据源为druid配置</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">druid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置druid的监控</span></span><br><span class="line">    <span class="comment">// 1-配置一个管理后台的servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">servletRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>); <span class="comment">// 监控登录名</span></span><br><span class="line">        initParams.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">// 监控登录密码</span></span><br><span class="line">        initParams.put(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;&quot;</span>);  <span class="comment">// 默认允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">&quot;deny&quot;</span>,<span class="string">&quot;192.168.121.1&quot;</span>); <span class="comment">// 拒绝谁访问</span></span><br><span class="line">        servletRegistrationBean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2-配置一个web监控filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">WebStatFilter</span>());</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>); <span class="comment">// 不拦截某些资源</span></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>)); <span class="comment">// 拦截哪些请求</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问【<a href="http://localhost:8080/druid/index.html%E3%80%91%E6%9F%A5%E7%9C%8Bdruid%E7%9B%91%E6%8E%A7%E5%99%A8">http://localhost:8080/druid/index.html】查看druid监控器</a><br><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210103010750827-1873644001.png"></p><h2 id="二、整合mybatis"><a href="#二、整合mybatis" class="headerlink" title="二、整合mybatis"></a>二、整合mybatis</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入数据源druid--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件设置配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&amp;&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#   数据源其他配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>无论使用注解还是配置文件方式都需要通过@Mapper或者@Mapperscan将接口扫描装配到容器中</strong></p></blockquote><h4 id="1-注解方式"><a href="#1-注解方式" class="headerlink" title="1-注解方式"></a><strong>1-注解方式</strong></h4><p>编写实体类（需要注意字段映射，即实体类字段和数据库一致） 如不一致，需配置驼峰转换映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">----------实体类</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grade</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer gid;</span><br><span class="line">    <span class="keyword">private</span> String gradeName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getGid</span><span class="params">()</span> &#123; <span class="keyword">return</span> gid; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGid</span><span class="params">(Integer gid)</span> &#123;<span class="built_in">this</span>.gid = gid;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGradeName</span><span class="params">()</span> &#123;<span class="keyword">return</span> gradeName;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGradeName</span><span class="params">(String gradeName)</span> &#123;<span class="built_in">this</span>.gradeName = gradeName; &#125;</span><br><span class="line">）</span><br><span class="line"></span><br><span class="line">----------驼峰转换映射配置：添加配置类</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConfigurationCustomizer <span class="title function_">configurationCustomizer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConfigurationCustomizer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> &#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加mapper类(需加注解@Mapper,这样mybatis才能自动装配上)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GradeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(value = &quot;select * from grade where gid=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Grade <span class="title function_">getGradeById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(value = &quot;delete from grade where gid=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteGradeById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(value = &quot;insert into grade(grade_name) value(#&#123;gradeName&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys= true,keyProperty = &quot;gid&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertGrade</span><span class="params">(Grade grade)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(value = &quot;update grade set grade_name=gradeName where gid=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updataGrade</span><span class="params">(Grade grade)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line"><span class="comment">//如果mapper类上不加注解@Mapper，可以在启动类上加上mapper扫描注解</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(value = &quot;com.xiaoai.datamybatis.mapper&quot;)</span> <span class="comment">// 批量扫描mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootDataMybatisApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(SpringbootDataMybatisApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GradeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    GradeMapper gradeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/grade/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Grade <span class="title function_">getGrade</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gradeMapper.getGradeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210103145739534-830521067.png"></p><h4 id="2-配置文件方式"><a href="#2-配置文件方式" class="headerlink" title="2-配置文件方式"></a><strong>2-配置文件方式</strong></h4><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer gradeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getGradeId</span><span class="params">()</span> &#123;<span class="keyword">return</span> gradeId; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGradeId</span><span class="params">(Integer gradeId)</span> &#123;<span class="built_in">this</span>.gradeId = gradeId;&#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;  <span class="built_in">this</span>.id = id; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;<span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123; <span class="built_in">this</span>.age = age;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;<span class="keyword">return</span> sex; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;<span class="built_in">this</span>.sex = sex; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写mapper类：UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加主配置文件和mapper映射配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">----------主配置</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启驼峰转换--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---------映射配置</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-// mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xiaoai.datamybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.datamybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM testuser WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO testuser(name,age,sex,grade) VALUES(#&#123;name&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;gId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件加载配置映射文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210103155403504-514159664.png"></p><blockquote><p>配置文件和注解可以一起使用</p></blockquote><h2 id="三、整合jpa"><a href="#三、整合jpa" class="headerlink" title="三、整合jpa"></a>三、整合jpa</h2><p>1-引入spring-boot-starter-data-jpa</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2-创建Entity实体类标注JPA注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">// 告诉jpa这是一个实体类(和数据库表映射的类)</span></span><br><span class="line"><span class="meta">@Table(name = &quot;jpa_user&quot;)</span> <span class="comment">// 标识数据库对应的表，如果省略，默认表名就是类名首字母小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  <span class="comment">// 主键生成策略 自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;,length = 50)</span> <span class="comment">// 和数据库对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">// 属性省略，列名默认就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123; <span class="built_in">this</span>.id = id;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;<span class="built_in">this</span>.name = name;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123; <span class="built_in">this</span>.sex = sex;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建接口继承JpaRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承jpa的JpaRepository来完成对数据库操作  泛型：1=操作的实体类，2=实体类中主键类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User,Integer&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、配置文件配置数据源  及可配置jpa相关基本配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.121.128:3306/test?characterEncoding=UTF-8&amp;&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment"># 更新或者出具数据库表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">      <span class="comment"># 控制台显示sql</span></span><br><span class="line">      <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>5、测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过id查询</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入一条数据</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">insertUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">saveUser</span> <span class="operator">=</span> userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> saveUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210103170444771-794896050.png"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】总结</title>
      <link href="/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E6%80%BB%E7%BB%93/"/>
      <url>/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>引入父工程，父工程里会检测个人编写的配置文件，父工程引用了父工程:spring-boot-dependencies,其限定了所需要的jar的一些版本，实现jar版本的管理</li></ul><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><ul><li>@SpringBootApplication注解包含<ul><li>@SpringBootConfiguration注解 <ul><li>包含@Configuration 即最终配置注解</li></ul></li><li>@EnableAutoConfiguration 自动配置  <ul><li>包含@Import({AutoConfigurationImportSelector.class})  即引入了配置类</li><li>AutoConfigurationImportSelector类：加载配置</li><li> 同配置类包下：META-INF/spring.factories文件  -》ServletWebServerFactoryAutoConfiguration类引入了 -》ServerProperties类通过注解  -》@ConfigurationProperties加载默认配置 通过其josn文件</li></ul></li><li>@ComponentScan  组件扫描  即自动扫描@SpringBootApplication注解同级及子孙包</li></ul></li></ul><blockquote><p>在启动类上添加@SpringBootApplication即可具备以上三个注解作用。</p></blockquote><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p><code>父工程</code>扫描文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fi1tering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$ &#123;basedir&#125; /src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>\</span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/application*. yml&lt;/ include&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/application*.yaml&lt;/ include&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/application*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resourcs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>要修改配置只要覆盖默认配置即可 如：<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#当前web应用的名称</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/demo1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="yml语法"><a href="#yml语法" class="headerlink" title="yml语法"></a>yml语法</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对象配置</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行内配置</span></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">18</span>,<span class="attr">addr:</span> <span class="string">beijing</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数组</span></span><br><span class="line"><span class="attr">city:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tianjin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chongqing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="attr">city:</span> [<span class="string">beijing</span>,<span class="string">tianjin</span>,<span class="string">chongqing</span>,<span class="string">shanghai</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据、集合（对象数据）</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lucy</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">17</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">tianjing</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="attr">student:</span> [&#123;<span class="attr">name:</span> <span class="string">tom</span>,<span class="attr">age:</span> <span class="number">18</span>,<span class="attr">addr:</span> <span class="string">beijing</span>&#125;,&#123;<span class="attr">name:</span> <span class="string">lucy</span>,<span class="attr">age:</span> <span class="number">17</span>,<span class="attr">addr:</span> <span class="string">tianjing</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># map配置</span></span><br><span class="line"><span class="attr">map:</span></span><br><span class="line">  <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line">  <span class="attr">key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure><h3 id="获取配置文件所定义的属性"><a href="#获取配置文件所定义的属性" class="headerlink" title="获取配置文件所定义的属性"></a>获取配置文件所定义的属性</h3><ul><li>方式1：@Value（”${配置名}”）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;person.addr&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String addr;</span><br></pre></td></tr></table></figure></li><li>方式2：@ConfigurationProperties(prefix = “配置前缀”)  +  getxxx()方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span>放在类上</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义属性</span></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"><span class="comment">//提供get方法：</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;<span class="built_in">this</span>.name = name;&#125;</span><br></pre></td></tr></table></figure></li><li>@EnableConfigurationProperties(属性类字节码对象) 可以载入属性类</li></ul><h2 id="整合其他技术"><a href="#整合其他技术" class="headerlink" title="整合其他技术"></a>整合其他技术</h2><p><strong>整合junit测试</strong></p><ul><li>引入启动器</li><li>编写测试类，测试类需添加注解</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes = 启动类字节码文件)</span><br></pre></td></tr></table></figure><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h3 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h3><p>可以导入配置文件处理器，这样在配置文件和实体类可以建立映射</p><ul><li>@ConfigurationProperties(prefix=”xxx”) 通过前缀把配置中的信息绑定到实体类中</li><li>@Value(“${xxx}”)  绑定配置文件中属性到实体类属性</li><li>@PropertySource(value=-“classpath:xxxx.xx”) 引入属性文件(即导入spring配置文件)</li><li>@ImportResource(“locations={classth:xxx.xml,xxxx.xxx,…}”) 自己配置的文件不生效，通过注解引入配置文件，让其生效</li></ul><p>多配置文件时，激活指定的配置文件（激活程序某一种环境）：</p><ul><li><p>properties：</p><ul><li>先给配置文件名称添加标识：如：application-dev.properties<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application.properties</span></span><br><span class="line"><span class="attr">application-dev.properties</span></span><br><span class="line"><span class="attr">application-prod.properties</span></span><br></pre></td></tr></table></figure></li><li>在默认配置文件中指定配置文件： 如：spring.profiles.active = xxx<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure></li><li>当启动后其会使用application-dev.properties这个配置文件了</li></ul></li><li><p>yml: yml支持多文档块方式，即通过”—“来分隔表示不同的配置文件。修改：在默认的文档块中指定</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port: 8081spring:</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">prod</span>  <span class="comment"># 由于激活了prod，所以程序运行后会使用prod配置块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profilis:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>配置文件加载顺序：先加载带后缀的，先加载外部的后加载内部的。</p></blockquote><h3 id="二、自动配置"><a href="#二、自动配置" class="headerlink" title="二、自动配置"></a>二、自动配置</h3><p>springboot就是为了减去繁杂的配置而生，个人认为一切配置都有一个与之对应的配置类，就是把配置文件都转换成了配置类来进行操作。</p><ul><li>1-开启：@EnableAutoConfiguration –》 <ul><li>利用@EnableAutoConfigurationImportSelector给容器中导入组件 –》 </li><li>springFacrorieaLoader.loadFacroryNames() 扫描所有jar包装路径下MERA-INF/spring.facrories</li></ul></li><li>xxxAutoConfigurationl类都是容器中一个组件(即类)，都加入到了容器中用来做自动配置<ul><li>xxxProperties是通过前缀封装了配置文件中属性的类，属性与配置文件中相关配置绑定</li></ul></li><li>使用springboot，即可以看其有没有自动配置类，【有&amp;不满意】可以通过配置文件覆盖来修改【没有】自己编写配置类并添加到配置类，自己编写的配置类还可以和配置文件绑定来做配置。</li></ul><p>**派生注解：@ConditionalXXX **</p><ul><li>作用：必须是该注解指定的条件成立，才能给容器中添加组件，添加了组件配置里面配置的内容才能生效</li><li>如在某个配置类上加了这个注解：@conditionalOnClass({xxx.class，xxx.class，…})  即表示：项目中有这些类，配置才能生效</li></ul><table><thead><tr><th align="left">@Conditional扩展注解</th><th align="left">作用（判断是否满足当前指定条件)</th></tr></thead><tbody><tr><td align="left">@ConditionalOnJava</td><td align="left">系统的java版本是否符合要求</td></tr><tr><td align="left">@ConditionalOnBean</td><td align="left">容器中存在指定Bean;</td></tr><tr><td align="left">@ConditionalOnMissingBean</td><td align="left">容器中不存在指定Bean;</td></tr><tr><td align="left">@ConditionalOnExpression</td><td align="left">满足spEL表达式指定</td></tr><tr><td align="left">@ConditionalOnClass</td><td align="left">系统中有指定的类</td></tr><tr><td align="left">@ConditionalOnMissingClass</td><td align="left">系统中没有指定的类</td></tr><tr><td align="left">@ConditionalOnSingleCandidate</td><td align="left">容器中只有一个指定的Bean，或者这个Bean是首选Beat</td></tr><tr><td align="left">@ConditionalOnProperty</td><td align="left">系统中指定的属性是否有指定的值</td></tr><tr><td align="left">@ConditionalOnResource</td><td align="left">类路径下是否存在指定资源文件</td></tr><tr><td align="left">@ConditionalOnWebApplication</td><td align="left">当前是web环境</td></tr><tr><td align="left">@ConditionalOnNotWebApplication</td><td align="left">当前不是web环境</td></tr><tr><td align="left">@ConditionalOnJndi</td><td align="left">JNDI存在指定项</td></tr></tbody></table><p>自动配置类必须在一定的条件下才能生效：</p><blockquote><p>配置文件中配置：<code>debug=true</code> 即开启springboot的debug模式<br>在控制台就可以知道哪些类用了自动配置，哪些类没有用自动配置(因为配置的条件不满足)</p></blockquote><p><img src="https://img2020.cnblogs.com/blog/1594818/202011/1594818-20201121163928399-2046859621.png"></p><h3 id="三、日记处理"><a href="#三、日记处理" class="headerlink" title="三、日记处理"></a>三、日记处理</h3><ul><li>springboot底层是spring框架</li><li>spring默认用jcl日记框架</li><li>而springboot用的是slf4j抽象层和logback实现层。</li></ul><h4 id="日记门面-即抽象层或接口层"><a href="#日记门面-即抽象层或接口层" class="headerlink" title="日记门面(即抽象层或接口层)"></a><strong>日记门面(即抽象层或接口层)</strong></h4><ul><li>jcl(jakarta commons-logging)</li><li>slf4j(simple logging facade for java)</li><li>jboss-logging</li><li>…</li></ul><h4 id="日志实现"><a href="#日志实现" class="headerlink" title="日志实现"></a><strong>日志实现</strong></h4><ul><li>log4j</li><li>jul(java.util.logging)</li><li>log4j2</li><li>logback</li><li>…</li></ul><blockquote><p>可以说logback是对log4j的完善升级。</p></blockquote><h4 id="日志的使用"><a href="#日志的使用" class="headerlink" title="日志的使用"></a><strong>日志的使用</strong></h4><ul><li>接口搭配对应的实现类<blockquote><p>程序–》接口层面–》对应的实现类</p></blockquote></li><li>接口搭配非对应实现类，需要通过适配器类来转换<blockquote><p>程序–》接口层面–》适配器类层–》非对应实现类</p></blockquote></li></ul><p>遗留问题：框架中使用了其他框架，其他框架各自使用了不同日志，如何统一日志记录，使用同一日志框架进行输出呢？<br>解决：即通过适配器类来偷换jar实现包，以完成统一框架输出</p><ul><li>1-系统中其他日志框架先排除出去</li><li>2-使用中间包来替换原有日志框架</li><li>3-导入所使用日志接口的实现类</li></ul><h4 id="springboot日志关系-使用"><a href="#springboot日志关系-使用" class="headerlink" title="springboot日志关系(使用)"></a><strong>springboot日志关系(使用)</strong></h4><ul><li>1-springboot底层使用slf4j + logback的方式进行日志记录</li><li>2-springboot把其他日志都替换成了slf4j 接口来完成统一</li><li>3-即把中间替换包引入</li><li>4-如果引入其他框架，一定要把该框架默认日志依赖先移除</li></ul><p>springboot能自动适配所有日志，底层使用【slf4j】 + 【logback】的方式记录日志，要想换成其他日志实现框架时，只需要把这个框架的日志配置放入到程序资源文件即可。</p><h4 id="日志类：Logger类"><a href="#日志类：Logger类" class="headerlink" title="日志类：Logger类"></a><strong>日志类：Logger类</strong></h4><ul><li><p>获取：loggerFacroty.getLogger(getClass())</p></li><li><p>.trace(“xxxx信息”);</p></li><li><p>.debug(“xxxx信息”);</p></li><li><p>.info(“xxxx信息”);</p></li><li><p>.warn(“xxxx信息”);</p></li><li><p>.error(“xxxx信息”);</p><blockquote><p>以上五个方法也是日记的级别，由低到高。 spring默认设置日志级别是：info<br>可以调整日志的输出级别：其只会打印所设置级别即后面级别的日志信息。 </p></blockquote></li><li><p>设置级别：在配置文件中指定–logging.level.xxx包 = 级别名称  (不填写具体的包，即每个包的日记级别都设置)</p></li><li><p>logging.file = 文件名或路径  –表示把日志打印到所设置的文件或路径中</p></li><li><p>logging.path = 指定path  –表示在指定目录下记录日志（与logging.file是冲突的，如果设置了logging.file后就会在其设置的文件或路径下输出日志）</p></li><li><p>logging.pattern.console = xxxxx  –设置在控制台输出的日志格式</p><ul><li>如：%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n</li></ul></li><li><p>logging.pattern.file = xxxxx  –设置在指定文件中输出的日志格式</p></li></ul><h4 id="profile特性"><a href="#profile特性" class="headerlink" title="profile特性"></a><strong>profile特性</strong></h4><p>多环境日志的格式切换</p><ul><li><p>1-给日志配置文件填加【-spring】后缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logback-spring.xml</span><br></pre></td></tr></table></figure></li><li><p>2-在日志配置文件中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.ssS&#125; ----&gt;[%thread] ---&gt;%-5level %logger&#123;50&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;!dev&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.sss&#125; ==== [%thread] ==== %-5level %logger&#123;50]&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="指定日志配置文件"><a href="#指定日志配置文件" class="headerlink" title="指定日志配置文件"></a><strong>指定日志配置文件</strong></h4><p>给类路径下放上日志框架自己的配置文件即可，springboot就不使用默认的日志配置了</p><h4 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a><strong>切换日志框架</strong></h4><ul><li>即上面所提的适配器类模式：把对应其他框架通过中间替换类替换统一接口</li><li>把默认日志实现类去掉，导入所用日志实现类</li><li>把日志配置文件导入到类路径下。</li></ul><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="springboot对静态资源的映射规则"><a href="#springboot对静态资源的映射规则" class="headerlink" title="springboot对静态资源的映射规则"></a>springboot对静态资源的映射规则</h3><p>可以取webjars网站下载对应的静态资源对应的maven ，如jq、sootstrap等<br><strong>webjars</strong>以jar包的方式引入静态资源  </p><ul><li>1-【/webjars/**】访问，都去classpath:/META-INF/resources/webjars/所找资源;<br><img src="https://img2020.cnblogs.com/blog/1594818/202011/1594818-20201122234236041-132225176.png"></li></ul><p><img src="https://img2020.cnblogs.com/blog/1594818/202011/1594818-20201123000632710-1519783494.png"></p><ul><li><p>2-【/**】访问的任何资源，如果没有处理都默认去以下路径查找</p><ul><li>“classpath:/META-INF/resources/“</li><li>“classpath:/resources/“</li><li>“classpath:/static/“</li><li>“classpath:/public/“</li><li>“/“<br><img src="https://img2020.cnblogs.com/blog/1594818/202011/1594818-20201123001055775-1239380531.png"></li></ul></li><li><p>3-【欢迎页】：静态资源文件下所有的index.html</p></li><li><p>4-【网页图标】：所有的**/favicon.ico都是在静态资源文件下找;</p></li></ul><p>修改默认的静态资源访问路径：配置文件配置：spring.resources.static-locations=路径，路径，…  如：classpath:/hello/,classpath:/xiaoai/</p><h3 id="模板引擎：thymeleaf"><a href="#模板引擎：thymeleaf" class="headerlink" title="模板引擎：thymeleaf"></a>模板引擎：thymeleaf</h3><p>模板引擎：jsp、velocity、freemarker、thymeleaf</p><p><strong>thymeleaf的使用</strong></p><ul><li>引入thymeleaf，即maven添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">grouprd</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    &lt;-- springboot2以上版本不用改这些 --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--布局功能的支持程序thymeLeaf3主程序layout2以上版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>只要把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染</li></ul><h4 id="thymeleaf的语法"><a href="#thymeleaf的语法" class="headerlink" title="thymeleaf的语法"></a><strong>thymeleaf的语法</strong></h4><p>可以在页面上导入名称空间：<html xmlns:th="http://www.thymeleaf.org"> 可以不导入，导入就是为了获得语法提示</p><ul><li>语法<br><img src="https://img2020.cnblogs.com/blog/1594818/202011/1594818-20201123003701376-1563099079.png"><blockquote><p>可以通过【th:属性名=${xxx}】修改任意属性<br><img src="https://img2020.cnblogs.com/blog/1594818/202011/1594818-20201123005110934-731033128.png"></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】缓存等</title>
      <link href="/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E7%BC%93%E5%AD%98%E7%AD%89/"/>
      <url>/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E7%BC%93%E5%AD%98%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h2 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h2><blockquote><p>@SpringBootApplication 带有 @EnableAutoConfiguration  带有 @Import  导入相关配置类</p></blockquote><p>默认导入：【AutoConfigurationImportSelector】选择导入一些自动配置的bean 类是位于org.springframework.boot.autoconfigure包下。</p><p><strong>spring-boot-autoconfigure-版本号.jar</strong></p><p> 该jar里就有一个spring.factories文件<br>【spring.factories文件】：springboot启动后扫描该文件获取需要自动注入的类</p><h3 id="类自动注入"><a href="#类自动注入" class="headerlink" title="类自动注入"></a>类自动注入</h3><p>(参考自定义启动器)</p><p><strong>@Configuration</strong>用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。</p><p><strong>自动注入步骤：</strong></p><ul><li>1-创建xxxProperties配置类，并通过【@ConfigurationProperties(prefix=”配置前缀”)】扫描配置文件配置注入到配置类中</li><li>2-创建xxxConfig类，通过【@Configuration】来声明了是一个配置类 可用@Conditionalxxx来进行条件判断是否注入到容器</li><li>3-配置类中可【@Bean】修饰方法，在方法中配置bean的相关属性并返回某个bean，<ul><li>4-其他bean中可通过【@Autowired】注解引入配置类使用配置类</li></ul></li></ul><h2 id="缓存cache"><a href="#缓存cache" class="headerlink" title="缓存cache"></a>缓存cache</h2><p>可在service层方法上添加注解，实现缓存。</p><ul><li>【**@Cacheable()**】添加缓存<br>先执行注解后执行方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//属性：</span><br><span class="line"></span><br><span class="line">cacheNames/value：指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存；</span><br><span class="line">key：缓存数据使用的key；可以用它来指定。默认是使用方法参数的值  1-方法的返回值</span><br><span class="line">    编写SpEL，如：</span><br><span class="line">          #id;参数id的值   </span><br><span class="line">          #a0  #p0  #root.args[0]参数第n位   </span><br><span class="line">          自定义：这里方法名+参数(如：getEmp[2])</span><br><span class="line">keyGenerator：key的生成器；可以自己指定key的生成器的组件id  key/keyGenerator：二选一使用;</span><br><span class="line">cacheManager：指定缓存管理器；或者cacheResolver指定获取解析器</span><br><span class="line">condition：指定符合条件的情况下才缓存；</span><br><span class="line">    condition = &quot;#id&gt;0&quot;</span><br><span class="line">    condition = &quot;#a0&gt;1&quot;：第一个参数的值&gt;1的时候才进行缓存</span><br><span class="line">unless:否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断</span><br><span class="line">    unless = &quot;#result == null&quot;</span><br><span class="line">    unless = &quot;#a0==2&quot;:如果第一个参数的值是2，结果不缓存；</span><br><span class="line">sync：是否使用异步模式</span><br></pre></td></tr></table></figure></li><li>【**@CachePut()**】添加/更新缓存<br>先执行方法后执行注解<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修改了数据库的某个数据，同时更新缓存；</span><br><span class="line">运行时机：</span><br><span class="line">    1、先调用目标方法</span><br><span class="line">    2、通过key将方法的结果缓存起来  如果缓存已有数据，则更新缓存数据</span><br></pre></td></tr></table></figure></li><li>【**@CacheEvict()**】清除缓存<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//属性：</span><br><span class="line"></span><br><span class="line">key：指定要清除的数据</span><br><span class="line">allEntries = true：指定清除这个缓存中所有的数据</span><br><span class="line">beforeInvocation =   缓存的清除是否在方法之前执行  默认false</span><br><span class="line">    false：清除缓存操作是在方法执行之后执行，如果出现异常缓存就不会清除</span><br><span class="line">    true：清除缓存操作是在方法运行之前执行，无论方法是否出现异常，缓存都清除</span><br></pre></td></tr></table></figure></li><li>【**@Caching**】定义复杂的缓存规则<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如：把数据通过不同的key添加到缓存中</span><br><span class="line">@Caching(</span><br><span class="line">     cacheable = &#123;</span><br><span class="line">         @Cacheable(/*value=&quot;emp&quot;,*/key = &quot;#lastName&quot;)</span><br><span class="line">     &#125;,</span><br><span class="line">     put = &#123;</span><br><span class="line">         @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.id&quot;),</span><br><span class="line">         @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.email&quot;)</span><br><span class="line">     &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>【**@CacheConfig()**】抽取缓存的公共配置<br>该注解可在类上面使用，<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@CacheConfig(cacheNames=&quot;缓存名称&quot;/*,cacheManager = &quot;缓存管理器&quot;*/) </span><br></pre></td></tr></table></figure></li></ul><h3 id="缓存中间件"><a href="#缓存中间件" class="headerlink" title="缓存中间件"></a>缓存中间件</h3><h4 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis"></a>整合<strong>redis</strong></h4><p>……</p><h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><p><strong>队列（queue）：</strong>点对点消息通信（point-to-point） </p><p><strong>主题（topic）：</strong>发布（publish）/订阅（subscribe）消息通信</p><p>点对点式： </p><ul><li>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容， 消息读取后被移出队列</li><li>消息只有唯一的发送者和接受者，但并不是说只能有一个接收者</li></ul><p>发布订阅式：</p><ul><li>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么 就会在消息到达时同时收到消息</li></ul><p>JMS（Java Message Service）JAVA消息服务： 基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现<br>AMQP（Advanced Message Queuing Protocol） 高级消息队列协议，也是一个消息代理的规范，兼容JMS RabbitMQ是AMQP的实现</p><h3 id="消息中间件-【rabbitMQ】"><a href="#消息中间件-【rabbitMQ】" class="headerlink" title="消息中间件 【rabbitMQ】"></a>消息中间件 【rabbitMQ】</h3><p>消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构</p><ul><li>核心概念<br>【Message】消息。由消息头和消息体组成。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">消息头则由一系列的可选属性组成，这些属性包括:</span><br><span class="line"></span><br><span class="line">routing-key（路由键）</span><br><span class="line">priority（相对于其他消息的优先权）</span><br><span class="line">delivery-mode（指出该消息可能需要持久性存储）等</span><br></pre></td></tr></table></figure>【Publisher】消息生产者。一个向交换器发布消息的客户端应用程序<br>【Exchange】交换器。接收生产者发送的消息并将消息路由个服务器中的队列。可理解成一个由绑定构成的路由表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">交换器类型：</span><br><span class="line">1-direct(默认)：单播。将消息发给路由键对应队列</span><br><span class="line">2-fanout：多播。将消息发给所有队列</span><br><span class="line">3-topic： 将消息安装匹配符发给对应的队列 通配符：*=单个单词  #=0个或多个单词</span><br><span class="line">4-headers：</span><br></pre></td></tr></table></figure>【Queue】消息队列。消息的容器，也是消息的终点。一个消息可投入一个或多个队列。 消息一直在队列里，等待消费者连接该队列将其取走。<br>【Bingding】绑定。消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则。 Exchange和Queue的绑定可以是多对多的关系。<br>【Connection】 网络连接，比如一个TCP连接。<br>【Channel 】信道，多路复用连接中的一条独立的双向数据流通道。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">信道是建立在真实的TCP连接内的虚拟连接，</span><br><span class="line">AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。</span><br><span class="line">因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</span><br></pre></td></tr></table></figure><p>【Consumer】 消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。<br>【Virtual Host】 虚拟主机，表示一批交换器、消息队列和相关对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每个vhost本质上就是一个mini版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。</span><br><span class="line">vhost是 AMQP 概念的基础，必须在连接时指定</span><br><span class="line">RabbitMQ默认的vhost 是/ 。 </span><br><span class="line">Broker 表示消息队列服务器实体</span><br></pre></td></tr></table></figure><p><strong>springboot中关于rabbitMQ需要关注</strong></p><ul><li>RabbitTemplate类 消息发送与接收</li><li>@RabbitListener注解  消息的监听</li><li>AmqpAdmin类  关于消息组件的管理，如交换器创建、队列等</li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】自定义启动器</title>
      <link href="/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
      <url>/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义启动器"><a href="#自定义启动器" class="headerlink" title="自定义启动器"></a>自定义启动器</h2><p>一般定义两个项目：启动器项目，自动配置项目<br>一个项目只是引入自动配置项目坐标，让其他项目作为启动器引入，这样间接引入了个人的自动配置项目。<br>另一个项目才是真正写自动配置的</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h3><p>1-编写业务功能类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HelloProperties <span class="title function_">getHelloProperties</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.helloProperties = helloProperties; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHell</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+ <span class="string">&quot;-&quot;</span> +name + helloProperties.getSuffix();  <span class="comment">// 使用配置文件中的相关配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2-编写properties配置类【@ConfigurationProperties(prefix = “xxx”)】引入配置：读取配置文件 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;xiaoai.hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPrefix</span><span class="params">()</span> &#123; <span class="keyword">return</span> prefix;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrefix</span><span class="params">(String prefix)</span> &#123; <span class="built_in">this</span>.prefix = prefix;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSuffix</span><span class="params">()</span> &#123; <span class="keyword">return</span> suffix;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuffix</span><span class="params">(String suffix)</span> &#123;<span class="built_in">this</span>.suffix = suffix; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3-定义自动配置类(加【@Configuration】)<br>可加相关条件注解【@Conditionalxxx】如：@ConditionalOnwebApplication web应用才生效<br>加【@EnableConfigurationProperties(xxxProperties.class)】使配置属性类生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在自动配置类中可以做相依业务: 如通过@Bean注解把相关实例注入到ioc容器中。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用才生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span> <span class="comment">// 引入配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties; <span class="comment">// 自动注入配置类实例</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HelloService <span class="title function_">helloService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HelloService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloService</span>();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-自动配置类生效需在【MATE-INF/spring.factories】下添加</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.Enab1eAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string"># 自动配置类全路径</span></span><br></pre></td></tr></table></figure><p>5-配置项目安装到maven仓库中<br>5-自定义启动器项目并引入配置项目依赖后安装到maven仓库中<br>6-其他项目通过maven引入自定义启动器坐标</p><blockquote><p>如以上例子：在其他项目引入该启动器配置后可以自动注入HelloService实例调用sayHellAtguigu方法使用配置文件中的相关</p></blockquote><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>引入自定义启动器依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xiaoai.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xiaoaiTest-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件添加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xiaoai.hello.prefix</span>=<span class="string">&#x27;the world say: &#x27;</span></span><br><span class="line"><span class="attr">xiaoai.hello.suffix</span>=<span class="string">&#x27;,hello!&#x27;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    </span><br><span class="line">    helloService.sayHell(<span class="string">&quot;xiaoai&quot;</span>); <span class="comment">//输出：the world say: xiaoai,hello！</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】配置</title>
      <link href="/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E9%85%8D%E7%BD%AE/"/>
      <url>/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot中配置"><a href="#springboot中配置" class="headerlink" title="springboot中配置:"></a>springboot中配置:</h2><ul><li>1-主要通过自己编写配置类(可继承xx配置类)并加上@Configuration注解，</li><li>2-在自己写的配置类上编写方法通过@Bean注解返回对应配置类对象</li></ul><h2 id="配置嵌入式servlet容器"><a href="#配置嵌入式servlet容器" class="headerlink" title="配置嵌入式servlet容器"></a>配置嵌入式servlet容器</h2><ul><li>springboot2.x后<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置嵌入式的servlet容器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebServerFactoryCustomizer <span class="title function_">webServerFactoryCustomizer</span><span class="params">()</span>&#123; <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableWebServerFactory&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConfigurableWebServerFactory factory)</span> &#123;</span><br><span class="line">            factory.setPort(<span class="number">8083</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="web三大组件配置"><a href="#web三大组件配置" class="headerlink" title="web三大组件配置"></a>web三大组件配置</h2><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。<br>注册三大组件通过配置类中方法返回对应配置类实例.</p><h3 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h3><p>ServletRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--------自定义servlet</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;hello myservlet!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------配置类</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletRegistrationBean <span class="title function_">myServlet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ServletRegistrationBean</span> <span class="variable">servletRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">MyServlet</span>(), <span class="string">&quot;/myServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>FilterRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">--------自定义filter</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyFileter process....&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------配置类</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">myFilter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">filterRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">    filterRegistrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">MyFilter</span>());</span><br><span class="line">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/htllo&quot;</span>,<span class="string">&quot;/myServlet&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h3><p>ServletListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">---------自定义listener</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyListener process.... contextInitialized..web启动！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyListener process.... contextDestroyed..web销毁！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------配置类</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title function_">myListener</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">MyListener</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="—"><a href="#—" class="headerlink" title="—-"></a>—-</h3><p>SpringBoot帮我们自动配置SpringMVC的时候，自动的注册SpringMVC的前端控制器;DIspatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line"><span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title function_">dispatcherServletRegistration</span><span class="params">(</span></span><br><span class="line"><span class="params">      DispatcherServlet dispatcherServlet,</span></span><br><span class="line"><span class="params">      WebMvcProperties webMvcProperties, </span></span><br><span class="line"><span class="params">      ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="type">DispatcherServletRegistrationBean</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DispatcherServletRegistrationBean</span>(</span><br><span class="line">            dispatcherServlet,webMvcProperties.getServlet().getPath()); <span class="comment">// </span></span><br><span class="line">      <span class="comment">//默认拦截:/所有请求﹔包静态资源，但是不拦截jsp请求;/*会拦截jsp</span></span><br><span class="line">      <span class="comment">//可以按住ctrl后点击getPath()查看拦截路径，然后在配置文件中修改属性值以修改拦截的请求</span></span><br><span class="line"></span><br><span class="line">      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">      registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">      multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">      <span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切换其他servlet容器"><a href="#切换其他servlet容器" class="headerlink" title="切换其他servlet容器"></a>切换其他servlet容器</h2><p>默认支持：</p><ul><li>tomcat(默认)</li><li>jetty(长连接)</li><li>undertow(不支持jsp)</li></ul><p><strong>切换servlet容器：</strong><br>1-pom.xml文件排除默认tomcat容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2-pom.xml文件引入需要用的容器坐标</p><ul><li>【jetty】<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入其他的servlet容器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jetty容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>【undertow】<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jetty容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="嵌入式servlet容器配置原理"><a href="#嵌入式servlet容器配置原理" class="headerlink" title="嵌入式servlet容器配置原理"></a>嵌入式servlet容器配置原理</h2><p><strong>步骤:</strong></p><ul><li>SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory 【TomcatEmbeddedServletContainerFactory】</li><li>容器中某个组件要创建对象就会惊动后置处理器;【EmbeddedServletContainerCustomizerBeanPostProcessor】只要是嵌入式的Servlet容器工厂，后置处理器就工作;</li><li>后置处理器，从容器中获取所有的【EmbeddedServletContainerCustomizer】调用定制器的定制方法，把配置配置到容器中<br>配置文件中的配置绑定【serverProperties】类，该类也是EmbeddedServletContainerCustomizer类型的定制器</li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】错误处理</title>
      <link href="/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="ErrorMvcAutoConfiguration错误处理的自动配置"><a href="#ErrorMvcAutoConfiguration错误处理的自动配置" class="headerlink" title="ErrorMvcAutoConfiguration错误处理的自动配置"></a>ErrorMvcAutoConfiguration错误处理的自动配置</h2><h3 id="如何定制错误页面"><a href="#如何定制错误页面" class="headerlink" title="如何定制错误页面"></a>如何定制错误页面</h3><p>错误处理步骤:</p><ul><li><p>1、ErrorPageCustomizer  发生错误，该类生效，发出【/error】请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@value(&quot;$&#123;error.path: / error&#125; &quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/error&quot;</span>;系统出现错误以后来到error请求进行处理;( web.xml注册的错误页面规则)</span><br></pre></td></tr></table></figure></li><li><p>2、BasicErrorController  处理默认【/error】请求，返回错误视图对象。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestNapping( &quot;$&#123; server.error.path : $&#123;error.path : / error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicErrorController</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorController</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(produces = &quot;text/html&quot;)</span> <span class="comment">//产生html类型的数据</span></span><br><span class="line"><span class="keyword">public</span> ModelAndview <span class="title function_">errorHtm1</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> &#123;</span><br><span class="line">      <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getstatus( request);</span><br><span class="line">      Map&lt;String，object&gt; model = collections.unmodifiableMap(getErrorAttributes(</span><br><span class="line">      request， isIncludestackTrace(request，MediaType.TEXT_HTNL)));</span><br><span class="line">      response.setstatus ( status.value() );</span><br><span class="line"></span><br><span class="line">      <span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容。</span></span><br><span class="line">      <span class="type">ModelAndview</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolveErrorView(request，response，status，model);</span><br><span class="line">      <span class="keyword">return</span> (modelAndview == <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">ModelAndview</span>( <span class="string">&quot;error&quot;</span>, model) : modelAndview);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">//产生json数据</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String，0bject&gt;&gt; error(HttpServletRequest request)&#123;</span><br><span class="line">      Map&lt;String, object&gt; body = getErrorAttributes(request,</span><br><span class="line">      isIncludeStackTrace( request，MediaType.ALL));</span><br><span class="line">      <span class="type">Httpstatus</span> <span class="variable">status</span> <span class="operator">=</span> getstatus( request) ;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;Map&lt;String，object&gt;&gt;( body,status ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>3、DefaultErrorViewResolver: 解析错误视图，响应页面，去哪个页面由该类决定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">resolveErrorView</span><span class="params">(HttpServletRequest request，HttpStatus status,Map&lt;String, object&gt; model)</span> &#123;</span><br><span class="line">      <span class="type">ModelAndview</span> <span class="variable">modelAndview</span> <span class="operator">=</span> resolve(String.valueof(status)， model);</span><br><span class="line">      <span class="keyword">if</span> (modelAndView == <span class="literal">null</span> <span class="number">8</span>&amp; SERIES_VIEwS.containsKey( status. series()))&#123;</span><br><span class="line">            modelAndview = resolve(SERIES_VIEws.get(status.series( ) )， model ) ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> modelAndview;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ModelAndView <span class="title function_">resolve</span><span class="params">(String viewName，Map&lt;String，object&gt; model)</span>&#123;  <span class="comment">//默认SpringBoot可以去找到一个页面?error/404</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">errorviewWame</span> <span class="operator">=</span> <span class="string">&quot;error/&quot;</span> + viewName ;</span><br><span class="line">      <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">      <span class="type">TemplateAvailabilityProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="built_in">this</span>.templateAvailabilityProviders.getProvider(errorviewName，<span class="built_in">this</span>.applicationcontext ) ;</span><br><span class="line">      <span class="keyword">if</span> ( provider != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorviewName指定的视图地址</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndview</span>( errorViewName, model);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面</span></span><br><span class="line">      <span class="keyword">return</span> resolveResource(errorviewName,model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定制错误响应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1----有模板引擎情况：</span><br><span class="line">【error/状态码】将错误页面命名为[错误状态码.html],放在模板引起文件夹里面的error文件夹下，发生此状态码的错误就会来到对应的页面;</span><br><span class="line">可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先</span><br><span class="line"></span><br><span class="line">2----没有模板引擎（模板引擎找不到这个错误页面)，静态资源文件夹下找</span><br><span class="line"></span><br><span class="line">3----以上都没有错误页面，就默认来到SpringBoot默认的错误提示页面  </span><br><span class="line">逻辑在【BasicErrorController】可找到。</span><br></pre></td></tr></table></figure></li><li><p>4、DefaultErrorAttributes  帮助在页面共享信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">页面能获取的信息：</span><br><span class="line">timestamp：时间戳</span><br><span class="line">status：状态码</span><br><span class="line">error：错误提示</span><br><span class="line">exception：异常对象</span><br><span class="line">message：异常消息</span><br><span class="line">errors: JSR303数据校验的错误都在这里</span><br></pre></td></tr></table></figure></li></ul><h3 id="定制json错误响应数据"><a href="#定制json错误响应数据" class="headerlink" title="定制json错误响应数据"></a>定制json错误响应数据</h3><ul><li><p>1、自定义异常处理类，返回定制json数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNotExistException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotExistException</span><span class="params">()</span>&#123;<span class="built_in">super</span>(<span class="string">&quot;用户不存在！&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义异常处理</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">//1--浏览器和客户端返回的都是json数据</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(UserNotExistException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;user.notexist&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2、转发到/error进行自适应响应效果处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">//2--浏览器和客户端自适应响应页面或json数据</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(UserNotExistException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleException</span><span class="params">(Exception e,HttpServletRequest request)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//传入我们自己的错误状态码4xx 5xx，否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">        request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;user.notexist&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;用户出错了&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;ext&quot;</span>,map); <span class="comment">//把自定义异常数据添加到域，便于在【ErrorAttributes】中获取错误信息添加到默认异常数据中。</span></span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、定制的数据携带出去<br>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController (ErrorController )规定的方法）;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给容器中添加自定义的ErrorAttributes</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title class_">DefaultErrorAttributes</span> &#123; <span class="comment">//定义该错误属性类添加到ioc容器，不仅可以获取到默认错误响应数据，还可以获取到自定义响应数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的map就是页面和json能获取到的所有字段</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="built_in">super</span>.getErrorAttributes(webRequest, options);</span><br><span class="line">        map.put(<span class="string">&quot;company&quot;</span>,<span class="string">&quot;xiaoaiying&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取自定义异常处理器携带的数据</span></span><br><span class="line">        Map&lt;String,Object&gt; ext = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">&quot;ext&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ext&quot;</span>,ext);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】初识</title>
      <link href="/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E5%88%9D%E8%AF%86/"/>
      <url>/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>springboot：搭建spring应用的脚手架，内置tomcat。打成jar包就可以运行<br>自动配置（根据引入的依赖）：解决混乱的依赖管理，简化配置<br><strong>springboot的基本使用</strong>    </p><ul><li><p>1、搭建springboot基本应用</p></li><li><p>2、引入统一父工程，以及需要的启动器</p></li><li><p>3、覆盖默认配置，可在application.properties配置覆盖</p></li><li><p>4、添加引导类：@SpringBootApplication。该注解包含：</p><ul><li>@EnableAutoConfiguration、</li><li>@ConponentScan </li><li>@SpringBootConfiguratin</li></ul></li></ul><h2 id="java配置"><a href="#java配置" class="headerlink" title="java配置"></a><strong>java配置</strong></h2><p><strong>原生java配置：</strong></p><ul><li>@Configura         java类作为一个配置类</li><li>@Bean                把方法的返回值注入到spring容器</li><li>@Value              属性注入</li><li>@PropertySource  读取属性配置文</li></ul><p><strong>springboot提供的java配置</strong></p><ul><li>@ConfigurationProperties(profix=”jdbc”) <pre><code>        声明一个类是一个属性读取类 通过set方法注入数据给类属性，默认读取application.properties/yml          jdbc==前缀，即其在application通过前缀为jdbc的配置读取属性并通过set方法注入到类属性中</code></pre></li><li>@EnbleConfigurationProperties(属性读取类.class) 引入属性读取类然后可以注入属性读取类到其他类<ul><li>@Autowired注入</li><li>构造方法注入</li><li>通过@Bean方法参数注入</li><li>直接在@Bean方法上使用@ConfigurationProperties(profix=”jdbc”)注入，此注入连属性读取类都可以省了</li></ul></li></ul><p>默认配置是怎么配置的，在哪里配置的呢?</p><blockquote><p>引入了一个依赖，其中定义了大量自动配置类，</p></blockquote><p>为何依赖引入就会触发配置呢?</p><blockquote><p>SpringBoot为我们提供了默认配置，而默认配置生效的条件一般有两个:         -</p><p>你引入了相关依赖<br>你自己没有配置<br>配置是否生效，取决于我们是否引入了对应库所需的依赖，如果有那么默认配置就会生效。</p></blockquote><p>这些默认配置的属性来自哪里呢?</p><blockquote><p>通过@EnableAutoConfiguration注解引入了其他属性类，通过定义的其他属性类获取对应的默认属性。</p><p>我们要覆盖这些默认属性，只需要在application.properties中定义与其前缀和字段名一致的属性即可。</p></blockquote><h2 id="spring-springboot一些注解"><a href="#spring-springboot一些注解" class="headerlink" title="spring/springboot一些注解"></a>spring/springboot一些注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>                  表示java类为controller类</span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>         开启springboot的自动配置</span><br><span class="line"><span class="meta">@ComponentScan</span>                   扫描属性配置文件</span><br><span class="line"><span class="meta">@SpringBootApplication</span>           java类作为引导类</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span> </span><br><span class="line"><span class="meta">@Configuration</span>                   声明一个类为java配置类</span><br><span class="line"><span class="meta">@propertySource</span>                  加载指定配置文件 和ComponentScan</span><br><span class="line"><span class="meta">@Bean</span>                            方法返回值注入到spring容器</span><br><span class="line"><span class="meta">@Value</span>                           获取配置文件值注入到属性</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>         属性读取类,通过前缀读取属性配置文件中的属性</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span> 载入属性类</span><br></pre></td></tr></table></figure><h2 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h2><p>我们如果不想配置，只需要引入依赖即可，而依赖版本我们也不用操心，<br>因为只要引入了SpringBoot提供的stater (启动器)，就会自动管理依赖及版本了。<br>因此，玩SpringBoot的第一件事情， 就是找启动器，SpringBoot提供了大量的默认启动器，</p><p>Spring Boot application starters：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-thymeleaf</span><br><span class="line">使用Thymeleaf视图构建MVC Web应用程序</span><br><span class="line"></span><br><span class="line">spring-boot-starter-ws</span><br><span class="line">使用Spring Web服务。1.4不推荐使用，推荐使用spring-boot-starter-web-services</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-couchbase</span><br><span class="line">Starter for using Couchbase document-oriented database and Spring Data Couchbase</span><br><span class="line"></span><br><span class="line">spring-boot-starter-artemis</span><br><span class="line">使用Apache Artemis启动JMS消息传递</span><br><span class="line"></span><br><span class="line">spring-boot-starter-web-services</span><br><span class="line">使用Spring Web服务</span><br><span class="line"></span><br><span class="line">spring-boot-starter-mail</span><br><span class="line">支持使用Java Mail和Spring Framework发送电子邮件</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-redis</span><br><span class="line">使用Redis键值数据存储与Spring Data Redis和Jedis客户端</span><br><span class="line"></span><br><span class="line">spring-boot-starter-web</span><br><span class="line">启动器构建web，包括RESTful，使用Spring MVC的应用程序。使用Tomcat作为默认嵌入式容器</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-gemfire</span><br><span class="line">Starter for using GemFire distributed data store and Spring Data GemFire</span><br><span class="line"></span><br><span class="line">spring-boot-starter-activemq</span><br><span class="line">使用Apache ActiveMQ启动JMS消息传递</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-elasticsearch</span><br><span class="line">使用Elasticsearch搜索和分析引擎和Spring Data Elasticsearch</span><br><span class="line"></span><br><span class="line">spring-boot-starter-integration</span><br><span class="line">Starter for using Spring Integration</span><br><span class="line"></span><br><span class="line">spring-boot-starter-test</span><br><span class="line">Spring Boot应用程序用于测试包括JUnit，Hamcrest和Mockito</span><br><span class="line"></span><br><span class="line">spring-boot-starter-hornetq</span><br><span class="line">使用HornetQ启动JMS消息传递。1.4已弃用，推荐使用spring-boot-starter-artemis</span><br><span class="line"></span><br><span class="line">spring-boot-starter-jdbc</span><br><span class="line">使用HikariCP连接池</span><br><span class="line"></span><br><span class="line">spring-boot-starter-mobile</span><br><span class="line">使用Spring Mobile构建Web应用程序的入门</span><br><span class="line"></span><br><span class="line">spring-boot-starter-validation</span><br><span class="line">使用Java Bean校验与Hibernate校验器</span><br><span class="line"></span><br><span class="line">spring-boot-starter-hateoas</span><br><span class="line">使用Spring MVC和Spring HATEOAS构建基于超媒体的RESTful Web应用程序的入门</span><br><span class="line"></span><br><span class="line">spring-boot-starter-jersey</span><br><span class="line">使用JAX-RS和Jersey构建RESTful Web应用程序的入门。 spring-boot-starter-web的替代品</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-neo4j</span><br><span class="line">使用Neo4j图数据库和Spring Data Neo4j</span><br><span class="line"></span><br><span class="line">spring-boot-starter-websocket</span><br><span class="line">使用Spring Framework的WebSocket支持构建WebSocket应用程序</span><br><span class="line"></span><br><span class="line">spring-boot-starter-aop</span><br><span class="line">使用Spring AOP和AspectJ进行面向方面编程</span><br><span class="line"></span><br><span class="line">spring-boot-starter-amqp</span><br><span class="line">使用Spring AMQP和Rabbit MQ的入门</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-cassandra</span><br><span class="line">使用Cassandra分布式数据库和Spring Data Cassandra</span><br><span class="line"></span><br><span class="line">spring-boot-starter-social-facebook</span><br><span class="line">使用Spring Social Facebook</span><br><span class="line"></span><br><span class="line">spring-boot-starter-jta-atomikos</span><br><span class="line">使用Atomikos进行JTA事务</span><br><span class="line"></span><br><span class="line">spring-boot-starter-security</span><br><span class="line">使用Spring Security</span><br><span class="line"></span><br><span class="line">spring-boot-starter-mustache</span><br><span class="line">使用Mustache视图构建MVC Web应用程序</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-jpa</span><br><span class="line">使用Spring Data JPA与Hibernate</span><br><span class="line"></span><br><span class="line">spring-boot-starter</span><br><span class="line">核心启动器，包括自动配置支持，日志记录和YAML</span><br><span class="line"></span><br><span class="line">spring-boot-starter-velocity</span><br><span class="line">使用Velocity视图构建MVC Web应用程序。1.4已弃用</span><br><span class="line"></span><br><span class="line">spring-boot-starter-groovy-templates</span><br><span class="line">使用Groovy模板视图构建MVC Web应用程序</span><br><span class="line"></span><br><span class="line">spring-boot-starter-freemarker</span><br><span class="line">使用FreeMarker视图构建MVC Web应用程序</span><br><span class="line"></span><br><span class="line">spring-boot-starter-batch</span><br><span class="line">使用Spring Batch</span><br><span class="line"></span><br><span class="line">spring-boot-starter-redis</span><br><span class="line">使用Redis键值数据存储与Spring Data Redis和Jedis客户端的入门。1.4已弃用，建议使用spring-boot-starter-data-redis</span><br><span class="line"></span><br><span class="line">spring-boot-starter-social-linkedin</span><br><span class="line">Stater for using Spring Social LinkedIn</span><br><span class="line"></span><br><span class="line">spring-boot-starter-cache</span><br><span class="line">支持使用Spring Framework的缓存</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-solr</span><br><span class="line">使用带有Spring Data Solr的Apache Solr搜索平台</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-mongodb</span><br><span class="line">使用MongoDB和Spring Data MongoDB</span><br><span class="line"></span><br><span class="line">spring-boot-starter-jooq</span><br><span class="line">使用jOOQ访问SQL数据库。 spring-boot-starter-data-jpa或spring-boot-starter-jdbc的替代方法</span><br><span class="line"></span><br><span class="line">spring-boot-starter-jta-narayana</span><br><span class="line">Spring Boot启动Narayana JTA</span><br><span class="line"></span><br><span class="line">spring-boot-starter-cloud-connectors</span><br><span class="line">启动者使用Spring Cloud连接器，简化了连接到云平台中的服务，如Cloud Foundry和Heroku</span><br><span class="line"></span><br><span class="line">spring-boot-starter-jta-bitronix</span><br><span class="line">使用Bitronix进行JTA事务</span><br><span class="line"></span><br><span class="line">spring-boot-starter-social-twitter</span><br><span class="line">使用Spring Social Twitter</span><br><span class="line"></span><br><span class="line">spring-boot-starter-data-rest</span><br><span class="line">使用Spring Data REST通过REST暴露Spring数据存储库</span><br><span class="line"></span><br><span class="line">2.Spring Boot production starters</span><br><span class="line">spring-boot-starter-actuator</span><br><span class="line">使用Spring Boot的Actuator，提供生产就绪的功能，以帮助您监视和管理您的应用程序</span><br><span class="line"></span><br><span class="line">spring-boot-starter-remote-shell</span><br><span class="line">使用CRaSH远程shell通过SSH监视和管理您的应用程序</span><br><span class="line"></span><br><span class="line">3.Spring Boot technical starters</span><br><span class="line">spring-boot-starter-undertow</span><br><span class="line">使用Undertow作为嵌入式servlet容器。 spring-boot-starter-tomcat的替代方法</span><br><span class="line"></span><br><span class="line">spring-boot-starter-jetty</span><br><span class="line">使用Jetty作为嵌入式servlet容器的。 spring-boot-starter-tomcat的替代方法</span><br><span class="line"></span><br><span class="line">spring-boot-starter-logging</span><br><span class="line">使用Logback进行日志记录。 默认日志启动器</span><br><span class="line"></span><br><span class="line">spring-boot-starter-tomcat</span><br><span class="line">使用Tomcat作为嵌入式servlet容器。 spring-boot-starter-web使用的默认servlet容器</span><br><span class="line"></span><br><span class="line">spring-boot-starter-log4j2</span><br><span class="line">使用Log4j2进行日志记录。 spring-boot-starter-logging的替代方法</span><br></pre></td></tr></table></figure><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>SpringBoot的默认配置都会读取默认属性，SpringBoot的默认属性key,非常多，而这些属性可以通过自定义application.properties文件来进行覆盖。形成自定义配置。</p><p><strong>启动器就是一堆关联的依赖（jar包）</strong><br>springboot默认配置文件：application.properties、application.yml  可以一起使用，不过有优先级<br><strong>查看默认属性：</strong></p><blockquote><p>pring-boot-autoconfigure -》spring-boot-autoconfigure-xxx.release.jar -》org.springframework.boot.autoconfigure -》web -》ResourceProperties类中</p></blockquote><h2 id="springboot属性注入"><a href="#springboot属性注入" class="headerlink" title="springboot属性注入"></a>springboot属性注入</h2><p><strong>一、属性定义到application.properties配置文件中，</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driverClassName</span>=<span class="string">com.mysq1.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>= <span class="string">jdbc:mysq1://127.0.0.1:3306/1eyou</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p><strong>二、创建属性读取类</strong>  </p><p>其会根据配置文件中对应前缀名称赋值类对应属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span> (prefix = <span class="string">&quot;jdbc&quot;</span>) <span class="comment">//通过前缀获取配置文件中对应的属性然后通过set方法赋值给类属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String driverClassName;</span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="keyword">private</span> String username ;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line">            </span><br><span class="line">......属性对应get和set方法</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三、在配置类中有四种方式注入属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//声明一个类是一个java配置类，相当于一个xml配置文件</span></span><br><span class="line"><span class="comment">//@PropertySource(&quot;classpath:jdbc.properties&quot;) // 读取资源</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(JdbcProperties.class)</span> <span class="comment">//springboot属性注入需要先引入属性读取类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------spring配置的方式</span></span><br><span class="line"><span class="comment">//    @Value(&quot;$&#123;driverClassName&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    private String driverClassName;</span></span><br><span class="line"><span class="comment">//    @Value(&quot;$&#123;url&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    private String url;</span></span><br><span class="line"><span class="comment">//    @Value(&quot;$&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    private String username ;</span></span><br><span class="line"><span class="comment">//    @Value(&quot;$&#123;password&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    private String password;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean//把方法的返回值注入到spring容器</span></span><br><span class="line"><span class="comment">//    public DataSource dataSource()&#123;</span></span><br><span class="line"><span class="comment">//        DruidDataSource dataSource = new DruidDataSource();</span></span><br><span class="line"><span class="comment">//        dataSource.setDriverClassName(this.driverClassName);</span></span><br><span class="line"><span class="comment">//        dataSource.setUrl(this.url);</span></span><br><span class="line"><span class="comment">//        dataSource.setUsername(this.username);</span></span><br><span class="line"><span class="comment">//        dataSource.setPassword(this.password);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//-----------------------------spring配置的方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//springboot第一种注入方式：注解</span></span><br><span class="line"><span class="comment">//    @Autowired  </span></span><br><span class="line"><span class="comment">//    private  JdbcProperties jdbcProperties;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//springboot第二种注入方式：通过构造方法注入</span></span><br><span class="line"><span class="comment">//    private  JdbcProperties jdbcProperties;  </span></span><br><span class="line"><span class="comment">//    public JdbcConfiguration(JdbcProperties jdbcProperties)&#123;</span></span><br><span class="line"><span class="comment">//        this.jdbcProperties = jdbcProperties;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean//把方法的返回值注入到spring容器</span></span><br><span class="line"><span class="comment">//    public DataSource dataSource()&#123;//第一、二种注入方式所需要的方法</span></span><br><span class="line"><span class="comment">//        DruidDataSource dataSource = new DruidDataSource();</span></span><br><span class="line"><span class="comment">//        dataSource.setDriverClassName(this.jdbcProperties.getDriverClassName());</span></span><br><span class="line"><span class="comment">//        dataSource.setUrl(this.jdbcProperties.getUrl());</span></span><br><span class="line"><span class="comment">//        dataSource.setUsername(this.jdbcProperties.getUsername());</span></span><br><span class="line"><span class="comment">//        dataSource.setPassword(this.jdbcProperties.getPassword());</span></span><br><span class="line"><span class="comment">//        return dataSource;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//springboot第三种注入方式：直接把属性类定义到方法形参上</span></span><br><span class="line"><span class="comment">//    @Bean //把方法的返回值注入到spring容器</span></span><br><span class="line"><span class="comment">//    public DataSource dataSource(JdbcProperties jdbcProperties)&#123;</span></span><br><span class="line"><span class="comment">//        DruidDataSource dataSource = new DruidDataSource();</span></span><br><span class="line"><span class="comment">//        dataSource.setDriverClassName(jdbcProperties.getDriverClassName());</span></span><br><span class="line"><span class="comment">//        dataSource.setUrl(jdbcProperties.getUrl());</span></span><br><span class="line"><span class="comment">//        dataSource.setUsername(jdbcProperties.getUsername());</span></span><br><span class="line"><span class="comment">//        dataSource.setPassword(jdbcProperties.getPassword());</span></span><br><span class="line"><span class="comment">//        return dataSource;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//springboot第四种注入方式：直接把属性前缀注解定义到方法上，连属性类都可以省了</span></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//把方法的返回值注入到spring容器</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;jdbc&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123; <span class="comment">//因为其会直接调用DruidDataSource类中各参数的set方法直接把属性设置进去</span></span><br><span class="line"><span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"><span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注：使用最多的是第一种方法，因为更符合平时spring的使用，第四种有一定的局限性，因为通过set方法设置，所以要求set方法名称去掉set后和属性名称要一致</span></span><br></pre></td></tr></table></figure><h2 id="springboot整合springMVC"><a href="#springboot整合springMVC" class="headerlink" title="springboot整合springMVC"></a>springboot整合springMVC</h2><p><strong>1–引入web启动器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 整合springmvc 引入web启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2–可以修改端口</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">通过application.properties配置文件重新覆盖</span></span><br><span class="line"><span class="comment">#修改默认端口8080为8888</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="comment">#修改日记记录级别</span></span><br><span class="line"><span class="attr">logging.level.org.springframework</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p><strong>3–访问静态资源：默认静态资源路径在springboot配置类可以找到，如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123;</span><br><span class="line"><span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>,</span><br><span class="line"><span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>4–配置拦截器：</strong></p><ul><li>springMVC：可以在springMVC配置文件配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1--编写拦截器</span><br><span class="line"></span><br><span class="line">2--配置文件配置拦截器</span><br><span class="line">例如：</span><br><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要拦截的具体的方法  /**==所有方法都拦截  /user/*==user路径下所有方法拦截--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不要拦截的方法--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mvc:exclude-mapping path=&quot;&quot;&gt;&lt;/mvc:exclude-mapping&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myInterceptor1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xiaoai.interceptor.MyInterceptor1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="comment">&lt;!--注册拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>springboot：通过配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>----编写拦截器</span><br><span class="line"><span class="keyword">package</span> com.xiaoai.user.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前置方法</span></span><br><span class="line"><span class="comment"> * 在handler方法执行之前执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;user--interceptor1--------前置方法正在执行。。。。&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;user--interceptor1--------后置方法正在执行。。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;user--interceptor1--------完成方法正在执行。。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>----通过java配置类配置拦截器</span><br><span class="line"><span class="keyword">package</span> com.xiaoai.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.user.interceptor.MyInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置拦截器</span></span><br><span class="line"><span class="comment"> * 1-声明该类是一个java配置类</span></span><br><span class="line"><span class="comment"> * 2-实现WebMvcConfigurer接口</span></span><br><span class="line"><span class="comment"> * 3-重写方法注册并设置拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MyInterceptor myInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册拦截器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">registry.addInterceptor(myInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>); <span class="comment">//注册拦截器并设置拦截路径  这里拦截所有</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="springboot整合mybatis"><a href="#springboot整合mybatis" class="headerlink" title="springboot整合mybatis"></a>springboot整合mybatis</h2><p><strong>1-springboot整合连接池：</strong></p><ul><li>pom.xml引入启动器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>pom.xml引入mysql驱动</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>application.prorties配置连接池四大参数</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mydb</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>默认使用hikariCP内置数据源</p><p><strong>2-springboot整合mybatis</strong></p><p>springboot没有mybatis的启动器，mybatis官方提供了一个启动器</p><ul><li>引入mybatis启动器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mybatis --&gt; </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>application.properties配置文件可配置，覆盖默认配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mybatis相关</span></span><br><span class="line"><span class="comment">#---实体类重命名</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.xiaoai.user.pojo</span></span><br><span class="line"><span class="comment">#---接口映射文件</span></span><br><span class="line"><span class="comment">#mybatis.mapper-locations=classpath:mybatis/mappers/**/*.xml</span></span><br></pre></td></tr></table></figure><ul><li>加入mapper启动器  通用Mapper的作者也为自己的插件编写了启动器，我们直接引入即可:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通用mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>代码使用，定义接口添加@Mapper注解继承mapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.user.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">tk</span>.mybatis.mapper.common.Mapper&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3–springboot整合事务</strong></p><p>spring已经依赖tx包，所以不用启动器 方法添加@transactional注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.user.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.xiaoai.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过id查找用户</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">queryUserById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.userMapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过id删除用户</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUserById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.userMapper.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>springboot不推荐使用jsp，但是支持一些模板引擎技术。</p><p>如：freeMarker(老牌模板技术)、thymeleaf（springboot推荐使用）、mustache</p><p><strong>为什么是Thymeleaf?</strong></p><p>简单说，Thymeleaf 是一个跟Velocity、FreeMarker 类似的模板引擎,它可以完全替代JSP。相较于其他的模板引擎，它有如下四个极吸引人的特点:</p><ul><li>动静结合：</li></ul><blockquote><p>Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效。也可以让程序员在服务器查看带数据的动态页面效果。</p><p>这是由于它支持html原型，然后在html标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释html时会忽略未定义的标签属性，所以thymeleaf的模板可以静态地运行;当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</p></blockquote><ul><li>开箱即用：</li></ul><blockquote><p>Thymeleaf提供spring标准方言和一个与SpringMVC完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</p></blockquote><ul><li>多方言支持：</li></ul><blockquote><p>它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</p></blockquote><ul><li>与SpringBoot完美整合：</li></ul><blockquote><p>SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp-样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。    </p></blockquote><h3 id="thymeleaf体验"><a href="#thymeleaf体验" class="headerlink" title="thymeleaf体验"></a>thymeleaf体验</h3><ul><li>springboot内置thymeleaf，所以直接用就可以</li><li>ThymeleafAutoConfiguration自动配置类已经有默认模板解析器</li><li>引入Thymeleaf启动器，使默认配置生效</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写controller类方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Thymeleaf体验</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUsers</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="built_in">this</span>.userService.queryUserAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;users&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以在配置类找到默认(路径)已经后缀，如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Confi</span> gurat <span class="title function_">ionProperties</span><span class="params">(prefix =<span class="string">&quot; spring- thymeleaf )</span></span></span><br><span class="line"><span class="string"><span class="params">public class ThymeleafProperties &#123;</span></span></span><br><span class="line"><span class="string"><span class="params">private static final Charset DEFAULT ENCODING = StandardCharsets. UTF 8;</span></span></span><br><span class="line"><span class="string"><span class="params">public static final String DEFAULT_ PREFIX =&quot;</span>classpath:/templates/<span class="string">&quot; ;</span></span></span><br><span class="line"><span class="string"><span class="params">public static final String DEFAULT_ SUFFAX=&quot;</span>.html<span class="string">&quot; ;</span></span></span><br></pre></td></tr></table></figure><ul><li>创建对应路径并在路径下编写页面及内容，如以下Thymeleaf语法编写的html：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;<span class="attribute">border-collapse</span>: collapse; <span class="attribute">font-size</span>: <span class="number">14px</span>; <span class="attribute">width</span>: <span class="number">80%</span>; <span class="attribute">margin</span>: auto&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid darkslategray;<span class="attribute">padding</span>: <span class="number">10px</span>&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: darkslategray; font-size: 30px&quot;</span>&gt;</span>欢迎光临！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user : $&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.userName&#125;&quot;</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.sex&#125;&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.birthday&#125;&quot;</span>&gt;</span>1980-02-30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动应用并访问相应路径即可<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200803141535883-725708434.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【springboot】ssl</title>
      <link href="/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91ssl/"/>
      <url>/aiyblog/2021/02/26/spring/%E3%80%90springboot%E3%80%91ssl/</url>
      
        <content type="html"><![CDATA[<p><img src="../../Typora/img/image.png" alt="输入图片说明"></p><ul><li>数字证书文件格式（cer和pfx）的区别<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作为文件形式存在的证书一般有这几种格式：</span><br><span class="line">1.带有私钥的证书由Public Key Cryptography Standards #12，PKCS#12标准定义，包含了公钥和私钥的二进制格式的证书形式，以pfx作为证书文件后缀名。</span><br><span class="line">2.二进制编码的证书 证书中没有私钥，DER 编码二进制格式的证书文件，以cer作为证书文件后缀名。</span><br><span class="line">3.Base64编码的证书证书中没有私钥，BASE64 编码格式的证书文件，也是以cer作为证书文件后缀名。</span><br><span class="line">由定义可以看出，只有pfx格式的数字证书是包含有私钥的，cer格式的数字证书里面只有公钥没有私钥。</span><br><span class="line">在pfx证书的导入过程中有一项是“标志此密钥是可导出的。这将您在稍候备份或传输密钥”。一般是不选中的，如果选中，别人就有机会备份你的密钥了。如果是不选中，其实密钥也导入了，只是不能再次被导出。这就保证了密钥的安全。</span><br><span class="line">如果导入过程中没有选中这一项，做证书备份时“导出私钥”这一项是灰色的，不能选。只能导出cer格式的公钥。如果导入时选中该项，则在导出时“导出私钥”这一项就是可选的。</span><br><span class="line">如果要导出私钥（pfx),是需要输入密码的，这个密码就是对私钥再次加密，这样就保证了私钥的安全，别人即使拿到了你的证书备份（pfx),不知道加密私钥的密码，也是无法导入证书的。相反，如果只是导入导出cer格式的证书，是不会提示你输入密码的。因为公钥一般来说是对外公开的，不用加密。</span><br></pre></td></tr></table></figure></li></ul><h3 id="springboot配置ssl："><a href="#springboot配置ssl：" class="headerlink" title="springboot配置ssl："></a>springboot配置ssl：</h3><ul><li><a href="https://blog.csdn.net/xcy0_o/article/details/124523713">https://blog.csdn.net/xcy0_o/article/details/124523713</a></li><li><a href="https://blog.csdn.net/weixin_43118617/article/details/122199258">https://blog.csdn.net/weixin_43118617/article/details/122199258</a></li></ul><h3 id="keytool"><a href="#keytool" class="headerlink" title="keytool"></a>keytool</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 生成密钥文件</span><br><span class="line"># keytool.exe -genkey -keyalg RSA -keystore server.jks</span><br><span class="line">keytool.exe -genkey -keyalg RSA -keysize 2048 -keystore server.jks</span><br><span class="line"></span><br><span class="line"># 转换为pkcs12格式</span><br><span class="line">keytool -importkeystore -srckeystore server.jks -destkeystore server.jks -deststoretype pkcs12</span><br><span class="line"></span><br><span class="line"># 校验原链路</span><br><span class="line">keytool -list -v -keystore server.jks</span><br><span class="line"></span><br><span class="line">#springboot配置</span><br><span class="line">server:</span><br><span class="line">  port: 9443</span><br><span class="line">  ssl:</span><br><span class="line">    key-store: file:E:\myLean\20220726-ssl\server.jks</span><br><span class="line">    key-store-password: rootroot</span><br><span class="line">    key-store-type: pkcs12</span><br></pre></td></tr></table></figure><h3 id="http自动跳转https"><a href="#http自动跳转https" class="headerlink" title="http自动跳转https"></a>http自动跳转https</h3><ul><li><a href="https://blog.csdn.net/weixin_43118617/article/details/122199258">https://blog.csdn.net/weixin_43118617/article/details/122199258</a></li></ul><p>配置http自动跳转https, 在启动类中加入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class SouthApplication &#123;</span><br><span class="line"></span><br><span class="line">// http 请求端口，线上配置为 8080</span><br><span class="line">@Value(&quot;$&#123;server.port-http&#125;&quot;)</span><br><span class="line">private int serverPortHttp;</span><br><span class="line"></span><br><span class="line">// 服务器运行端口，等同于 HTTPS 请求端口，线上 443</span><br><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">private int serverPortHttps;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * http重定向到https</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public TomcatServletWebServerFactory servletContainer() &#123;</span><br><span class="line">TomcatServletWebServerFactory tomcat;</span><br><span class="line">tomcat = new TomcatServletWebServerFactory() &#123;</span><br><span class="line">@Override</span><br><span class="line">protected void postProcessContext(Context context) &#123;</span><br><span class="line">SecurityConstraint constraint = new SecurityConstraint();</span><br><span class="line">constraint.setUserConstraint(&quot;CONFIDENTIAL&quot;);</span><br><span class="line">SecurityCollection collection = new SecurityCollection();</span><br><span class="line">collection.addPattern(&quot;/*&quot;);</span><br><span class="line">constraint.addCollection(collection);</span><br><span class="line">context.addConstraint(constraint);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">return tomcat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public Connector httpConnector() &#123;</span><br><span class="line">Connector connector = new Connector(Http11NioProtocol.class.getName());</span><br><span class="line">connector.setScheme(&quot;http&quot;);</span><br><span class="line">//Connector监听的http的端口号</span><br><span class="line">connector.setPort(serverPortHttp);</span><br><span class="line">connector.setSecure(false);</span><br><span class="line">//监听到http的端口号后转向到的https的端口号</span><br><span class="line">connector.setRedirectPort(serverPortHttps);</span><br><span class="line">return connector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="openssl-生成证书"><a href="#openssl-生成证书" class="headerlink" title="openssl 生成证书"></a>openssl 生成证书</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 通过openssl来生成，如果linux中没有安装openssl，需要安装一下，执行：</span><br><span class="line">yum install openssl openssl-devel -y</span><br><span class="line"></span><br><span class="line"># 生成一个RSA密钥 （私钥）</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line"></span><br><span class="line"># 生成一个证书请求</span><br><span class="line">openssl req -new -key server.key -out server.csr -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=power Inc./OU=Web Security/CN=power.com&quot;</span><br><span class="line"></span><br><span class="line"># 自己签发证书</span><br><span class="line">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</span><br><span class="line"></span><br><span class="line">字段解读</span><br><span class="line">C字段：Country，单位所在国家，为两位数的国家缩写，如：CN 表示中国；</span><br><span class="line">ST 字段：State/Province，单位所在州或省；</span><br><span class="line">L 字段：Locality，单位所在城市/或县区；</span><br><span class="line">O 字段：Organization，此网站的单位名称；</span><br><span class="line">OU 字段：Organization Unit，下属部门名称，也常常用于显示其他证书相关信息，如证书类型，证书产品名称或身份验证类型或验证内容等；</span><br><span class="line">CN 字段：Common Name，网站的域名；</span><br><span class="line"></span><br><span class="line"># 转换为pkcs12格式（因为在Java中使用证书，需要转换一下格式）</span><br><span class="line">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.p12</span><br><span class="line">openssl pkcs12 -export -clcerts -in server.crt -inkey server.key -out server.pkcs12</span><br><span class="line"></span><br><span class="line"># 转换为jks格式（因为在Java中使用证书，需要转换一下格式，jks是java独有的）</span><br><span class="line">keytool -importkeystore -srckeystore server.pkcs12 -destkeystore server.jks -srcstoretype pkcs12 -deststoretype jks</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-test"><a href="#2-test" class="headerlink" title="2-test"></a>2-test</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 生成证书</span><br><span class="line">keytoo1 -genkeypair -alias bootserverkeystore -keya1lg RsA -keysize 2048 -keypass 123456 -storetype ]Ks -keystore d: \bootserverkeystore.jks -storepass 123456-va1idity 3650</span><br><span class="line"></span><br><span class="line">#端口号配多少都行，没有要求，443就是默认的，SSL的情况下，不用写端口号，非443就要写端口号</span><br><span class="line">server.port=443</span><br><span class="line">#证书</span><br><span class="line">server.ss1.key-store=classpath :bootserverkeystore.jks</span><br><span class="line">#证书密码</span><br><span class="line">server.ss1.keystoreType=JKS</span><br><span class="line">server.ss1.key-store-password=123456</span><br><span class="line">server.ss1.enab1ed=true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 1-keytool命令生成服务端证书</span><br><span class="line">keytool -genkey -alias tomcat -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -keystore D:/keys/tomcat.keystore -storepass 123456</span><br><span class="line"></span><br><span class="line"># 2-生成客户端证书（ps:如果不需要双向验证，其实不用生成客户端SSL证书）</span><br><span class="line">keytool -genkey -alias client1 -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -storetype PKCS12 -keystore D:/keys/client1.p12 -storepass 123456</span><br><span class="line"></span><br><span class="line"># 3-让服务器端信任客户端,将client1.p12文件生成client.cer(这种就是客户端的证书）</span><br><span class="line">keytool -export -alias client1 -keystore D:/keys/client1.p12 -storetype PKCS12 -keypass 123456 -file D:/keys/client.cer</span><br><span class="line">#  将该文件导入到服务器的证书库，添加为一个信任证书</span><br><span class="line">keytool -import -v -file D:/keys/client.cer -keystore D:/keys/tomcat.keystor</span><br><span class="line"></span><br><span class="line"># 4-让客户端信任服务证书,由于不能直接将keystore格式的证书库导入，必须先把服务器证书导出为一个单独的CER文件：</span><br><span class="line">keytool -keystore D:/keys/tomcat.keystore -export -alias tomcat -file D:/keys/server.cer</span><br><span class="line"># 双击server.cer文件，按照提示安装证书，将证书填入到“受信任的根证书颁发机构”</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-三大核心属性</title>
      <link href="/aiyblog/2021/01/26/react-%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7/"/>
      <url>/aiyblog/2021/01/26/react-%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则:"></a>jsx语法规则:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.定义虚拟DOM时，不要写引号。</span><br><span class="line">2.标签中混入JS表达式时要用。</span><br><span class="line">3.样式的类名指定不要用class，要用className。</span><br><span class="line">4.内联样式,要用style=&#123;&#123;key : value&#125;&#125;的形式去写。5.只有一个根标签</span><br><span class="line">6.标签必须闭合</span><br><span class="line">7.标签首字母</span><br><span class="line">    (1).若小写字母开头，则将改标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。</span><br><span class="line">    (2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。|</span><br></pre></td></tr></table></figure><h3 id="模块化和组件化开发"><a href="#模块化和组件化开发" class="headerlink" title="模块化和组件化开发"></a>模块化和组件化开发</h3><p><strong>模块</strong>：提供特定功能的js程序，即js文件   作用：复用js,简化js的编写,提高js运行效率e<br><strong>组件</strong>：用来实现局部功能效果的代码和资源的集合(html/css/js/image)等等  作用：复用编码,简化项目编码,提高运行效率</p><p><strong>模块化</strong>：应用js都以模块来编写。<br><strong>组件化</strong>：应用以多组件的方式实现。</p><h3 id="react-虚拟dom"><a href="#react-虚拟dom" class="headerlink" title="react-虚拟dom"></a>react-虚拟dom</h3><p>js创建虚拟dom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // 创建虚拟dom</span><br><span class="line">    const VDOM = ReactDOM.createElement(&#x27;h1&#x27;,&#123;id:&#x27;title&#x27;&#125;,ReactDOM.createElement(&#x27;span&#x27;,&#123;&#125;,&#x27;hello,react&#x27;))</span><br><span class="line">    // 渲染虚拟dom到页面</span><br><span class="line">    ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>jsx创建虚拟dom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    //创建虚拟dom</span><br><span class="line">    const VDOM = (  //翻译后： const VDOM = ReactDOM.createElement(&#x27;h1&#x27;,&#123;id:&#x27;title&#x27;&#125;,ReactDOM.createElement(&#x27;span&#x27;,&#123;&#125;,&#x27;hello,react&#x27;))就是原生js</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            &lt;span&gt;Hello,react&lt;/span&gt;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">    )</span><br><span class="line">    //渲染到页面</span><br><span class="line">    ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>关于虚拟DOM:<br>1.本质是0bject类型的对象(一般对象)<br>2.虚拟DOM懂较“轻”，真实DOM比较“重”，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性。<br>3.虚拟DOM最终会被React转化为真实DOM，呈现在页面上。</p><h3 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h3><ul><li><p>{}可写js表达式</p></li><li><p>react如何区分原生标签与react自定义组件标签？ 通过标签首字母区分，原生小写，react标签为大写。</p></li></ul><p>【函数式组件】类名大写，直接返回dom<br>【类式组件】必须继承React.Component，并且定义render(){}方法 在render方法中返回dom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//1.创建类式组件</span><br><span class="line">class MyComponent extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        //render是放在哪里的?—MyComponent的原型对象上，供实例使用。</span><br><span class="line">        return &lt;h2&gt;我是用类定义的组件(适用于【复杂组件】的定义)&lt;/h2&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三大核心属性"><a href="#三大核心属性" class="headerlink" title="三大核心属性"></a>三大核心属性</h2><h3 id="类实例对象重要属性：【1、state】"><a href="#类实例对象重要属性：【1、state】" class="headerlink" title="类实例对象重要属性：【1、state】"></a>类实例对象重要属性：<strong>【1、state】</strong></h3><p>可把数据存放到该属性上  其本质：state = {}</p><ul><li><p>原生html的标签属性有所更改，如：class写className、onclick写onClick、onblue写onBlue</p></li><li><p>事件绑定<br>1、无法直接通过方法名引用方法，因为方法需要实例引用。<br>2、组件类外定义的方法无法获取到组件类属性<strong>state</strong><br>3、只有通过组件类实例调用方法时，方法内this才是组件类实例。才能通过this调用state。<br>4、建议组件类内部定义实现某一功能的方法，render(){}标签内属性<strong>通过this</strong>直接引用方法。需要绑定方法的this，通过【this.xxx(实例对象的) = this.xxx(原型链上的).bind(this)】绑定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定义方法：function demo()&#123;&#125;</span><br><span class="line">组件类构造方法中绑定this：this.demo = this.demo.bind(this)</span><br><span class="line"></span><br><span class="line">事件错误使用：return &lt;h1 onclick=&#123;demo()&#125;&gt;&lt;/h1&gt;</span><br><span class="line">事件正确使用：return &lt;h1 onclick=&#123;this.demo&#125;&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></li><li><p>关于this(个人理解)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">自定义组件没有state state是【React.Component】的原型上的</span><br><span class="line">方法中绑定this：【this.xxx(实例对象的) = this.xxx(原型链上的).bind(this)】 </span><br><span class="line">通过此方法中的this就指向了【React.Component】的this，可以通过this.state调用state了。</span><br><span class="line">前面的xxx是变量名，后面的xxx必须是在原型链上存在的。两者定义的【名称】可以不一样。在render中用的是前面的xxx。</span><br></pre></td></tr></table></figure></li><li><p><strong>状态(state)不可直接更改。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.state.isHot = !isHot //错误的写法 【直接赋值】。</span><br><span class="line">this.setState(&#123;isHot:!isHost&#125;)  //正确写法 【调用内置函数赋值】，该种修改state中的值是合并不是替换，即state中的数据同名覆写，不同名保持</span><br></pre></td></tr></table></figure></li><li><p>自己创建的组件<br>① 构造器：调用一次。<br>② render方法： 调用1+n次 【1=初始化，n=每次更新状态调一次，更新几次调用几次】</p></li><li><p>问题：如果有多个方法this需要绑定，在构造方法需要定义非常多的【this.xxx(实例对象的) = this.xxx(原型链上的).bind(this)】<br>解决：通过箭头函数解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">changeweather = ()=&gt;&#123;</span><br><span class="line">      const isHot = this.state.isHot;</span><br><span class="line">      this.setstate(&#123;isHot : !isHot&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>state小结</strong></p><ul><li>类有原型，类创建的对象实例自身和原型不关联。【类对象实例-&gt;类-&gt;类继承的父类】则构成原型链，当调用一个什么的时候，当前找不到就顺着原型链往上找。</li><li>state可以直接在自定义组件类上面赋值，不必在构造器中赋值。</li><li>自定义方法**–**用赋值语句形式+箭头函数。这样方法就不用绑定了。箭头函数没有自己的this，就会往上找，</li><li>state无法直接修改，需通过内置方法修改</li></ul><h3 id="类实例对象重要属性：【2、props】"><a href="#类实例对象重要属性：【2、props】" class="headerlink" title="类实例对象重要属性：【2、props】"></a>类实例对象重要属性：<strong>【2、props】</strong></h3><p>props 组件传递过来的参数，如在使用组件标签时定义的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(&lt;Person name=&quot;jerry&quot; /&gt; ,document.getElementById(&#x27;test&#x27;))  //props中默认搜集标签中的属性如：name props中会包含[name]</span><br><span class="line"></span><br><span class="line">const p = &#123;name:&#x27;老刘&#x27;,age: 18, sex:&#x27;女&#x27;&#125;</span><br><span class="line">ReactDOM.render(&lt;Person &#123;...p&#125;/&gt;,document.getElementById(&#x27;test3&#x27;)) // 通过【...】传递属性  props中会包含[name,age,sex]</span><br></pre></td></tr></table></figure><p>【…】 展开运行符</p><ul><li><p>【props】属性限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">**代码在组件类外写**</span><br><span class="line"></span><br><span class="line">1、类型限制：</span><br><span class="line">定义规则方式：</span><br><span class="line">组件名称.propTypes = &#123;</span><br><span class="line">    //name:React.PropTypes.string  // PropTypes 15.5版本之前React有该属性 可以这样用【React.PropTypes】，16版本的时候不从这里取了，封装了【prop-types.js】</span><br><span class="line">    //name:PropTypes.string          // 引入【prop-types.js】有了全局对象PropTypes</span><br><span class="line">    //name:PropTypes.string.isRequired  //isRequired 表示 name属性必须传递过来，否则保错。</span><br><span class="line">&#125;</span><br><span class="line">类型：</span><br><span class="line">string 字符串</span><br><span class="line">number 数字</span><br><span class="line">func 函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、设置默认值：使用标签时没传递相关属性，在render中也可以读到，读到的是默认设置的</span><br><span class="line">定义规则方式：</span><br><span class="line">组件名称.defaultProps = &#123;</span><br><span class="line">    name:&#x27;xiaoai&#x27;   //name默认值为xiaoai</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>【props】默认是只读的</p></li><li><p>如何把【props】属性限制定义到组件类中<br>只要保证类自身拥有规则属性，就能进行规则限制。所以可以直接在类中定义规则，把<code>组件名称.</code>去掉,如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**代码在组件类中写**</span><br><span class="line"></span><br><span class="line">static defaultProps = &#123;</span><br><span class="line">    name:&#x27;xiaoai&#x27;   //name默认值为xiaoai</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数与props</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">constructor(props)&#123;</span><br><span class="line">      //构造器是否接受props，是否传递给super，取决于:是否希望在构造器中通过this访问props</span><br><span class="line">      super(props)</span><br><span class="line">      console.log(&#x27;constructor&#x27; ,this.props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数式组件使用props<br>函数式组件只可以使用组件三大核心属性中的props。<br>属性限定只能定义在函数外。</p></li><li><p>为什么可以使用props？因为函数可以接收props</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person (props)&#123;</span><br><span class="line">    const &#123;name,age,sex&#125; = propsreturn(</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;姓名: &#123;name&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;性别: &#123; sex&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;年龄: &#123;age&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件到页面</span><br><span class="line">ReactDOM.render(&lt;Person name=&quot;jerry&quot; sex=&quot;女&quot; age=&#123;18&#125;/&gt;, document.getElemertById(&#x27;test1&#x27;))</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="类实例对象重要属性：【3、refs】"><a href="#类实例对象重要属性：【3、refs】" class="headerlink" title="类实例对象重要属性：【3、refs】"></a>类实例对象重要属性：<strong>【3、refs】</strong></h3><ul><li><p>组件内的标签可以定义【ref属性】来标识自己。 组件类中属性refs会搜集组件类中所有标签ref属性。</p></li><li><p>通过【refs.ref名称】可以拿到ref对应的真实dom节点。</p></li><li><p><strong>1、字符串形式的ref</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">**代码在组件类中**</span><br><span class="line">render()&#123;</span><br><span class="line">    return(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">              &lt;input ref=&quot;input1&quot; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;  //ref通过回调函数把当前节点放到了实例对象中</span><br><span class="line">              &lt;button onclick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">//展示左侧输入框的数据</span><br><span class="line">showData = ()=&gt;&#123;</span><br><span class="line">    const &#123;input1&#125; = this.refs</span><br><span class="line">    alert(input1.value) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>2、回调函数的ref</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">**代码在组件类中**</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">    return(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">              &lt;input ref=&#123;currentNode =&gt; this.input1 = currentNode&#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;  //ref通过回调函数把当前节点放到了实例对象中</span><br><span class="line">              &lt;button onclick=&#123;this.showData&#125;&gt;点我提示左侧的数据&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">//展示左侧输入框的数据</span><br><span class="line">showData = ()=&gt;&#123;</span><br><span class="line">    const &#123;input1&#125; = this //由于ref已把input1放了进来，所以可以在this中获取</span><br><span class="line">    alert(input1.value) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调ref中执行次数：<br>内联方式=render更新过程中会被执行两次，第一次传参null，第二次传参当前dom节点。<br>回调函数通过定义成class绑定函数的方式可避免该问题。<br>两者没啥影响，一般还是直接写内联比较多。</p></li><li><p><strong>3、createRef</strong><br>当前比较推荐的一种形式<br>React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点，该容器是“专人专用”的，只保存一个ref</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">**以下代码都在组件类内**</span><br><span class="line"></span><br><span class="line">//定义一个ref</span><br><span class="line">myRef2 = React.createRef()</span><br><span class="line"></span><br><span class="line">//绑定ref</span><br><span class="line">&lt;input onBlur=&#123;this.showData2] ref=&#123;this.myRef2&#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;</span><br><span class="line"></span><br><span class="line">//使用ref</span><br><span class="line">showData2 = ()=&gt;&#123;</span><br><span class="line">    alert(this.myRef2.current.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p><ul><li>1.若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</li><li>2.若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。I常见的高阶函数伺</li></ul><p>函数的柯里化:通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>**挂载（mount)**：当clock 组件第一次被渲染到DOM中的时候，就为其设置一个计时器。<br>**卸载(unmount)**：当DOM中clock组件被删除的时候，应该清除计时器。</p><ul><li><p>生命周期钩子调用顺序和个人调用顺序没关系，由框架决定。<br>函数名称：<strong>生命周期回调函数、生命周期钩子函数、生命周期函数、生命周期钩子</strong></p></li><li><p>1、构造器函数 【**constructor(){}**】</p></li><li><p>2、挂载前  【**componentWillMount(){}**】</p></li><li><p>3、初始化 【**render(){}**】 // 初始化渲染、状态更新后</p></li><li><p>4、挂载后 【**componentDidMount(){}**】 //组件挂载完毕执行</p></li><li><p>5、卸载组件前 【**componentwillUnmount(){}**】 // 组件将要卸载时执行</p></li></ul><p>卸载组件：【ReactDOM.unmountComponentAtNode(document.getElementById(‘test’)) 】</p><p>其他钩子函数：<br><strong>旧生命周期图</strong><br><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201226231723267-105757299.png"><br><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201226233823004-1428492128.png"></p><ul><li>1、setState() 修改状态更新 –&gt; 【**shouldComponentUpdate(){}**】相当于阀门，决定是否更新，返回true往下走，false则终止。默认返回true –&gt; </li><li>2、forceUpdate() 强制更新 –&gt; 【**componentWillUpdate(){}**】更新前执行的函数 –&gt; </li><li>–&gt;【**componentDidUpdate(){}**】更新后执行的函数。</li></ul><p>组件父子关系： 在A组件中引用B组件，A即是B组件的父组件。<br>props的传递： 在引用的B标签中直接定义标签属性传递过去。</p><ul><li>3、【compenentWillReceiveProps(props){}】子组件将要接收传递过来的props前执行，第一次接收props时不会调用。</li></ul><p><strong>新生命周期图</strong><br><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201226225954304-766410515.png"><br><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201227003613644-2049527385.png"></p><p>新版生命周期把旧版中带【will】的钩子函数进行了改进。</p><ul><li>【**static getDerivedStateFromProps(props,state){}**】 需返回[从props派生的state]或[null]。若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</li><li>【**static getSnapshotBeforeUpdate(prevProps,prevState){}**】 需返回[快照值]或[null]。返回值作为参数传递给【componentDidUpdate()】。</li></ul><h2 id="虚拟DOM中key作用"><a href="#虚拟DOM中key作用" class="headerlink" title="虚拟DOM中key作用:"></a>虚拟DOM中key作用:</h2><p>状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】，随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下:</p><ul><li><p>1、旧虚拟DOM中找到与新虚拟DOM相同的key:<br>内容没变，直接使用之前的真实DOM<br>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</p></li><li><p>2、旧虚拟DOM中未找到与新虚拟DOM相同的key：<br>根据数据创建新的真实DOM，随后渲染到到页面</p></li><li><p>用index作为key可能会引发的问题:<br>① 若对数据进行逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实DOM更新–&gt;界面效果没问题，但效率低。<br>② 如果结构中还包含输入类的DOM：会产生错误DOM更新–&gt;界面有问题。</p></li></ul><p><strong>注意!如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。开发中最好用唯一标识作为key</strong></p><h2 id="react脚手架"><a href="#react脚手架" class="headerlink" title="react脚手架"></a>react脚手架</h2><p><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201227132411289-1065057200.png"></p><h3 id="三个比较重要的文件"><a href="#三个比较重要的文件" class="headerlink" title="三个比较重要的文件"></a>三个比较重要的文件</h3><p>【./public/index.html】react应用容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- %PUBLIC_URL%代表public文件夹路径 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;link rel=&quot;icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot; /&gt; 可以用以下相对路径的写法 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./favicon.ico&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 开启理想视口，用于做移动端网页的适配 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机浏览器) --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 描述信息 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">content</span>=<span class="string">&quot;Web site created using create-react-app&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 指定网页添加大手机主屏幕后的图标(仅支持苹果) --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/logo192.png&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 应用加壳时的配置文件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 浏览器不支持js则展示标签中的内容 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- react单页面应用容器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>【./src/index.js】应用入口<br>【./src/App.js】 外壳组件App</p><ul><li><p>如何区分应用中组件js文件和普通js文件<br>1、组件js文件：首字母大小，普通js文件首字母小写<br>2、组件js文件后缀=jsx，普通js文件后缀=js</p></li><li><p>组件模块化<br>同一组件资源统一放到【./src/component/xx组件名】目录下，</p></li><li><p>样式模块化<br>如果不做样式模块化，有可能不同css文件中存在同一名称样式，在App.js引用各个组件时产生样式冲突，后引入的就会覆盖前引入的<br>样式冲突解决：<br>① 保证引入组件间css文件没有同名样式，<br>② 在各组件样式文件样式前加统一嵌套前缀，如【.hello{.xx{} .xx{}}】<br>③ 样式模块化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span>、样式文件加【.<span class="property">module</span>】后缀，如：index.<span class="property">modle</span>.<span class="property">css</span></span><br><span class="line">-<span class="number">2</span>、在组件引入样式时先接受样式再使用：</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span> <span class="comment">//接收样式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;hello.title&#125;</span>&gt;</span>He1lo,React!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> <span class="comment">//hello.title使用样式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nocas随记</title>
      <link href="/aiyblog/2021/01/26/nocas%E9%9A%8F%E8%AE%B0/"/>
      <url>/aiyblog/2021/01/26/nocas%E9%9A%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="springboot加载多个配置中心的配置文件"><a href="#springboot加载多个配置中心的配置文件" class="headerlink" title="springboot加载多个配置中心的配置文件"></a>springboot加载多个配置中心的配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">config :</span></span><br><span class="line">       <span class="string">enabled：false</span>                                     <span class="comment">#关闭配置</span></span><br><span class="line">       <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>                        <span class="comment">#配置中心地址</span></span><br><span class="line">       <span class="attr">file-ertension:</span> <span class="string">yaml</span> <span class="comment">#dataid的名称就是application的name加file-extension service1.yamlnamespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4#开发环境指定具体的namespace</span></span><br><span class="line">       <span class="attr">group:</span> <span class="string">TEST_GROUP</span>                                  <span class="comment">#测试组</span></span><br><span class="line">       <span class="string">ext-config[0]:</span>                                     <span class="comment">#通过自定义扩展配置文件可以一次性引入多个配置文件</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">ext-config-common01.</span> <span class="string">properties</span>        <span class="comment"># 不设置group默认用默认group：即DEFAULT_GROUP</span></span><br><span class="line">       <span class="string">ext-config[1]:</span></span><br><span class="line">          <span class="attr">data-id:</span> <span class="string">ext-config-common02.properties</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">CLOBALE_GROUP</span></span><br><span class="line">          <span class="attr">refresh:</span> <span class="literal">true</span>                                   <span class="comment">#动态刷新配置中的属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">       <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>                           <span class="comment">#配置中心地址 可以配置多个ip，即集群模式， 一般可以把一个域名绑定3个ip直接配置域名即可</span></span><br><span class="line">       <span class="attr">file-ertension:</span> <span class="string">yaml</span> <span class="comment">#dataid的名称就是application的name加file-extension service1.yamlnamespace: c67e4a97-a698-4d6d-9bb1-cfac5f5b51c4#开发环境指定具体的namespace</span></span><br><span class="line">       <span class="attr">group:</span> <span class="string">TEST_GROUP</span>                                     <span class="comment">#测试组</span></span><br><span class="line">       <span class="attr">shared-dataids:</span> <span class="string">ext-config-common01.properties,</span> <span class="string">ext-config-common02.properties</span> <span class="comment">#共享dataid，但只支持DEFAULT_GROUP组，即不是DEFAULT_GROUP分组的配置文件属性无法加载</span></span><br><span class="line">       <span class="attr">refreshable-dataids:</span> <span class="string">ext-config-common01.properties</span>   <span class="comment">#支持动态刷新配置文件的属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三种加载配置文件方式"><a href="#三种加载配置文件方式" class="headerlink" title="三种加载配置文件方式"></a>三种加载配置文件方式</h3><ul><li>application:name 拼接 file-ertension  上面配置拼接引入配置文件即：service1.yaml </li><li>ext-config[] 自定义扩展dataid引入配置文件</li><li>shared-dataids与refreshable-dataids 共享dataid引入配置文件</li></ul><h3 id="配置加载优先级"><a href="#配置加载优先级" class="headerlink" title="配置加载优先级"></a>配置加载优先级</h3><ul><li>拼接引入配置文件&gt;扩展dataid配置文件&gt;共享dataid配置文件</li><li>扩展dataid配置文件有多个时：按照下标越大的优先级越高(即相当于变量重赋值，取最后一次赋值)</li></ul><h3 id="配置中心一般会配置集群，不然一个配置中心挂了，项目就完了"><a href="#配置中心一般会配置集群，不然一个配置中心挂了，项目就完了" class="headerlink" title="配置中心一般会配置集群，不然一个配置中心挂了，项目就完了"></a>配置中心一般会配置集群，不然一个配置中心挂了，项目就完了</h3><p><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201211002908521-1474515835.png"></p><h3 id="主流服务发现中心"><a href="#主流服务发现中心" class="headerlink" title="主流服务发现中心"></a>主流服务发现中心</h3><ul><li>nacos</li><li>eureka</li><li>consul</li><li>zookeeper<br><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201211004615643-228568177.png"></li></ul><h3 id="什么是服务发现-个人认为"><a href="#什么是服务发现-个人认为" class="headerlink" title="什么是服务发现(个人认为)"></a>什么是服务发现(个人认为)</h3><p>当两个服务需要通信时，需要知道对方的ip和端口，但是如果服务部署在云上，ip是动态的，此时如果把ip地址直接写死的方式配置在另外的服务上，就会有问题了，所有需要服务发现中心来管理服务。<br>从服务发现中心拿取注册表就可以拿到需要通信服务的ip地址了。<br><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201211005238775-574680309.png"></p><h3 id="springcloud服务协作"><a href="#springcloud服务协作" class="headerlink" title="springcloud服务协作"></a>springcloud服务协作</h3><p><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201211005419717-1060911236.png"></p><h4 id="负载均衡-ribbon"><a href="#负载均衡-ribbon" class="headerlink" title="负载均衡 ribbon"></a>负载均衡 ribbon</h4><p><strong>负载均衡策略</strong></p><ul><li>轮询</li><li>加权</li><li>随机</li></ul><p><strong>服务端负载均衡</strong>：服务器自己有服务注册表，在自己内部就可以实现负载均衡，来确定自己需要请求的服务实例  ribbon就是服务端负载均衡。<br><strong>负载均衡器</strong>：请求经过负载均衡器实现负载均衡</p><h4 id="远程调用-feign"><a href="#远程调用-feign" class="headerlink" title="远程调用 feign"></a>远程调用 feign</h4><p>可以直接通过注解@FeignClient(value=”服务名称”) 来调用服务<br>feign生成代理对象，代理对象内部从服务中心通过服务名称拿取服务地址来发起远程调用</p><h3 id="记"><a href="#记" class="headerlink" title="记"></a>记</h3><p>使用父工程可以用父工程来配置相关依赖。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx入门</title>
      <link href="/aiyblog/2021/01/26/nginx%E5%85%A5%E9%97%A8/"/>
      <url>/aiyblog/2021/01/26/nginx%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h2><p>查看版本：【./nginx -v】<br>启动：【./nginx】<br>关闭：【./nginx -s stop】<br>重载配置文件： 【./nginx -s reload】</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>修改nginx配置文件：【nginx.conf】<br>配置文件内分块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全局块：设置一些影响nginx 服务器整体运行的配置指令</span><br><span class="line">events块：涉及的指令主要影响 Nginx 服务器与用户的网络连接</span><br><span class="line">http块：配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</span><br><span class="line">    全局http块：</span><br><span class="line">    server块：</span><br><span class="line">        全局server块：</span><br><span class="line">        location块：</span><br></pre></td></tr></table></figure><h2 id="反向代理："><a href="#反向代理：" class="headerlink" title="反向代理："></a>反向代理：</h2><p>通过路径分发请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">----示例配置：配置在http块内</span><br><span class="line">server&#123;</span><br><span class="line">    listen    9001;</span><br><span class="line">    server_name  192.168.17.129;</span><br><span class="line">    location ~ /fedu/</span><br><span class="line">proxy_pass http://127.0.e.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ /fvod/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8081;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、= :用于不含正则表达式的uri前，要求请求字符串与uri严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。。<br>2、<del>:用于表示uri包含正则表达式，并且区分大小写。<br>3、</del>*用于表示 uri包含正则表达式，并且不区分大小写。<br>4、^<del>:用于不含正则表达式的uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的 location后，立即使用此 location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。<br>注意:如果uri包含正则表达式，则必须要有</del>或者~*标识。v</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>配置文件： 【upstream】<br>分配策略：</p><ul><li>轮询：按顺序分配</li><li>weight权重：权重值越高分配机率越大</li><li>ip_hash：按iphash结果分配，每个访客固定访问某一台服务器</li><li>fair第三方：按后端服务器响应时间分配请求，响应时间短的优先分配</li></ul><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>动态和静态请求分开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">----配置在server块内</span><br><span class="line"></span><br><span class="line">location /www/&#123;</span><br><span class="line">    root    /data/;</span><br><span class="line">    index index.html index.htm ;</span><br><span class="line">&#125;</span><br><span class="line">location /image/&#123;</span><br><span class="line">    root    /data/;</span><br><span class="line">    autoindex on;  # 能列出文件的目录</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>location后 配置的是【请求访问路径】<br>root 后配置的是【文件根路径】<br>文件存放在【根路径+访问路径】下</p><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>某nginx宕机后，请求还能正常访问。<br><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210114000354175-1696515647.png"></p><p>配置高可用：</p><ul><li>安装多nginx</li><li>每个nginx服务器中安装keepalived 修改keepalived.conf配置文件配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">----keeplived.conf配置文件配置参考</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    notification_email &#123;</span><br><span class="line">        acassen@firewall.loc</span><br><span class="line">        failover@firewall.loc</span><br><span class="line">        sysadmin@firewall.loc</span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">        smtp_server 192.168.17.129</span><br><span class="line">        smtp_connect_timeout 30</span><br><span class="line">        router_id LVS_DEVEL</span><br><span class="line">    &#125;</span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">        script &quot;/usr/local/src/nginx_check.sh&quot;</span><br><span class="line">        interval 2      #（检测脚本执行的间隔）</span><br><span class="line">        weight 2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP   # 备份服务器上将 MASTER 改为 BACKUP</span><br><span class="line">    interface ens33  //网卡</span><br><span class="line">    virtual_router_id 51   # 主、备机的 virtual_router_id 必须相同</span><br><span class="line">    priority 100     # 主、备机取不同的优先级，主机值较大，备份机值较小</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.17.50 // VRRP H 虚拟地址</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">----nginx_check.sh脚本内容</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line">A=`ps -C nginx –no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then     </span><br><span class="line">    /usr/local/nginx/sbin/nginx     # 启动脚本的位置</span><br><span class="line">    sleep 2</span><br><span class="line">    if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then        </span><br><span class="line">        killall keepalived </span><br><span class="line">    fi </span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li>启动nginx</li><li>启动keepalived</li></ul><p>测试高可用效果：</p><ul><li>分别启动两台nginx和keepalived，通过配置的虚拟ip进行访问，可以正常访问。</li><li>把master类型的nginx和keepalived停掉，通过配置虚拟ip进行访问，还可以正常访问，即测试成功。</li></ul><p>keepalived配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">全局配置块：global_defs</span><br><span class="line">    router_id 配置主机名称</span><br><span class="line">脚本配置块：vrrp_script</span><br><span class="line">    weight -20 #服务挂掉后权重减少20</span><br><span class="line">虚拟ip配置块：vrrp_instance VI_1</span><br></pre></td></tr></table></figure><h2 id="nginx原理"><a href="#nginx原理" class="headerlink" title="nginx原理"></a>nginx原理</h2><p>master和worker</p><p>请求-&gt;master-&gt;worker通过争抢机制得到任务调用tomcat完成</p><p>多worker好处：</p><ul><li>可以使用nginx -s reload热部署</li><li>每个worker是独立进程，其中一个worker出问题，其他继续争抢，不会造成服务中断。</li></ul><p>需设置多少个worker：</p><ul><li>nginx同redis类似都采用了io多路复用机制，每个worker都是一个独立的进程，但每个进程里只有一个主线程。和cpu核数相等最为适宜。</li></ul><p>单个请求worker占用几个连接数：</p><ul><li>2或4 静态=2 动态需访问tomcat=4 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">worker最大连接数=worker总数*每个worker最大连接数</span><br><span class="line">静态访问最大并发数=worker最大连接数/2</span><br><span class="line">反向代理最大并发数=worker最大连接数/4</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java定时器</title>
      <link href="/aiyblog/2021/01/26/java/java%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/aiyblog/2021/01/26/java/java%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="springboot中简单定时任务使用：Scheduled"><a href="#springboot中简单定时任务使用：Scheduled" class="headerlink" title="springboot中简单定时任务使用：Scheduled"></a>springboot中简单定时任务使用：Scheduled</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1-导入依赖"></a>1-导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-编写定时器类"><a href="#2-编写定时器类" class="headerlink" title="2-编写定时器类"></a>2-编写定时器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Scheduled</span> 设置定时任务</span></span><br><span class="line"><span class="comment">     * 1--cron属性：cron表达式，定时任务触发时间的一个字符串表达形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/2 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduledMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;定时器触发：&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><p>Cron,表达式是一个字符串，分为6或7个域，每一个域代表一个含义</p><p>Cron有如下两种语法格式:</p><ul><li> Seconds Minutes Hours Day Month Week Year</li><li> Seconds Minutes Hours Day Month Week  </li></ul><table><thead><tr><th>位置</th><th>时间域名</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>1</td><td>秒</td><td>0-59</td><td>, _ * /</td></tr><tr><td>2</td><td>分钟</td><td>0-59</td><td>, _ * /</td></tr><tr><td>3</td><td>小时</td><td>0-23</td><td>, _ * /</td></tr><tr><td>4</td><td>日期</td><td>1-31</td><td>, _ * / L W C   需配合月使用</td></tr><tr><td>5</td><td>月</td><td>1-12</td><td>, _ * /</td></tr><tr><td>6</td><td>星期</td><td>1-7</td><td>, _ * / ? L C #  1表示星期日，7表示星期一  星期也要配合日使用，一般只用一个</td></tr><tr><td>7</td><td>年(可选)</td><td>1970-2099</td><td>, _ * /</td></tr></tbody></table><p>*<em>星号(</em>):*<em>可用在所有字段中s表示对应时间城的每一个时刻s例如s</em>在分钟字段时,表示”每分钟”<br>**问号(?)**该字符只在日期和星期字段中使用，它通常指定为”无意义的值”，相当于占位符<br>**减号(-):**表达一个范围，如在小时字段中使用”10-12”，则表示从10到12点,即10,11,12;<br>**逗号(,):*<em>表达一个列表值，如在星期字段中使用”MON,WED,FRI”，则表示星期一，星期三和星期五;<br><strong>斜杠(/):</strong> xly 表达一个等步长序列s×为起始值,y为增里步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒,而5/15在分钟字段中表示 5,20,35,50，也可以使用</em>/y，它等同于0/y3</p><p>**L:**该字符只在日期和星期字段中使用，代表””Last”的意思，但它在两个字段中意思不同。</p><ul><li>L在日期字段中，表示这个月份的最后一天，如一月的31号,非i闰年二月的28号;</li><li>如果L用在星期中，则表示星期六,等同于7○但是,如果L出现在星期字段里,而且在前面有一个数值X,则表示”这个月的最后X天””，</li><li>例如，6L表示该月的最后星期五﹔</li></ul><p>**W:**该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。</p><ul><li>例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五﹔如果15日是星期日，则匹配16号星期一﹔如果15号是星期二，那结果就是15号星期二，但必须注意关联的匹配日期不能够跨月，</li><li>如你指定1W，如果1号是星期六，结果匹配的是3号星期一，而非上个月最后的那天。W字符串只能指定单一日期。而不能指定日期范围;</li></ul><p>**LW组合:**在日期字段可以组合使用LW，它的意思是当月的最后一个工作日;<br>**#:**该字符只能在星期字段中使用v表示当月某个工作日 </p><ul><li>如6#3表示当月的第三个星期五(6表示星期五，#3表示当前的第三个)，</li><li>4#5表示当月的第五个星期三，假设当月没有第五个星期三,忽略不触发;</li></ul><p>**C:**该字符只在日期和星期字段中使用，代表”Calendar”的意思。</p><ul><li>它的意思是计划所关联的日期,如果日期没有被关联，则相当于日历中所有日期</li><li>例如5C在日期字段中就相当于日历5日以后的第一天o1C在星期字段中相当于星期日后的第一天。</li><li>Cron表达式对特殊字符的大小写不敏感，对代表星期的缩写英文大小写也不敏感。</li></ul><p><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201207232212962-1152807727.png"></p><h3 id="3-启动类开启定时任务的使用"><a href="#3-启动类开启定时任务的使用" class="headerlink" title="3-启动类开启定时任务的使用"></a>3-启动类开启定时任务的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sb1Application</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(Sb1Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三方定时任务框架：Quartz"><a href="#第三方定时任务框架：Quartz" class="headerlink" title="第三方定时任务框架：Quartz"></a>第三方定时任务框架：Quartz</h2><ul><li>1–job 任务 你要做啥</li><li>2–Trigger 触发器 你什么时候去做</li><li>3–Scheuler 任务调度 你什么时候需要去做什么事</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h3 id="1-导入依赖添加坐标"><a href="#1-导入依赖添加坐标" class="headerlink" title="1-导入依赖添加坐标"></a>1-导入依赖添加坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-编写任务"><a href="#2-编写任务" class="headerlink" title="2-编写任务"></a>2-编写任务</h3><p>定义class继承job重写execute方法，即定义任务类编写任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzDemo</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务被触发是所执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quartz自动任务--cexcute方法执行。。。&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-编写调度类测试"><a href="#3-编写调度类测试" class="headerlink" title="3-编写调度类测试"></a>3-编写调度类测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//1-先创建job对象：做什么</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">job</span> <span class="operator">=</span> JobBuilder.newJob(QuartzDemo.class).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2-创建Trigger对象：什么时间做</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 简单的trigger触发时间： 通过quartz提供一个方法来完成简单的重复调用</span></span><br><span class="line"><span class="comment">         * cron Trigger: 按照cron的表达式来给定触发时间</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Trigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger()</span><br><span class="line"><span class="comment">//                .withSchedule(SimpleScheduleBuilder.repeatSecondlyForever())//通过内置方法设置定时 知己即每秒钟重复</span></span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ?&quot;</span>)) <span class="comment">//通过cron表达式来设置定时</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3-创建Scheduler对象： 任务调度，什么时候做什么事</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">        scheduler.scheduleJob(job,trigger);<span class="comment">//设置调度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring整合Quartz"><a href="#spring整合Quartz" class="headerlink" title="spring整合Quartz"></a>spring整合Quartz</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1-引入依赖"></a>1-引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加quartz坐标，springboot自带slf4j需排除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加scheduled坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring tx 坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-编写任务类"><a href="#2-编写任务类" class="headerlink" title="2-编写任务类"></a>2-编写任务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzDemo</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务被触发是所执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quartz自动任务--cexcute方法执行。。。&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建配置类返回相应对象"><a href="#3-创建配置类返回相应对象" class="headerlink" title="3-创建配置类返回相应对象"></a>3-创建配置类返回相应对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xiaoai.quartz.QuartzDemo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.JobDetailFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SimpleTriggerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * quartz配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1- 创建job对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetailFactoryBean <span class="title function_">jobDetailFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JobDetailFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobDetailFactoryBean</span>();</span><br><span class="line">        <span class="comment">//关联自己的job类</span></span><br><span class="line">        factory.setJobClass(QuartzDemo.class);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2- 创建Trigger对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SimpleTriggerFactoryBean <span class="title function_">simpleTriggerFactoryBean</span><span class="params">(JobDetailFactoryBean jobDetailFactoryBean)</span>&#123;</span><br><span class="line">        <span class="type">SimpleTriggerFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleTriggerFactoryBean</span>();</span><br><span class="line">        <span class="comment">//关联jobdetail对象</span></span><br><span class="line">        factory.setJobDetail(jobDetailFactoryBean.getObject());</span><br><span class="line">        <span class="comment">//设置一个执行的毫秒数</span></span><br><span class="line">        factory.setRepeatInterval(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//重复次数</span></span><br><span class="line">        factory.setRepeatCount(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1- 创建Scheduler对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SchedulerFactoryBean <span class="title function_">schedulerFactoryBean</span><span class="params">(SimpleTriggerFactoryBean simpleTriggerFactoryBean)</span>&#123;</span><br><span class="line">        <span class="type">SchedulerFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerFactoryBean</span>();</span><br><span class="line">        <span class="comment">//关联Trigger</span></span><br><span class="line">        factory.setTriggers(simpleTriggerFactoryBean.getObject());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-启动类开启定时任务"><a href="#4-启动类开启定时任务" class="headerlink" title="4-启动类开启定时任务"></a>4-启动类开启定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">quartzdemoApplication</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(quartzdemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以在配置类中返回一个cron实例，实现通过cron表达式设置定时</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xiaoai.quartz.QuartzDemo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.CronTriggerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.JobDetailFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SimpleTriggerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * quartz配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1- 创建job对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetailFactoryBean <span class="title function_">jobDetailFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JobDetailFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobDetailFactoryBean</span>();</span><br><span class="line">        <span class="comment">//关联自己的job类</span></span><br><span class="line">        factory.setJobClass(QuartzDemo.class);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2- 创建Trigger对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public SimpleTriggerFactoryBean simpleTriggerFactoryBean(JobDetailFactoryBean jobDetailFactoryBean)&#123;</span></span><br><span class="line"><span class="comment">//        SimpleTriggerFactoryBean factory = new SimpleTriggerFactoryBean();</span></span><br><span class="line"><span class="comment">//        //关联jobdetail对象</span></span><br><span class="line"><span class="comment">//        factory.setJobDetail(jobDetailFactoryBean.getObject());</span></span><br><span class="line"><span class="comment">//        //设置一个执行的毫秒数</span></span><br><span class="line"><span class="comment">//        factory.setRepeatInterval(2000);</span></span><br><span class="line"><span class="comment">//        //重复次数</span></span><br><span class="line"><span class="comment">//        factory.setRepeatCount(5);</span></span><br><span class="line"><span class="comment">//        return factory;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cron trigger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CronTriggerFactoryBean <span class="title function_">cronTriggerFactoryBean</span><span class="params">(JobDetailFactoryBean jobDetailFactoryBean)</span>&#123;</span><br><span class="line">        <span class="type">CronTriggerFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CronTriggerFactoryBean</span>();</span><br><span class="line">        <span class="comment">//关联job</span></span><br><span class="line">        factory.setJobDetail(jobDetailFactoryBean.getObject());</span><br><span class="line">        <span class="comment">//设置触发时间</span></span><br><span class="line">        factory.setCronExpression(<span class="string">&quot;0/2 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1- 创建Scheduler对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SchedulerFactoryBean <span class="title function_">schedulerFactoryBean</span><span class="params">(CronTriggerFactoryBean cronTriggerFactoryBean)</span>&#123;</span><br><span class="line">        <span class="type">SchedulerFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulerFactoryBean</span>();</span><br><span class="line">        <span class="comment">//关联Trigger</span></span><br><span class="line">        factory.setTriggers(cronTriggerFactoryBean.getObject());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="job类对象注入"><a href="#job类对象注入" class="headerlink" title="job类对象注入"></a>job类对象注入</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpClient使用</title>
      <link href="/aiyblog/2021/01/26/java/HttpClient%E4%BD%BF%E7%94%A8/"/>
      <url>/aiyblog/2021/01/26/java/HttpClient%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="原java发送请求"><a href="#原java发送请求" class="headerlink" title="原java发送请求"></a>原java发送请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1-构造一个url</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line"><span class="comment">//        URL url = new URL(&quot;http://localhost:8080/hello&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2-构造一个连接 设置相关配置属性</span></span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">urlconn</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">    urlconn.setRequestMethod(<span class="string">&quot;GET&quot;</span>); <span class="comment">//设置请求方式</span></span><br><span class="line">    urlconn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">    urlconn.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">    urlconn.setUseCaches(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3-设置请求头(请求属性) 这里为模拟浏览器</span></span><br><span class="line"><span class="comment">//        urlconn.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4-获取连接</span></span><br><span class="line">    urlconn.connect();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5-获取连接的流对象 读取源码数据</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlconn.getInputStream();</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">buff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((line = buff.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    inputStream.close();</span><br><span class="line">    inputStreamReader.close();</span><br><span class="line">    buff.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="httpclient发送请求"><a href="#httpclient发送请求" class="headerlink" title="httpclient发送请求"></a>httpclient发送请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ParseException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取一个客户端</span></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">aDefault</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义请求配置</span></span><br><span class="line">    <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">            <span class="comment">//连接超时时间</span></span><br><span class="line">            .setConnectTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</span><br><span class="line">            <span class="comment">//连接请求超时时间</span></span><br><span class="line">            .setConnectionRequestTimeout(<span class="number">10</span>,TimeUnit.SECONDS)</span><br><span class="line">            <span class="comment">//响应超时时间</span></span><br><span class="line">            .setResponseTimeout(<span class="number">10</span>,TimeUnit.SECONDS)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//        HttpGet httpGet = new HttpGet(&quot;http://localhost:8080/hello&quot;);</span></span><br><span class="line"><span class="comment">//        httpGet.setConfig(requestConfig); //设置请求配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //执行请求</span></span><br><span class="line"><span class="comment">//        CloseableHttpResponse response = aDefault.execute(httpGet);</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 获取响应码</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;响应码：&quot;+response.getCode());</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 获取响应实体</span></span><br><span class="line"><span class="comment">//        HttpEntity entity = response.getEntity();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;实体&quot;+ entity);</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 通过工具类可以获取响应体内容</span></span><br><span class="line"><span class="comment">//        String s = EntityUtils.toString(entity);</span></span><br><span class="line"><span class="comment">//        System.out.println(s);</span></span><br><span class="line"></span><br><span class="line">------------------执行结果</span><br><span class="line">响应码：<span class="number">200</span></span><br><span class="line">实体Wrapper [[Content-Type: text/plain;charset=UTF-<span class="number">8</span>,Content-Encoding: <span class="literal">null</span>,Content-Length: <span class="number">8</span>,Chunked: <span class="literal">false</span>]]</span><br><span class="line">hello!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//        HttpPost httpPost = new HttpPost(&quot;http://localhost:8080/test/getp&quot;);</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/hello&quot;</span>);</span><br><span class="line">    httpPost.setConfig(requestConfig); <span class="comment">//设置请求配置</span></span><br><span class="line">    httpPost.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> aDefault.execute(httpPost);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取响应码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;响应码：&quot;</span>+response.getCode());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取响应实体</span></span><br><span class="line">    <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">    System.out.println(<span class="string">&quot;实体&quot;</span>+ entity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过工具类可以获取响应体内容</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">    System.out.println(s);</span><br><span class="line"></span><br><span class="line">------------------执行结果</span><br><span class="line">响应码：<span class="number">200</span></span><br><span class="line">实体Wrapper [[Content-Type: text/plain;charset=UTF-<span class="number">8</span>,Content-Encoding: <span class="literal">null</span>,Content-Length: <span class="number">8</span>,Chunked: <span class="literal">false</span>]]</span><br><span class="line">hello!!!</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="httpclient"><a href="#httpclient" class="headerlink" title="httpclient"></a>httpclient</h1><h2 id="springboot编写接口"><a href="#springboot编写接口" class="headerlink" title="springboot编写接口"></a>springboot编写接口</h2><ul><li>实体类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get不带参</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/getpGet&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPersonGet1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello!!!--get&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get带参</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/getpGetParam&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">getPersonGet2</span><span class="params">(String name,String sex)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name,sex);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post不带参</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/getpPost&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPersonPost1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello!!!--post&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post带参--引用类型参</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/getpPostParam&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">getPersonPost2</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post带参--json类型参</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/getpPostParamJson&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">getPersonPost3</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpclientGet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建httpget对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建请求对象 设置url</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/test/getpGet&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 发起请求，获取response</span></span><br><span class="line">        response = httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span>  <span class="operator">=</span> EntityUtils.toString(response.getEntity(),<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------结果</span><br><span class="line">hello!!!--get</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="get请求传参"><a href="#get请求传参" class="headerlink" title="get请求传参"></a>get请求传参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpclientGetParam</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建httpget对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---创建URIBuilder</span></span><br><span class="line">        <span class="type">URIBuilder</span> <span class="variable">uriBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(<span class="string">&quot;http://localhost:8080/test/getpGetParam&quot;</span>);</span><br><span class="line"><span class="comment">//        uriBuilder.setParameter(&quot;name&quot;,&quot;xiaoai&quot;);</span></span><br><span class="line"><span class="comment">//        uriBuilder.setParameter(&quot;sex&quot;,&quot;nan&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---多参数可用链式编程</span></span><br><span class="line">        uriBuilder.setParameter(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoai&quot;</span>)</span><br><span class="line">                .setParameter(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;nan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---创建get请求</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(uriBuilder.build());</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 发起请求，获取response</span></span><br><span class="line">        response = httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span>  <span class="operator">=</span> EntityUtils.toString(response.getEntity(),<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------结果</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoai&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;nan&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpclientPost</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建httpget对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建请求对象 设置url</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/test/getpPost&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 发起请求，获取response</span></span><br><span class="line">        response = httpClient.execute(httpPost);</span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span>  <span class="operator">=</span> EntityUtils.toString(response.getEntity(),<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------结果</span><br><span class="line">hello!!!--post</span><br></pre></td></tr></table></figure><h2 id="post请求传参"><a href="#post请求传参" class="headerlink" title="post请求传参"></a>post请求传参</h2><h3 id="1-表单传参"><a href="#1-表单传参" class="headerlink" title="1-表单传参"></a>1-表单传参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpclientPostParamForm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建httpget对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建请求对象 设置url</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/test/getpPostParam&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---list集合，封装表单中参数</span></span><br><span class="line">        List&lt;NameValuePair&gt; params = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        params.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoai&quot;</span>));</span><br><span class="line">        params.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;nan&quot;</span>));</span><br><span class="line">        <span class="comment">// ---创建表单Entity对象</span></span><br><span class="line">        <span class="type">UrlEncodedFormEntity</span> <span class="variable">formEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(params, Charset.defaultCharset());</span><br><span class="line">        <span class="comment">// ---设置表单的Entity对象到post请求</span></span><br><span class="line">        httpPost.setEntity(formEntity);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 发起请求，获取response</span></span><br><span class="line">        response = httpClient.execute(httpPost);</span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        System.out.println(response.getCode()+<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span>  <span class="operator">=</span> EntityUtils.toString(response.getEntity(),<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------结果</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoai&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;nan&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-json格式传参"><a href="#2-json格式传参" class="headerlink" title="2-json格式传参"></a>2-json格式传参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpclientPostParamJson</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ParseException &#123;</span><br><span class="line">        <span class="comment">// 创建httpget对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建请求对象 设置url</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/test/getpPostParamJson&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---请求头设置传参格式</span></span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Content-Type&quot;</span>, ContentType.APPLICATION_JSON.toString());</span><br><span class="line">        <span class="comment">// ---创建传递的json字符参数</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        param.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line">        param.put(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;nan&quot;</span>);</span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">StringEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(param.toString());</span><br><span class="line">        <span class="comment">// ---设置表单的Entity对象到post请求</span></span><br><span class="line">        httpPost.setEntity(StringEntity);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 发起请求，获取response</span></span><br><span class="line">        response = httpClient.execute(httpPost);</span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span>  <span class="operator">=</span> EntityUtils.toString(response.getEntity(),<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------结果</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoai&quot;</span>,<span class="string">&quot;sex&quot;</span>:<span class="string">&quot;nan&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="连接池和请求配置java"><a href="#连接池和请求配置java" class="headerlink" title="连接池和请求配置java"></a>连接池和请求配置java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientPoolT</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建连接池管理器</span></span><br><span class="line">        <span class="type">PoolingHttpClientConnectionManager</span> <span class="variable">cm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolingHttpClientConnectionManager</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置连接池配置,</span></span><br><span class="line">        <span class="comment">// 最大连接数，即连接池中客户端数量</span></span><br><span class="line">        cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 每个主机最大连接数 ，即每个主机最多连接的客户端数量</span></span><br><span class="line">        cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用连接池发送请求，通过debug可查看每次生成的httpClient都不同</span></span><br><span class="line">        doGet(cm);</span><br><span class="line">        doPost(cm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----带请求配置</span></span><br><span class="line">        <span class="comment">//设置请求配置</span></span><br><span class="line">        <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">                <span class="comment">//连接超时时间</span></span><br><span class="line">                .setConnectTimeout(<span class="number">30</span>, TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">//连接请求超时时间</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">10</span>,TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">//响应超时时间</span></span><br><span class="line">                .setResponseTimeout(<span class="number">10</span>,TimeUnit.SECONDS)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        doGet(cm,requestConfig);</span><br><span class="line">        doPost(cm,requestConfig);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//===============================================================</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(PoolingHttpClientConnectionManager cm)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从连接池管理器中获取客户端</span></span><br><span class="line">        <span class="type">HttpClientBuilder</span> <span class="variable">httpClientBuilder</span> <span class="operator">=</span> HttpClients.custom().setConnectionManager(cm);</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> httpClientBuilder.build();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/test/getpGet&quot;</span>);</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), Charset.defaultCharset());</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭响应</span></span><br><span class="line">        response.close();</span><br><span class="line">        <span class="comment">//使用连接池，不需要自己关闭httpClient连接</span></span><br><span class="line"><span class="comment">//        httpClient.close();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(PoolingHttpClientConnectionManager cm)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从连接池管理器中获取客户端</span></span><br><span class="line">        <span class="type">HttpClientBuilder</span> <span class="variable">httpClientBuilder</span> <span class="operator">=</span> HttpClients.custom().setConnectionManager(cm);</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> httpClientBuilder.build();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/test/getpPost&quot;</span>);</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), Charset.defaultCharset());</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭响应</span></span><br><span class="line">        response.close();</span><br><span class="line">        <span class="comment">//使用连接池，不需要自己关闭httpClient连接</span></span><br><span class="line"><span class="comment">//        httpClient.close();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//===============================================================</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(PoolingHttpClientConnectionManager cm, RequestConfig requestConfig)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从连接池管理器中获取客户端</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.custom()</span><br><span class="line">                .setConnectionManager(cm)</span><br><span class="line">                .setDefaultRequestConfig(requestConfig)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/test/getpGet&quot;</span>);</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), Charset.defaultCharset());</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭响应</span></span><br><span class="line">        response.close();</span><br><span class="line">        <span class="comment">//使用连接池，不需要自己关闭httpClient连接</span></span><br><span class="line"><span class="comment">//        httpClient.close();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(PoolingHttpClientConnectionManager cm, RequestConfig requestConfig)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从连接池管理器中获取客户端</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.custom()</span><br><span class="line">                .setConnectionManager(cm)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/test/getpPost&quot;</span>);</span><br><span class="line">        httpPost.setConfig(requestConfig); <span class="comment">//连接池不设置请求配置，在请求这里也可以设置</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">        <span class="keyword">if</span> (response.getCode() == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), Charset.defaultCharset());</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭响应</span></span><br><span class="line">        response.close();</span><br><span class="line">        <span class="comment">//使用连接池，不需要自己关闭httpClient连接</span></span><br><span class="line"><span class="comment">//        httpClient.close();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础</title>
      <link href="/aiyblog/2020/12/26/docker/docker%E5%9F%BA%E7%A1%80/"/>
      <url>/aiyblog/2020/12/26/docker/docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="docker概念"><a href="#docker概念" class="headerlink" title="docker概念"></a>docker概念</h2><p>docker主机(Host):安装了Docker程序的机器(Docker直接安装在操作系统之上);<br>docker客户端(Client):连接docker主机进行操作﹔<br>docker仓库(Registry):用来保存各种打包好的软件镜像﹔<br>docker镜像(Images):软件打包好的镜像﹔放在docker仓库中;</p><blockquote><p><strong>镜像就像安装包，容器就是安装的应用程序</strong>   </p><p>可以通过镜像安装多个相同的应用程序，但是端口号不能相同</p></blockquote><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ul><li>yum包更新 【sudo yum update】</li><li>安装软件包yum-util提供yum-config-manager功能【sudo yum install -y yum-utils device-mapper-persistent-data lvm2】</li><li>设置yum源  【sudo yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo%E3%80%91">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo】</a></li><li>安装docker 【sudo yum install docker -ce】</li><li>查看版本：【docker -v】</li><li>启动docker  根据linux版本进行相应命令</li></ul><p><strong>操作docker相关命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">检查内核版本，必须是3.10及以上【uname ‐r】 </span><br><span class="line">安装docker(输入y确认安装)【yum install docker 】 </span><br><span class="line">查看版本【docker ‐v】</span><br><span class="line">开机启动docker 【systemctl enable docker】</span><br><span class="line"></span><br><span class="line">启动docker 【systemctl start docker 】</span><br><span class="line">停止docker 【systemctl stop docker】</span><br><span class="line">docker概要信息【docker info】</span><br><span class="line">docker帮助文档【docker --help】</span><br></pre></td></tr></table></figure><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>Docker默认仓库地址是Docker Hub官网地址。</p><p>设置ustc镜像便于docker拉取某些需要的镜像  ustc：老牌linux镜像服务提供者 ustc的docker镜像加速器速度很快</p><ul><li>编辑文件【vi /etc/docker/daemon.json】</li><li>输入内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="镜像与容器"><a href="#镜像与容器" class="headerlink" title="镜像与容器"></a>镜像与容器</h2><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p>镜像是构建docker的基石，可以将镜像当做容器的源代码 体积小，便携，易分享存储和更新<br>由于镜像可能重名（如版本不同），所有通过tag即标签区分<br>镜像可以从所设置的源中拉取</p><ul><li>【docker images】  查看镜像 </li><li>【docker search 镜像名称】  搜索镜像  如：docker search redis</li><li>【docker pull 镜像名称:tag】  拉取镜像  </li><li>【docker rmi 镜像id】  删除镜像   镜像有运行中的容器时不能删除</li><li>【docker rmi ‘docker images -q’】 删除全部镜像 </li></ul><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><strong>通过镜像简单启动容器</strong>：【docker run -d 容器名称:标签】 </p><p><strong>通过镜像启动容器（指定参数）</strong>：【docker run –name 自己给容器随便取个名称(–name和这里的名称可省) -p 主机端口:容器端口  -d  容器名称:标签】  </p><ul><li>标签即相当于版本，latest标签即最新的意思</li><li>参数：<ul><li>–name 容器名称   </li><li>[-p]为docker和本机物理端口映射  </li><li>[-d]为后台运行</li></ul></li></ul><p><strong>容器命令：</strong></p><ul><li><p>查看正在运行的容器 :【docker ps】   </p></li><li><p>查看所有容器: 【docker ps -a】 </p></li><li><p>查看最后一次运行的容器:【docker ps -l】 </p></li><li><p>启动容器:【docker start 容器名称或id】</p></li><li><p>停止容器:【docker stop 容器名称或id】</p></li><li><p>文件拷贝:【docker cp 待拷贝文件路径  容器名称:路径】宿主机到容器 容器关闭时也可以正常拷贝文件进去</p></li><li><p>查看容器ip：</p><ul><li>【docker inspect 容器名称】  显示一推信息</li><li>【<code>docker inspect --format=&#39;&#123;&#123;.NetWorkSettings.IPAddress&#125;&#125;</code>‘ 容器名称 】 直接显示ip地址，其他信息也可以这样显示</li></ul></li><li><p>删除容器：【docker rm 容器名称】 需要停止容器后才能进行移除    </p></li><li><p>进入容器:【<code>docker exec -it 容器名称或id  /bin/bash</code>】  进入容器后操作命令和linux一致就行</p></li><li><p>退出到宿主机位置  容器停止:【docker exit】 </p></li><li><p>查看容器运行日志：【docker logs -f  容器tag】</p></li></ul><h4 id="交互式容器"><a href="#交互式容器" class="headerlink" title="交互式容器"></a>交互式容器</h4><p>使用交互式运行容器，容器运行后直接进入到容器内部，退出容器内部后，容器直接关闭</p><p><strong>创建交互式容器：</strong>【docker run -it –name 容器名称 镜像名称:标签 /bin/bash 】</p><ul><li>交互式创建容器后即进入到容器</li><li>参数：<ul><li>-i：表示运行容器</li><li>-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</li></ul></li><li>每个容器相当于一个小电脑（服务器）</li></ul><blockquote><p>通过镜像启动容器 也可以通过docker exec -it 容器名称或id  /bash  进入容器进行操作</p></blockquote><h4 id="守护式容器"><a href="#守护式容器" class="headerlink" title="守护式容器"></a>守护式容器</h4><p>守护式进程的特点是：</p><ul><li>能够长期运行</li><li>没有交互式会话</li><li>适合运行应用程序和服务</li></ul><p><strong>创建守护式容器：</strong>  【docker run -id –name 容器名称 镜像名称:标签】</p><h4 id="将容器保存为镜像"><a href="#将容器保存为镜像" class="headerlink" title="将容器保存为镜像"></a><strong>将容器保存为镜像</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 基于自己容器创建的镜像创建容器，该新建的容器默认包含自己容器所拥有的资源，因为是基于其创建的</span><br><span class="line">【docker commit 容器名称 镜像名称】</span><br><span class="line">【docker run -di --name=myxxx -p 宿主机端口:容器端口 自己容器所保存的镜像名称】  </span><br><span class="line"></span><br><span class="line"># 镜像导入导出</span><br><span class="line">【docker save -o 文件路径  镜像名称】 镜像导出为镜像文件</span><br><span class="line">【docker load -i 文件路径】 镜像文件恢复为镜像</span><br></pre></td></tr></table></figure><h2 id="docker数据卷"><a href="#docker数据卷" class="headerlink" title="docker数据卷"></a>docker数据卷</h2><p><strong>目录挂载</strong>：宿主机目录和容器目录形成映射关系。 目录挂载后，操作宿主机的目录即操作容器的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建容器时加【-v 宿主机目录:容器目录】 如：</span><br><span class="line">【docker run -id --name=mycentos3 centos:7 -v /usr/local/myhtml:/usr/local/myhtml】</span><br><span class="line">【docker run -id -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7】也可以</span><br></pre></td></tr></table></figure><p>目录挂载即docker数据卷。需求：为了部署demo工程，需要使用到cp的命令将宿主机内的demo文件复制到容器内部</p><p><strong>数据卷</strong>：将宿主机的一个目录，映射到容器的一个目录中，可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p><ul><li>创建数据卷：【docker volume create 数据卷名称】    创建数据卷之后，默认会存放在一个目录下/var/1ib/docker/volumes/数据卷名称/_data</li><li>查看数据卷的详细信息【docker volume inspect 数据卷名称】</li><li>查看全部数据卷：【docker volume  ls】</li><li>删除数据卷 【docker volume rm 数据卷名称】</li><li>应用数据卷 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1----通过创建好的数据卷进行映射。当映射数据卷时，如果数据卷不存在，Docker会自动创建，会将容器内部自带的文件存储在默认的存放路径中。</span></span><br><span class="line">docker run -v 数据卷名称︰容器内部的路径 镜像id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2----直接通过路径进行映射。直接指定一个路径作为数据卷的存放位置，这个路径下是空的。</span></span><br><span class="line">docker run -v 路径︰容器内部的路径 镜像id</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile就是一系列命令和参数构成的脚本  这些命令应用于基础镜像并最终创建一个新的镜像。   文件名称：【Dockerfile】</p><p><strong>存在意义</strong>：更方便构建镜像文件</p><ul><li><strong>开发</strong>：提供一个完全一致开发环境</li><li><strong>测试</strong>：直接拿开发时构建的镜像或通过dockerfile文件构建一个镜像开始工作</li><li><strong>运维</strong>：部署时可以实现应用无缝移植</li></ul><p><strong>相关指令：</strong></p><ul><li>【from image_name:tag】定义使用哪个基础镜像启动构建流程</li><li>【maintainer user_name】声明镜像创建者</li><li>【env key value】设置环境变量（可写多条）</li><li>【run command】dockerfile的核心部分（可写多条）</li><li>【add source_dir/file  dest_dir/file】宿主机文件复制到容器内 如果是压缩文件，复制后会自动解压</li><li>【copy source_dir/file dest_div/file】和add类似，但有压缩文件不会被解压</li><li>【workdir path_div】 设置工作目录</li></ul><p><strong>例子：构建jdk1.8镜像 基于centos:7</strong></p><ul><li>创建目录 上传jdk的tar包 进入目录</li><li>构建dokerfile文件 名称必须叫dockerfile  进入文件</li><li>编写文件 保存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER xiaoai</span><br><span class="line">WORKDIR /usr</span><br><span class="line">RUN mkdir /usr/local/java</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/</span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre7</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/bin/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>【docker build -t=’jdk1.8’ Dockerfile所在目录】 所在当前目录则用 <code>.</code>表示  通过Dockerfile构建镜像</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本镜像，第一条指令必须是FROM。一个声明以#字符开头则被视为注释。</p><p>可以在Dpcker文件中使用RUN，CMD，FROM，EXPOSE，ENv等指令。</p><p><strong>构建镜像：</strong>【docker bui1d -t 镜像名称[:tag]】</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ul><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><strong>from</strong>：指定基础镜像，必须为第一个命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">    <span class="keyword">FROM</span> &lt;image&gt;</span><br><span class="line">    <span class="keyword">FROM</span> &lt;image&gt; :&lt;tag&gt;</span><br><span class="line">    <span class="keyword">FROM</span> &lt;image&gt;@&lt;digest&gt;</span><br><span class="line"><span class="comment">#示例: </span></span><br><span class="line">    <span class="keyword">FROM</span> mysq1 :<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注: tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span></span><br></pre></td></tr></table></figure><p><strong>maintainer</strong>：维护者信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">MAINTAINER</span> Jasper Xu</span><br><span class="line">    <span class="keyword">MAINTAINER</span> sorex@<span class="number">163</span>.com</span><br><span class="line">    <span class="keyword">MAINTAINER</span> Jasper Xu&lt;sorex@<span class="number">163</span>.com&gt;</span><br></pre></td></tr></table></figure><p><strong>run</strong>：构建镜像时执行的命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash">用于在镜像容器中执行命令，其有以下两种命令执行方式:she11执行</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> &lt;<span class="built_in">command</span>&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exec执行格式:</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> [ <span class="string">&quot;executab1e&quot;</span>，<span class="string">&quot;param1&quot;</span>， <span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> [ <span class="string">&quot;&quot;</span>executable<span class="string">&quot;，&quot;</span>param1<span class="string">&quot;，&quot;</span>param2<span class="string">&quot;&quot;</span>]</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> apk update</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;/etc/execfi1e&quot;</span>，<span class="string">&quot;arg1&quot;</span>，<span class="string">&quot;arg1&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如: docker build --no-cache</span></span><br></pre></td></tr></table></figure><p><strong>add</strong>：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> &lt;src&gt;. . . &lt;dest&gt;</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span> ,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]用于支持包含空格的路径</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> hom*/mydir/</span></span><br><span class="line"><span class="comment"># 添加所有以&quot;hom&quot;开头的文件</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> hom?.txt /mydir/</span></span><br><span class="line"><span class="comment"># ?替代一个单字符,例如:&quot;home.txt&quot;</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> <span class="built_in">test</span> relativeDir/<span class="comment">#添加“test”到^wORKDIR `/relativeDir/ADD test /absoluteDir/#添加“test”到/absoluteDir/</span></span></span><br></pre></td></tr></table></figure><p><strong>copy</strong>：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源<br><strong>cmd</strong>：构建容器后调用，也就是在容器启动时才进行调用。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span> , <span class="string">&quot;param1&quot;</span> , <span class="string">&quot;param2&quot;</span>](执行可执行文件，优先)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;param1 &quot;</span> , <span class="string">&quot;param2&quot;</span>]（设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">command</span> param1 param2(执行she11内部命令)</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;This is a test.&quot;</span> l <span class="built_in">wc</span> -</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/bin/wc&quot;</span> , <span class="string">&quot;--he1p&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span></span><br></pre></td></tr></table></figure><p><strong>entrypoint</strong> ：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式;</span></span><br><span class="line">    <span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>，<span class="string">&quot;param1&quot;</span>，<span class="string">&quot;param2&quot;</span><span class="string">&quot;](可执行文件，优先)ENTRYPOINT command param1 param2 (she11内部命令)</span></span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">FROM</span> ubuntu</span><br><span class="line">    <span class="keyword">ENTRYPOINT</span><span class="language-bash"><span class="string"> [&quot;</span>top<span class="string">&quot;，&quot;</span>-b<span class="string">&quot;]CMD [&quot;</span>-c<span class="string">&quot;]</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注: ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而dockerrun命令中指定的任何参数，都会被当做参数再次传递。</span></span><br><span class="line"><span class="comment"># ENTRYPOINT。Dockerfile中只允许有一个。</span></span><br><span class="line"><span class="comment"># ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</span></span><br></pre></td></tr></table></figure><p><strong>label</strong>：用于为镜像添加元数据</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">LABEL</span><span class="language-bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...示例:</span></span><br><span class="line">    <span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span> description=<span class="string">&quot;这是一个web服务器&quot;</span> by=<span class="string">&quot;ghz&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</span></span><br></pre></td></tr></table></figure><p><strong>env</strong>：设置环境变量</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="comment"># &lt;key&gt;之后的所有内容均会被视为其&lt;va1ue&gt;的组成部分，因此，一次只能设置一个变量</span></span><br><span class="line">    <span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line">    <span class="comment"># 可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示;另外，反斜线也可以用于续行</span></span><br><span class="line">    <span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">ENV</span> myName John DoeENV myDog Rex The Dog</span><br><span class="line">    <span class="keyword">ENV</span> mycat=f1uffy</span><br></pre></td></tr></table></figure><p><strong>expose</strong>：指定于外界交互的端口</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">8080</span> <span class="keyword">EXPOSE</span> <span class="number">11211</span>/tcp <span class="number">11211</span>/udp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</span></span><br></pre></td></tr></table></figure><p><strong>volume</strong>：用于指定持久化目录</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/path/to/dir&quot;</span>]</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br><span class="line">    <span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/var/www&quot;</span>,<span class="string">&quot;/var/log/apache2&quot;</span>,<span class="string">&quot;/etc/apache2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 注:一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能:</span></span><br><span class="line"><span class="comment"># 1卷可以容器间共享和重用</span></span><br><span class="line"><span class="comment"># 2容器并不一定要和其它容器共享卷3修改卷后会立即生效</span></span><br><span class="line"><span class="comment"># 4对卷的修改不会对镜像产生影响</span></span><br><span class="line"><span class="comment"># 5卷会一直存在，直到没有任何容器在使用它</span></span><br></pre></td></tr></table></figure><p><strong>workdir</strong>：工作目录，类似于cd命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> /a(这时工作目录为/a)</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> b (这时工作目录为/a/b)</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> c(这时工作目录为/a/b/c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w 参数覆盖构建时所设置的工作目录。</span></span><br></pre></td></tr></table></figure><p><strong>user</strong>：指定运行容器时的用户名或UID，后续的 RUN也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">USER</span> <span class="keyword">user</span></span><br><span class="line">    <span class="keyword">USER</span> <span class="keyword">user</span>: groupUSER uid</span><br><span class="line">    <span class="keyword">USER</span> uid:gidUSER <span class="keyword">user</span>:gidUSER uid: group</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">USER</span> www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。</span></span><br></pre></td></tr></table></figure><p><strong>age</strong>：用于指定传递给构建运行时的变量</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">ARG</span> site</span><br><span class="line">    <span class="keyword">ARG</span> bui1d_user=www</span><br></pre></td></tr></table></figure><p><strong>onbuilde</strong>：用于设置镜像触发器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式: </span></span><br><span class="line">    <span class="keyword">ONBUILD</span> [INSTRUCTION]</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">ONBUILD</span> <span class="keyword">ADD</span><span class="language-bash"> . /app/src</span></span><br><span class="line">    <span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> /usr/loca1/bin/python-bui1d --<span class="built_in">dir</span> /app/src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</span></span><br></pre></td></tr></table></figure><h3 id="实例1-构建nginx镜像"><a href="#实例1-构建nginx镜像" class="headerlink" title="实例1 构建nginx镜像"></a>实例1 构建nginx镜像</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This my first nginx Dockerfile</span></span><br><span class="line"><span class="comment"># version 1.0</span></span><br><span class="line"><span class="comment"># Base images基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="comment"># MAINTAINER维护者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> ghz</span><br><span class="line"><span class="comment"># ENV设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> PATH/usr/loca1/nginx/sbin : $PATH</span><br><span class="line"><span class="comment"># ADD文件放在当前目录下，拷过去会自动解压</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> nginx-1.8.0.tar.gz /usr/loca1/ <span class="comment"># ngix</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> epe1-release-latest-7.noarch.rpm /usr/1oca1/ <span class="comment">#企业linux扩展包</span></span></span><br><span class="line"><span class="comment"># RUN执行以下命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> rpm -ivh /usr /loca1/epe1-release-1atest-7.noarch.rpm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum instal1 -y wget lftp gcc gcc-c++ make openss1-deve1 pcre-deve1 pcre &amp;&amp; yum cleana11</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -s /sbin/no1ogin -M www</span></span><br><span class="line"><span class="comment"># WORKDIR相当于cd</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/loca1/nginx-1.8.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./configure --prefix=/us r/1oca1/nginx --user=www --group=www --with-http_ss1_module --with-pcre &amp;&amp; make &amp;&amp; make insta11</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;daemon off; &quot;</span> &gt;&gt;/etc/nginx.conf</span></span><br><span class="line"><span class="comment">#EXPOSE映射端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8</span>o</span><br><span class="line"><span class="comment">#CMD运行以下命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="实例2-tomcat镜像"><a href="#实例2-tomcat镜像" class="headerlink" title="实例2 tomcat镜像"></a>实例2 tomcat镜像</h3><ul><li>打成war包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把项目打成war包</span></span><br><span class="line">jar -cvfM0 demo.war demo/*</span><br></pre></td></tr></table></figure><ul><li>通过Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> daocloud.io/library/tomcat:<span class="number">8.0</span>.<span class="number">45</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo.war /usr/1oca1/tomcat/webapps</span></span><br></pre></td></tr></table></figure><ul><li>在Dockerfile目录下执行构建镜像命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过Dockerfile构建镜像</span></span><br><span class="line">docker build -t tomcat_my:1.2 .</span><br></pre></td></tr></table></figure><ul><li>查看镜像并通过构建的镜像创建容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动镜像</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat imageId</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器访问：http://ip地址:8080/demo/</span></span><br></pre></td></tr></table></figure><h2 id="docker私有仓库"><a href="#docker私有仓库" class="headerlink" title="docker私有仓库"></a>docker私有仓库</h2><p>私有仓库存放镜像，中央仓库存放通用镜像，私有仓库可以存放自己所构建的镜像，便于同一局域网的使用 </p><ul><li>拉取私有仓库镜像 【docker pull registry】</li><li>创建容器即创建私有仓库 【docker run -di –name=registry -p 5000:5000 registry】</li><li>网页访问仓库【宿主机ip:容器创建时映射的端口/v2/_catalog】 访问到json数据即私有仓库创建成功</li><li>修改配置文件使docker信任私有仓库才能上传镜像到私有仓库【vi /etc/docker/daemon.json】添加配置：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;insecure_registries&quot;:[&quot;私服ip地址:端口&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启docker服务</li></ul><h2 id="镜像上传到私有仓库"><a href="#镜像上传到私有仓库" class="headerlink" title="镜像上传到私有仓库"></a>镜像上传到私有仓库</h2><p>【docker tag 镜像名称 私服ip和端口/镜像名称】如【docker tag jdk1.8 192.168.x.x:5000/jdk1.8】打标签 相当于复制一个镜像为上传做准备<br>【docker push 私服ip和端口/镜像名称】 如【docker push 192.168.x.x:5000/jdk1.8】 上传镜像到私服<br>访问私服可以查看到上传的镜像<br>获取镜像 【docker pull 私服ip和端口/镜像名称】</p><h2 id="例：docker搭建应用环境："><a href="#例：docker搭建应用环境：" class="headerlink" title="例：docker搭建应用环境："></a>例：docker搭建应用环境：</h2><h3 id="mysql部署"><a href="#mysql部署" class="headerlink" title="mysql部署"></a>mysql部署</h3><p>拉取镜像：【docker pull centos/mysql-centos7】  后面即mysql路径</p><p>创建容器：【docker run -di –name tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD 密码 镜像名称】</p><p>参数：</p><ul><li><p>-p 端口映射  操作宿主机33306端口即相当于操作容器的3306端口  </p></li><li><p>-e MYSQL_ROOT_PASSWORD =  指定mysql密码</p></li><li><p>–mysql图形化界面软件即可进行mysql连接（通过宿主机来连接容器中的mysql）  需要：宿主机ip 密码 用户名 端口==映射的宿主机的端口如33306</p></li></ul><h3 id="tomcat部署"><a href="#tomcat部署" class="headerlink" title="tomcat部署"></a>tomcat部署</h3><p>拉取镜像 pull </p><p>创建容器 【docker run -di –name mytomcat -p 9000:8080 -v /usr/local/webapps:/usr/local/webapps  tomcat:7-jre7】</p><p>使用目录挂载后由于做了目录映射，直接在网页访问tomcat是无法直接访问的，可以把war包上传到目录下进行访问</p><h3 id="nginx部署"><a href="#nginx部署" class="headerlink" title="nginx部署"></a>nginx部署</h3><p>拉取镜像 pull<br>创建容器 【docker run -di –name mynginx -p 80:80 nginx】</p><h3 id="redis部署"><a href="#redis部署" class="headerlink" title="redis部署"></a>redis部署</h3><p>拉取镜像 pull<br>创建容器 【docker run -di –name myredis -p 6379:6379 redis】<br>测试：客户端进入cmd  -》redis-cli -h 远程ip  -》连接成功，存储查询正常即完成。</p><h2 id="例：docker简单使用例子"><a href="#例：docker简单使用例子" class="headerlink" title="例：docker简单使用例子"></a>例：docker简单使用例子</h2><p>通过docker构建tomcat部署web项目。</p><h3 id="复制项目到容器目录运行"><a href="#复制项目到容器目录运行" class="headerlink" title="复制项目到容器目录运行"></a>复制项目到容器目录运行</h3><p><strong>1- 准备一个简单web项目并上传到linux</strong></p><ul><li>目录结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">│  index.html</span><br><span class="line">└─WEB-INF</span><br><span class="line">        web.xml</span><br></pre></td></tr></table></figure><ul><li>文件内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xm1 version=&quot;&quot;1.0&quot; encoding=&quot;UTF-8&quot;&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xm1ns</span>=<span class="string">&quot;http://xm1ns.jcp.org/xm1/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xm1ns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xm1ns.jcp.org/xm1/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://xm1ns.jcp.org/xm1/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dockerTest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello docker!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上传linux  如： 通过FileZilla工具上传</li></ul><p><strong>2-通过Docker安装tomcat</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取Tomcat镜像</span></span><br><span class="line">docker pu17 daocloud.io/library/tomcat:8.0.45</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Tomcat镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Tomcat容器</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat 镜像tag(获取IMAGE ID， imageId不用输完整也行)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看tomcat启动 浏览器访问http://ip地址:8080</span></span><br></pre></td></tr></table></figure><p><strong>3-把上传的项目复制到tomcat的webapp目录下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入tomcat容器查看目录</span></span><br><span class="line">docker exec -it imageId bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入webapps 查看路径  输出路径： /usr/local/tomcat/webapps</span></span><br><span class="line">cd webapps</span><br><span class="line">pwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以退出容器 获取重新打开一个终端    进入项目所在目录复制项目到webapp目录</span></span><br><span class="line">exit</span><br><span class="line">docker cp ./demo/ imageId:/usr/local/tomcat/webapps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以再次进入tomcat容器查看是否复制成功</span></span><br><span class="line">docker exec -it imageId bash</span><br><span class="line">cd webapps</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><strong>4- 浏览器访问项目  可通过【docker logs -f tomcat】查看运行日志</strong></p><p><img src="../img/image-20220213215744533.png" alt="image-20220213215744533"></p><h3 id="复制项目到数据卷映射目录操作运行"><a href="#复制项目到数据卷映射目录操作运行" class="headerlink" title="复制项目到数据卷映射目录操作运行"></a>复制项目到数据卷映射目录操作运行</h3><p><strong>1、2、4一致</strong>：如果基于上面直接复制项目到容器目录了可以删除项目后停止容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到容器内tomcat的webapp目录中</span></span><br><span class="line">rm -r demo/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker stop [imageId(可通过[docker ps查看])</span><br><span class="line">docker rm 容器名称/imageId</span><br></pre></td></tr></table></figure><p><strong>3-创建数据卷映射目录并复制项目到映射的目录下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-----创建数据卷</span></span><br><span class="line">docker volume create v01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器时进行数据卷映射</span></span><br><span class="line">docker run -d -p 8080:8080 -v v01:/usr/local/tomcat/webapps/ --name tomcat imageId</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过【docker volume  <span class="built_in">ls</span>】查看数据卷列表。查看数据卷详细信息获取docker自动创建数据卷时映射的路径,即挂载路径：[MountPoint]</span></span><br><span class="line">docker volume inspect v01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制项目到映射的路径中</span></span><br><span class="line">cp demo -r /var/lib/docker/volumes/v01/_data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2----直接映射目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建映射的目录</span></span><br><span class="line">mkdir tomcat_webapps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止tomcat并删除容器</span></span><br><span class="line">docker stop 容器名称/imageId</span><br><span class="line">docker rm 容器名称/imageId</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器直接映射目录</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如：docker run -d -p 8080:8080 -v /root/other/dockerTest/tomcat_webapps:/usr/local/tomcat/webapps/ --name tomcat feba</span></span><br><span class="line">docker run -d -p 8080:8080 -v 需要映射的路径:/usr/local/tomcat/webapps/ --name tomcat imageId</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">项目复制到映射的目录中</span></span><br><span class="line">cp demo -r /root/other/dockerTest/tomcat_webapps</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis复习-一些点</title>
      <link href="/aiyblog/2020/12/26/mybatis/mybatis%E5%A4%8D%E4%B9%A0-%E4%B8%80%E4%BA%9B%E7%82%B9/"/>
      <url>/aiyblog/2020/12/26/mybatis/mybatis%E5%A4%8D%E4%B9%A0-%E4%B8%80%E4%BA%9B%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="POINT-一些点"><a href="#POINT-一些点" class="headerlink" title="POINT-一些点"></a>POINT-一些点</h2><h3 id="1、sql插入后，返回自增主键值"><a href="#1、sql插入后，返回自增主键值" class="headerlink" title="1、sql插入后，返回自增主键值"></a><strong>1、sql插入后，返回自增主键值</strong></h3><p>mybatis也是利用statement.getGenreatedKeys()。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">属性：</span><br><span class="line">useGeneratedKeys=&quot;true&quot; 使用自增主键获取主键值策略</span><br><span class="line">keyProperty 指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性--&gt;</span><br><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.atguigy.mybatis.bean.Employee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into tbl_employee(last_name,email,gender)values(#&#123;lastName&#125; ,#&#123;emai1&#125; ,#&#123;gender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>oracle不支持自增，但使用序列来模拟自增。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 每次插入的数据的主键是从序列中拿到的值;如何获取到这个值;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmp&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            keyProperty:查出的主键值封装给javaBean的哪个属性order=&quot;BEFORE&quot;:当前s.ql在插入sgl之前运行</span></span><br><span class="line"><span class="comment">            resultType:查出的数据的返回值类型</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span><span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">            &lt;! --编写查询主键的s.gl语句--&gt;</span><br><span class="line">            select EMPLOYEES_SEQ.nextval from dual</span><br><span class="line">      <span class="tag">&lt;/<span class="name">selectkey</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 插入时的主键是从序列中拿到的   其实也可以直接在sql里写从序列里取值，即#&#123;id&#125;替换为employees_seq.nextval --&gt;</span></span><br><span class="line">      insert into employees(EMPLOYEE_ID,LAST_NAME ,EMAIL)values(#&#123;id&#125; ,#&#123;lastName&#125; ,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1、对于接口方法中传递参数处理"><a href="#1、对于接口方法中传递参数处理" class="headerlink" title="1、对于接口方法中传递参数处理"></a><strong>1、对于接口方法中传递参数处理</strong></h3><h4 id="Param-“”-来指定参数对应的值"><a href="#Param-“”-来指定参数对应的值" class="headerlink" title="@Param(“”)来指定参数对应的值"></a><strong>@Param(“”)来指定参数对应的值</strong></h4><ul><li>当接口方法传递多个参数时，对应mapper.xml默认使用map存储，key=param1…paramn表示，value=参数值，所以在sql中通过#{}取值时要通过param1…paramn来取</li><li>若想指定参数的key需要在接口参数前添加@Param(“xxx”)来指定。</li><li>即接口中传递过来的参数可以是pojo也可以是一个map，因为最后都是转为一个map</li></ul><blockquote><p>To: 如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO (Transfer object）数据传输对象</p><p>明确即接口对应.xml配置sql文件可传递：pojo、map、To(数据传输对象)</p></blockquote><p><strong>参数封装</strong></p><ul><li>对于传过来的collectio类型，或数组，若没有＠Param注解表示，需要用list来取值，因为也是封装成一个map，但是key=list</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">public Employee getEmpById(List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> ids);</span><br><span class="line">取值:取出第一个id的值:</span><br><span class="line">    错误：#&#123;param1[0]&#125;，#&#123;ids[0]&#125;都是错的  </span><br><span class="line">    正确：#&#123;list[0]&#125;，</span><br></pre></td></tr></table></figure><h3 id="3、关于-与-取值时的预编译与拼接"><a href="#3、关于-与-取值时的预编译与拼接" class="headerlink" title="3、关于#{}与${}取值时的预编译与拼接"></a><strong>3、关于#{}与${}取值时的预编译与拼接</strong></h3><ul><li>#{}:是以预编译的形式，将参数设置到sql语句中;Preparedstatement:防止sql注入</li><li>${}:取出的值直接拼装在sql语句中;会有安全问题;<ul><li>大多情况下，我们去参数的值都应该去使用#{};</li><li>原生jdbc不支持占位符的地方我们就可以使用${}进行取值，比如按照年份分表拆分，分表、排序等；</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> $&#123;<span class="keyword">year</span>&#125;_salary <span class="keyword">where</span> XXX3</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_employee <span class="keyword">order</span> <span class="keyword">by</span> $&#123;if_name&#125; $&#123;<span class="keyword">order</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="4、-更丰富的用法"><a href="#4、-更丰富的用法" class="headerlink" title="4、#{}更丰富的用法:"></a><strong>4、#{}更丰富的用法:</strong></h3><ul><li>规定参数的一些规则:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javaType、jdbcType. mode（存储过程)、numericScale、</span><br><span class="line">resultMap、typeHandler、jdbcTypeName、expression(未来准备支持的功能)</span><br></pre></td></tr></table></figure><ul><li>jdbcType通常需要在某种特定的条件下被设置:</li><li>在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle(报错)﹔</li><li>JdbcType OTHER=无效的类型,因为mybatis对所有的nul1都映射的是原生Jdbc的OTHER类型，oracle不能处理。</li><li>由于全局配置中:jdbcTypeForNull=OTHER; oracle不支持;可通过以下两种方法解决。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、#&#123;emai1,jdbcType=OTHER];</span><br><span class="line">2、jdbc TlypeForNu11=NULLl</span><br></pre></td></tr></table></figure><h3 id="5、Other"><a href="#5、Other" class="headerlink" title="5、Other"></a>5、Other</h3><ul><li><p>resultType：如果返回的是一个集合，要写集合中存储元素的类型，而不是list类型</p></li><li><p>可以在接口方法中通过@MapKey(“xxx”)来指定接口对应.xml配置文件对应方法的sql语句返回类型为map时用什么来作为map的键</p></li></ul><h3 id="6、批量插入数据"><a href="#6、批量插入数据" class="headerlink" title="6、批量插入数据"></a>6、批量插入数据</h3><ul><li>多个数据一起插入，mysql支持values后面跟‘，’分割的多个‘()’。而oracle则不支持。</li></ul><blockquote><p>如：insert into student values(101,”xhangsan”),(102,”lisi”),</p></blockquote><ul><li>解决oracle多数据插入：</li></ul><p>1–多个insert语句放在begin … end 里面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// oracle可使用：</span><br><span class="line">begin</span><br><span class="line">    insert into employees(employee_id,last_name , email)</span><br><span class="line">    values(employees_seq.nextval, &#x27;test_001&#x27; , &#x27;test_001@xiaoai.com&#x27;);</span><br><span class="line">    insert into employees (employee_id,last_name , email)</span><br><span class="line">    values(employees_seq.nextval, &#x27;test_002&#x27; , &#x27;test_0e02@xiaoai.com&#x27;);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">// mabatis使用则为：</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmps&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracLe&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- oracle第一种批量方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>= <span class="string">&quot;emp&quot;</span> <span class="attr">open</span>=<span class="string">&quot;begin&quot;</span> <span class="attr">close</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">        insert into employees(employee_id,1ast_name, email)</span><br><span class="line">        values(employees_seq.nextval,#&#123;emp. lastName&#125;,#&#123;emp.emai1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2–利用中间表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// sql语句：</span><br><span class="line">insert into employees(employee_id, last_name, email)</span><br><span class="line">select employees_seq.nextval, lastName , email from(</span><br><span class="line">select &#x27;test_a_01&#x27;, lastName, &#x27;test_a_eO1’ email from dual</span><br><span class="line">union</span><br><span class="line">select &#x27;test_a_02&#x27;, lastName, &#x27;test_a_e02&#x27; email from dual</span><br><span class="line">union</span><br><span class="line">select &#x27;test_a_03&#x27;, lastName, &#x27;test_a_e03&#x27; email from dual</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// mabatis使用：</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmps&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;oracLe&quot;</span>&gt;</span></span><br><span class="line">    &lt;! -- oracle第二种批量方式--&gt;</span><br><span class="line">    insert into employees(employee_id,last_name, email)</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps &quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;union&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">open</span>=<span class="string">&quot; select employees_seq.nextva1,lastName , email from(&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        select #&#123;emp.lastName&#125; lastName, #&#123;emp.email&#125; email from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7、两个默认内置参数"><a href="#7、两个默认内置参数" class="headerlink" title="7、两个默认内置参数"></a>7、两个默认内置参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_parameter:代表整个参数</span><br><span class="line">    单个参数:_parameter就是这个参数</span><br><span class="line">    多个参数:参数会被封装为一个map:_parameter就是代表这个map</span><br><span class="line">_databaseId:如果配置了databaseIdProvider标签。</span><br><span class="line">    _databaseId就是代表当前数据库的别名|</span><br><span class="line"></span><br><span class="line">使用：当相同数据在不同数据库时，判断当前使用什么数据库对应查询什么表</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsTestInnerParameter&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.employee&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId==&#x27;mysqL&#x27;&quot;</span>&gt;</span></span><br><span class="line">        select * from tbl_employee</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseld==&#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="line">        select * from employees</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">&lt;/ select&gt;</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="一级缓存-本地缓存"><a href="#一级缓存-本地缓存" class="headerlink" title="一级缓存(本地缓存)"></a><strong>一级缓存(本地缓存)</strong></h3><p>一级缓存是一直开启的，缓存即SqlSession级别的一个map</p><p>一级缓存失效情况：(即没有使用到当前一级缓存的情况，需要再向数据库发出查询)</p><ul><li>sqlsession不同</li><li>sqlsession相同，查询条件不同(即当前一级缓存中还没有要查询的数据&gt;</li><li>sqlsession相同，查询条件相同，但是两次查询之间进行过增删改操作(怕增删改对数据进行了更改)。</li><li>手动清除了一级缓存，即通过sqlsession.clearCache()清除缓存; <ul><li> .clearCache()只清除一级缓存，增删改时一、二级缓存都会清除。</li></ul></li></ul><h3 id="二级缓存-全局缓存"><a href="#二级缓存-全局缓存" class="headerlink" title="二级缓存(全局缓存)"></a><strong>二级缓存(全局缓存)</strong></h3><p>常用数据放到二级缓存中，基于namespace级别的缓存，一个namespace对应一个二级缓存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">工作机制</span><br><span class="line">1、一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中;</span><br><span class="line">2、如果会话关闭;一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容。</span><br></pre></td></tr></table></figure><h3 id="缓存设置"><a href="#缓存设置" class="headerlink" title="缓存设置"></a>缓存设置</h3><p>在接口对应.xml配置文件中通过【cache】标签设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">cache标签属性</th><th align="left">说明</th><th align="left"></th></tr></thead><tbody><tr><td align="left">eviction</td><td align="left">缓仔的回收策略</td><td align="left">当缓存慢了以后，需要删除一些数据，会根据设置的策略进行删除 默认的是LRU。<br/> <strong>LRU</strong> 最近最少使用的:移除最长时间不被使用的对象。<br/><strong>FIFO</strong> 先进先出:按对象进入缓存的顺序来移除它们。<br/><strong>SOFT</strong> 软引用:移除基于垃圾回收器状态和软引用规则的对象。<br/><strong>WEAK</strong> 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。</td></tr><tr><td align="left">flushInterval</td><td align="left">缓存刷新间隔</td><td align="left"></td></tr><tr><td align="left">readOnly</td><td align="left">是否只读</td><td align="left"><strong>true</strong>:只读; mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快。<br/><strong>false</strong>:非只读:mybatis觉得获取的数据可能会被修改。 mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全，速席慢|</td></tr><tr><td align="left">size</td><td align="left">缓存存放多少元素</td><td align="left">缓存存放多少元素;</td></tr><tr><td align="left">type</td><td align="left">指定自定义缓存的全类名</td><td align="left">指定自定义缓存的全类名;实现Cache接口即可;</td></tr></tbody></table><h3 id="二级缓存使用"><a href="#二级缓存使用" class="headerlink" title="二级缓存使用"></a>二级缓存使用</h3><p>查出的数据默认放在一级缓存中，只有当sqlsession会话提交或者关闭后数据才会转移到二级缓存中。但前提是二级缓存开启了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">二级缓存的使用：</span><br><span class="line">1--让Mybatis框架支持二级缓存(在主配置文件中配置)</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2--让当前接口方法的.xml映射文件支持二级缓存(在接口对应配置文件中配置)</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.dao.IUserDao&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3--让当前操作支持二级缓存(在select等操作标签中配置)</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  </span><br><span class="line">    select * from user where id = #&#123;uid&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis复习-注解</title>
      <link href="/aiyblog/2020/12/26/mybatis/mybatis%E5%A4%8D%E4%B9%A0-%E6%B3%A8%E8%A7%A3/"/>
      <url>/aiyblog/2020/12/26/mybatis/mybatis%E5%A4%8D%E4%B9%A0-%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="关于sql操作"><a href="#关于sql操作" class="headerlink" title="关于sql操作"></a>关于sql操作</h2><h3 id="一-、定义SQL语句"><a href="#一-、定义SQL语句" class="headerlink" title="一 、定义SQL语句"></a><strong>一 、定义SQL语句</strong></h3><h4 id="【select】"><a href="#【select】" class="headerlink" title="【select】"></a>【<strong>select</strong>】</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">属性介绍:</span><br><span class="line">    id :唯一的标识符.</span><br><span class="line">    parameterType:传给此语句的参数的全路径名或别名 例:com.test.poso.User或user</span><br><span class="line">    resultType :语句返回值类型或别名。注意，如果是集合，那么这里填写的</span><br><span class="line">是集合的泛型，而不是集合本身（resultType 与resultMap 不能并用）</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;userList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name =#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="【insert】"><a href="#【insert】" class="headerlink" title="【insert】"></a>【<strong>insert</strong>】</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性介绍:</span><br><span class="line">    id :唯一的标识符</span><br><span class="line">    parameterType:传给此语句的参数的全路径名或别名 例:com.test.poso.User</span><br></pre></td></tr></table></figure><h4 id="【delete】"><a href="#【delete】" class="headerlink" title="【delete】"></a>【<strong>delete</strong>】</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例子:</span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span> </span><br><span class="line">    delete from user </span><br><span class="line">    where id = #&#123;id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="【update】"><a href="#【update】" class="headerlink" title="【update】"></a>【<strong>update</strong>】</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类似于insert</span><br></pre></td></tr></table></figure><h3 id="二、配置对象属性与查询结果集"><a href="#二、配置对象属性与查询结果集" class="headerlink" title="二、配置对象属性与查询结果集"></a><strong>二、配置对象属性与查询结果集</strong></h3><h4 id="【resultMap】"><a href="#【resultMap】" class="headerlink" title="【resultMap】"></a>【<strong>resultMap</strong>】</h4><ul><li>建立SQL查询结果字段与实体属性的映射关系信息</li><li>查询的结果集转换为java对象，方便进一步操作</li><li>将结果集中的列与java对象中的属性对应起来并将值填充进去</li><li>注意：与java对象对应的列不是数据库中表的列名，而是查询后结果集的列名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getStudentRM&quot;</span> <span class="attr">type</span>=<span class="string">&quot;EStudnet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ID&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;studentName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;Name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;studentAge&quot;</span> <span class="attr">column</span>=<span class="string">&quot;Age&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getStudentRM&quot;</span>&gt;</span></span><br><span class="line">    SELECT ID, Name, Age</span><br><span class="line">    FROM TStudent</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">resultMap标签属性：</span><br><span class="line">    id:该resultMap的标志</span><br><span class="line">    type：返回值的类名，此例中返回EStudnet类</span><br><span class="line">resultMap标签下的子标签：</span><br><span class="line">    id:用于设置主键字段与领域模型属性的映射关系，此处主键为ID，对应id。</span><br><span class="line">    result：用于设置普通字段与领域模型属性的映射关系</span><br></pre></td></tr></table></figure><h4 id="【association】-一对一"><a href="#【association】-一对一" class="headerlink" title="【association】 一对一"></a>【<strong>association</strong>】 一对一</h4><p>在resultmap中使用，可以通过嵌套结果集(即在标签里再通过result标签来对应属性),也可以通过另一接口方法查询后获得结果集。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义某个javaBean的封装规则</span></span><br><span class="line"><span class="comment">type:自定义规则的Java类型</span></span><br><span class="line"><span class="comment">id:唯—id方便引用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.xiaoai.mybatis.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyEmp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定主键列的封装规则</span></span><br><span class="line"><span class="comment">        id定义主键会底层有优化;column:指定哪一列</span></span><br><span class="line"><span class="comment">        property:指定对应的javaBean属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> / &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义普通列封装规则--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;Last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--其他不指定的列会自动封装:我们只要写resultMap就把全部的映射规则都写上。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;emaiL&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- resultMap:自定义结果集映射规则; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- public Employee getEmpById ( Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyEmp&quot;</span>&gt;</span></span><br><span class="line">select * from tbl_employee where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultMap标签自定义结果集</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--场景—·</span></span><br><span class="line"><span class="comment">查询Employee的同时查询员工对应的部门门Employee===Department</span></span><br><span class="line"><span class="comment">一个员工有与之对应的部门信息;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 联合查询:级联属性封装结果集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.xiaoai.mybatis.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyDifEmp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;Last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;LastName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>= <span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.ia&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.departmentName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span>.</span><br><span class="line"></span><br><span class="line">或者通过association标签对应</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.xiaoai.mybatis.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyDifEmp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;Last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;LastName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--association可以指定联合的javaBean对象property=&quot;dept&quot;:指定哪个属性是联合的对象</span></span><br><span class="line"><span class="comment">javaType:指定这个属性对象的类型[不能省略]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.xiaoai.mybatis.bear.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>= <span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span><span class="attr">t</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="【collection】-一对多"><a href="#【collection】-一对多" class="headerlink" title="【collection】 一对多"></a>【<strong>collection</strong>】 一对多</h4><p>collection通过调用其他接口方法使用</p><table><thead><tr><th align="left"><strong>相关属性</strong></th><th></th></tr></thead><tbody><tr><td align="left">select</td><td>表示调用另一个接口的查询方法</td></tr><tr><td align="left">column</td><td>将哪一列的值传递过去作为另一接口方法的参数 , 可以传递一个map类型的参数，例如：column=”key1=column1, key2=column2}”</td></tr><tr><td align="left">property</td><td>查询结果返回后封装到当前pojo哪一个属性。</td></tr><tr><td align="left">fetchType</td><td>设置延迟加载 =”lzay”</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.xiaoai.mybatis.bean. Department&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyDeptStep&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> / &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;departmentName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.xiaoai.mybatis.dao.EmployeeMapperPlus.getEmpsById&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public Department getDeptByIdstep(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByIdStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyDeptStep&quot;</span>&gt;</span></span><br><span class="line">    select id,dept_name from tbl_dept where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="【discriminator】"><a href="#【discriminator】" class="headerlink" title="【discriminator】"></a>【discriminator】</h4><p>鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为封装Employee:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">例子：如果查出的是女生：就把部门信息查询出来，否则不查询;如果是男生，把last_name这一列的值赋值给email;</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.xiaoai.mybatis.bean.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;MyEmpDis&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name &quot;</span> <span class="attr">property</span>= <span class="string">&quot;LastName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">column:指定判定的列名</span></span><br><span class="line"><span class="comment">javaType:列值对应的java类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--女生  参数：resultType=指定封装的结果类型﹔不能缺少。resultMap--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">resultType</span>= <span class="string">&quot;com.xiaoai.mybatis.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">select</span>=<span class="string">&quot;com.xiaoai.mybatis.dao.DepartmentMapper.getEmployeeById&quot;</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">column</span>=<span class="string">&quot;d_id&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--男生;如果是男生，把last_name这一列的值赋值给email; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.mybatis.bean.Employee&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;Last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;LastName&quot;</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>= <span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;emaiL&quot;</span> /&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>= <span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、动态拼接SQL标签"><a href="#三、动态拼接SQL标签" class="headerlink" title="三、动态拼接SQL标签"></a><strong>三、动态拼接SQL标签</strong></h3><h4 id="【if】"><a href="#【if】" class="headerlink" title="【if】"></a>【if】</h4><p>通常用于WHERE语句中，通过判断参数值来决定是否使用某个查询条件， </p><p>也经常用于UPDATE语句中判断是否更新某一个字段，还可以在INSERT语句中用来判断是否插入某个字段的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentListLikeName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span>     </span><br><span class="line">    SELECT * from STUDENT_TBL ST       </span><br><span class="line">    WHERE ST.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName&#125;),&#x27;%&#x27;)      </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p>但是此时如果studentName是null或空字符串，此语句很可能报错或查询结果为空。</p><p>此时我们使用if动态sql语句先进行判断，如果值为null或等于空字符串，我们就不进行此条件的判断。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改为：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot; getStudentListLikeName &quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span>     </span><br><span class="line">    SELECT * from STUDENT_TBL ST      </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName!=null and studentName!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">        WHERE ST.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName&#125;),&#x27;%&#x27;)      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>    </span><br></pre></td></tr></table></figure><h4 id="【foreach】"><a href="#【foreach】" class="headerlink" title="【foreach】"></a>【foreach】</h4><p>主要用于构建in条件，他可以在sql中对集合进行迭代。如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span>&gt;</span> </span><br><span class="line">    delete from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">假如说参数为 int[] ids = &#123;1,2,3,4,5&#125;</span><br><span class="line">那么打印之后的SQL如下：</span><br><span class="line">　 delete form user where id in (1,2,3,4,5)</span><br></pre></td></tr></table></figure><p><strong>foreach属性释义：</strong></p><table><thead><tr><th align="left">属性</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">collection</td><td align="left">属性值有三个：<br>&gt;&gt; list  =   List <br/>&gt;&gt; array = 数组 <br/>&gt;&gt; map = map集合 <br/>&gt;&gt; 如果接口在传递参数时使用了@Param注解，则可以使用自己定义的名称</td></tr><tr><td align="left">item</td><td align="left">表示在迭代过程中每一个元素的别名</td></tr><tr><td align="left">index</td><td align="left">表示在迭代过程中每次迭代到的位置（下标）</td></tr><tr><td align="left">open</td><td align="left">前缀</td></tr><tr><td align="left">close</td><td align="left">后缀</td></tr><tr><td align="left">separator</td><td align="left">分隔符，表示迭代时每个元素之间以什么分隔</td></tr></tbody></table><blockquote><p>foreach通常可以将之用到批量删除、添加等操作中。</p></blockquote><h4 id="【choose】"><a href="#【choose】" class="headerlink" title="【choose】"></a>【choose】</h4><p>从多个选项中选择一个。</p><ul><li><p>MyBatis提供了choose 元素，按顺序判断when中的条件出否成立，如果有一个成立，则choose结束。</p></li><li><p>当choose中所有when的条件都不满则时，则执行otherwise中的sql。</p></li><li><p>类似于Java 的switch 语句，choose为switch，when为case，otherwise则为default。</p></li><li><p>if是与(and)的关系，而choose是或（or）的关系。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentListChooseEntity&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span>     </span><br><span class="line">    SELECT * from STUDENT_TBLST      </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;studentName!=null and studentName!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">                    ST.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName&#125;),&#x27;%&#x27;)      </span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;studentSex!= null and studentSex!= &#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">                    ST.STUDENT_SEX = #&#123;studentSex&#125;      </span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;studentBirthday!=null&quot;</span>&gt;</span>     </span><br><span class="line">                   ST.STUDENT_BIRTHDAY = #&#123;studentBirthday&#125;      </span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;classEntity!=null and classEntity.classID !=null and classEntity.classID!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">                   ST.CLASS_ID = #&#123;classEntity.classID&#125;      </span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span>     </span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>     </span><br><span class="line">                   1=1 </span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>     </span><br></pre></td></tr></table></figure><h3 id="四、格式化输出"><a href="#四、格式化输出" class="headerlink" title="四、格式化输出"></a>四、格式化输出</h3><h4 id="【where】"><a href="#【where】" class="headerlink" title="【where】"></a>【where】</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentListWhere&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span>     </span><br><span class="line">    SELECT * from STUDENT_TBL ST      </span><br><span class="line">        WHERE </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName!=null and studentName!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            AND ST.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName&#125;),&#x27;%&#x27;)      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentSex!= null and studentSex!= &#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            AND ST.STUDENT_SEX = #&#123;studentSex&#125;      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>     </span><br></pre></td></tr></table></figure><p> 如果上面例子，参数studentName为null或’’，则或导致此sql组合成“WHERE AND”之类的关键字多余的错误SQL。这时我们可以使用where动态语句来解决。</p><ul><li><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。</p></li><li><p>此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p></li></ul><p>上面例子修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询学生list，like姓名，=性别 --&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentListWhere&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span>     </span><br><span class="line">    SELECT * from STUDENT_TBL ST      </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName!=null and studentName!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            ST.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName&#125;),&#x27;%&#x27;)      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentSex!= null and studentSex!= &#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            AND ST.STUDENT_SEX = #&#123;studentSex&#125;      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>     </span><br></pre></td></tr></table></figure><h4 id="【set】"><a href="#【set】" class="headerlink" title="【set】"></a>【set】</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新学生信息 --&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span>&gt;</span>     </span><br><span class="line">    UPDATE STUDENT_TBL      </span><br><span class="line">       SET STUDENT_TBL.STUDENT_NAME = #&#123;studentName&#125;,      </span><br><span class="line">           STUDENT_TBL.STUDENT_SEX = #&#123;studentSex&#125;,      </span><br><span class="line">           STUDENT_TBL.STUDENT_BIRTHDAY = #&#123;studentBirthday&#125;,      </span><br><span class="line">           STUDENT_TBL.CLASS_ID = #&#123;classEntity.classID&#125;      </span><br><span class="line">     WHERE STUDENT_TBL.STUDENT_ID = #&#123;studentID&#125;;      </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span>     </span><br></pre></td></tr></table></figure><p>问题：当在update语句中使用if标签时，如果前面的if没有执行，则或导致逗号多余错误。</p><ul><li>使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。</li><li>没有使用if标签时，如果有一个参数为null，都会导致错误，如下示例：</li></ul><p> 使用set+if标签修改后，如果某项为null则不进行更新，而是保持数据库原值。如下示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新学生信息 --&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span>&gt;</span>     </span><br><span class="line">    UPDATE STUDENT_TBL      </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName!=null and studentName!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            STUDENT_TBL.STUDENT_NAME = #&#123;studentName&#125;,      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentSex!=null and studentSex!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            STUDENT_TBL.STUDENT_SEX = #&#123;studentSex&#125;,      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentBirthday!=null &quot;</span>&gt;</span>     </span><br><span class="line">            STUDENT_TBL.STUDENT_BIRTHDAY = #&#123;studentBirthday&#125;,      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classEntity!=null and classEntity.classID!=null and classEntity.classID!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            STUDENT_TBL.CLASS_ID = #&#123;classEntity.classID&#125;      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span>     </span><br><span class="line">    WHERE STUDENT_TBL.STUDENT_ID = #&#123;studentID&#125;;      </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span>     </span><br></pre></td></tr></table></figure><h4 id="【trim】"><a href="#【trim】" class="headerlink" title="【trim】"></a>【trim】</h4><p>trim(拼接字符串)是更灵活的去处多余关键字的标签，他可以实现where和set的效果。</p><table><thead><tr><th align="left">trim标签相关属性说明</th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">prefix=””</td><td align="left">前缀</td><td align="left">trim标签体中是整个字符串拼串后的结果。prefix给拼串后的整个字符串加一个前缀</td></tr><tr><td align="left">prefixOverrides=””</td><td align="left">前缀覆盖</td><td align="left">去掉整个字符串前面多余的什么字符</td></tr><tr><td align="left">suffix=””</td><td align="left">后缀</td><td align="left">suffix给拼串后的整个字符串加一个后辍</td></tr><tr><td align="left">suffixOverrides=” “</td><td align="left">后缀覆盖</td><td align="left">去掉整个字符串后面多余的什么字符</td></tr></tbody></table><p>where例子的等效trim语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询学生list，like姓名，=性别 --&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentListWhere&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentResultMap&quot;</span>&gt;</span>     </span><br><span class="line">    SELECT * from STUDENT_TBL ST      </span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND|OR&quot;</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName!=null and studentName!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            ST.STUDENT_NAME LIKE CONCAT(CONCAT(&#x27;%&#x27;, #&#123;studentName&#125;),&#x27;%&#x27;)      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentSex!= null and studentSex!= &#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            AND ST.STUDENT_SEX = #&#123;studentSex&#125;      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>set例子的等效trim语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新学生信息 --&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;StudentEntity&quot;</span>&gt;</span>     </span><br><span class="line">    UPDATE STUDENT_TBL      </span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentName!=null and studentName!=&quot;</span>&quot;&gt;</span>     </span><br><span class="line">            STUDENT_TBL.STUDENT_NAME = #&#123;studentName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentSex!=null and studentSex!=&quot;</span> &quot;&gt;</span>     </span><br><span class="line">            STUDENT_TBL.STUDENT_SEX = #&#123;studentSex&#125;, </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;studentBirthday!=null &quot;</span>&gt;</span>     </span><br><span class="line">            STUDENT_TBL.STUDENT_BIRTHDAY = #&#123;studentBirthday&#125;,      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;classEntity!=null and classEntity.classID!=null and classEntity.classID!=&#x27;&#x27; &quot;</span>&gt;</span>     </span><br><span class="line">            STUDENT_TBL.CLASS_ID = #&#123;classEntity.classID&#125;      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span>     </span><br><span class="line">    WHERE STUDENT_TBL.STUDENT_ID = #&#123;studentID&#125;;      </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span>     </span><br></pre></td></tr></table></figure><h3 id="五、配置关联关系"><a href="#五、配置关联关系" class="headerlink" title="五、配置关联关系"></a>五、配置关联关系</h3><h4 id="【association】"><a href="#【association】" class="headerlink" title="【association】"></a>【association】</h4><p>一对一<br>association通常用来映射一对一的关系，例如，有个类user,对应的实体类如下：(getter,setter方法省略)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;<span class="comment">//主键</span></span><br><span class="line"><span class="keyword">private</span> String userName;<span class="comment">//用户姓名</span></span><br></pre></td></tr></table></figure><p>有个类Article,对应的实体类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;<span class="comment">//主键</span></span><br><span class="line"><span class="keyword">private</span> String articleTitle;<span class="comment">//文章标题</span></span><br><span class="line"><span class="keyword">private</span> String articleContent;<span class="comment">//文章内容</span></span><br></pre></td></tr></table></figure><p>如果我想查询一个用户的时候，也查到他写的一篇文章，可以怎样写呢？在类user加入一个属性article</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;<span class="comment">//主键</span></span><br><span class="line"><span class="keyword">private</span> String userName;<span class="comment">//用户姓名</span></span><br><span class="line"><span class="keyword">private</span> Article article;<span class="comment">//新增的文章属性</span></span><br></pre></td></tr></table></figure><p>mapper.xml 在user类的mapper.xml这样配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;test.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;-- 属性：</span><br><span class="line">        property：查询结果返回后封装到当前pojo哪一个属性。</span><br><span class="line">        select：表示调用另一个接口的查询方法 这里test.mybatis.dao.articleMapper为命名空间</span><br><span class="line">        column：将那一列的值传递过去作为另一接口方法的参数 这里把user的id传过去</span><br><span class="line">      --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;article&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;test.mybatis.dao.articleMapper.selectArticleByUserId&quot;</span>/&gt;</span>//test.mybatis.dao.articleMapper为命名空间</span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>article对应的xml这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;articleResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;test.mybatis.entity.Article&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;articleTitle&quot;</span> <span class="attr">property</span>=<span class="string">&quot;articleTitle&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;articleContent&quot;</span> <span class="attr">property</span>=<span class="string">&quot;articleContent&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">select语句...</span><br></pre></td></tr></table></figure><p>注意：selectArticleByUserId方法对应在article对应的xml有这样的select语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectArticleByUserId&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ArticleResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * </span><br><span class="line">    from tb_article where userId=#&#123;userId&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="【collection】"><a href="#【collection】" class="headerlink" title="【collection】"></a>【collection】</h4><p>一对多<br>实体类增加对应属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String id;<span class="comment">//主键</span></span><br><span class="line"><span class="keyword">private</span> String userName;<span class="comment">//用户姓名</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Article&gt; articleList;</span><br></pre></td></tr></table></figure><p>userMapper.xml这样配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;test.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.lang.String&quot;</span>/&gt;</span></span><br><span class="line">    //这里把user的id传过去</span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;articleList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;test.mybatis.dao.articleMapper.selectArticleListByUserId&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">以下省略，类同，Mybatis会把结果封装成List类型。</span><br></pre></td></tr></table></figure><blockquote><p>如果我还想通过Article表另一张表，比如文章中有个fk_id，也可以像上面这样重复配置，把fk_id当做与另一张表关联的参数，那时就可以通过用户查到文章，查到文章关联的另一张表了。</p></blockquote><h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a><strong>六、标签</strong></h3><h4 id="【bind】"><a href="#【bind】" class="headerlink" title="【bind】"></a>【bind】</h4><p>可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">属性：</span><br><span class="line">name：相当于变量名</span><br><span class="line">value：变量值，可以动态拼接，即可以写ognl表达式</span><br><span class="line">使用时，直接使用变量即可，</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例：bind标签使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpsTestInnerParameter&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.bean.Employee&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;_lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;_&#x27;+lastName+&#x27;%&#x27;&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- bind相当于定义变量名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId== &#x27;mysqL&#x27;&quot;</span>&gt;</span></span><br><span class="line">select *from tbl_employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_parameter ! =null&quot;</span>&gt;</span></span><br><span class="line">            where last_name like #&#123;_lastName&#125;  <span class="comment">&lt;!-- 这里的_lastName相当于引用变量名，即_lastName% --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="【sql】"><a href="#【sql】" class="headerlink" title="【sql】"></a>【sql】</h4><p>定义sql，可静态可动态。更多用于写sql语句的一部分，就像写在配置文件中的sql常量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 抽取可重用的sgl片段。方便后面引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;insertcolumn &quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>= <span class="string">&quot;_databaserd==&#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp loyee_id , last_name , emai1</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseld==&#x27;mysqL&#x27; &quot;</span>&gt;</span></span><br><span class="line">last_name , email,gender,d_idr</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过include引用定义好的sql常量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addEmps&quot;</span>&gt;</span></span><br><span class="line">insert into tbl_employee(<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertcolumn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span><br><span class="line">values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;emp.lastName&#125;, #&#123;emp.email&#125; ,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="【include】"><a href="#【include】" class="headerlink" title="【include】"></a>【include】</h4><p>用于引用常量,也可以定义属性property，</p><blockquote><p>sql标签内部就能使用自定义的属性，但取值的正确方式是${prop},不能使用#{prop}这种方式</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以通过refid属性引入前面通过sql标签创建的slq常量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertColumn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testcoLomn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">include还可以自定义一些property，sql标签内部就能使用自定义的属性</span></span><br><span class="line"><span class="comment">inciude-property:取值的正确方式$&#123;prop&#125;,</span></span><br><span class="line"><span class="comment">#&#123;prop&#125;:不能使用这种方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;insertCoLumn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId== &#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="line">employee_id , last_name , email,$&#123;testColumn&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--取值通过#是取不到的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseld== &#x27;mysql&#x27;&quot;</span>&gt;</span> <span class="comment">&lt;!-- 需用通过$&#123;testColumn&#125;来获取--&gt;</span></span><br><span class="line">last_name, email,gender,d_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="全局配置文件中的一些标签"><a href="#全局配置文件中的一些标签" class="headerlink" title="全局配置文件中的一些标签"></a>全局配置文件中的一些标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">configuration</span><br><span class="line">properties</span><br><span class="line">setting</span><br><span class="line">stypeAliases</span><br><span class="line">typeHandlers</span><br><span class="line">objectFactory</span><br><span class="line">plugins</span><br><span class="line">environments</span><br><span class="line">environment</span><br><span class="line">transactionManager</span><br><span class="line">dataSource</span><br><span class="line">databaseIdProvider</span><br><span class="line">mappers</span><br></pre></td></tr></table></figure><h4 id="【properties】标签"><a href="#【properties】标签" class="headerlink" title="【properties】标签"></a>【properties】标签</h4><p>引入外部properties配置文件的内容;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">属性：</span><br><span class="line">resource:引入类路径下的资源</span><br><span class="line">url:引入网络路径或者磁盘路径下的资源</span><br></pre></td></tr></table></figure><h4 id="【settings】标签"><a href="#【settings】标签" class="headerlink" title="【settings】标签"></a>【settings】标签</h4><p>用于设置mybatis的运行时行为</p><blockquote><p>例如：缓存、懒加载、驼峰命名策略等等等。</p></blockquote><h4 id="【typeAliases】标签"><a href="#【typeAliases】标签" class="headerlink" title="【typeAliases】标签"></a>【typeAliases】标签</h4><p>对javabean进行重命名，重命名后在接口对应配置文件.xml中返回类型填写时可以不用填写全限定类名，不过推荐填写全限定类名<br>注意：如果用package 进行重命名，若指定包下的子包包含和父包一样类名的类，会报错。</p><ul><li><strong>对单个进行重命名</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Comment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Comment&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Post&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Section&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.section&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Tag&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog . Tag&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>对多个进行重命名</strong><br>多个重命名就是指定包名，默认命名为类名小写</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>也可以在实体类上通过注解@alias实现类重命名</strong></li></ul><h4 id="【databaseIdProvider】标签"><a href="#【databaseIdProvider】标签" class="headerlink" title="【databaseIdProvider】标签"></a>【databaseIdProvider】标签</h4><p>mybatis根据不同的数据库厂商执行不同的执行sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">    &lt;! --为不同的数据库厂商起别名–-&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MysQL &quot;</span> <span class="attr">value</span>= <span class="string">&quot;mysql&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> / &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在slq标签里通过<code>databaseId=&quot;databaseIdProvider标签下数据库取的名称&quot;</code>指定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.empUser&quot;</span> <span class="attr">databaseId</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tbl_employee </span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="【mapper】标签"><a href="#【mapper】标签" class="headerlink" title="【mapper】标签"></a>【mapper】标签</h4><p>引入接口对应slq映射文件.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/xiaoai/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">属性：</span><br><span class="line">resource引用类路径下的sql映射文件</span><br><span class="line">url 引用网路路径或磁盘下的sql映射文件</span><br><span class="line">class 引用（注册）接口全限定类名： 1-如果用注解，就是引入接口类。2-如果是映射文件，映射文件必须和接口同名，并且放在接口同一目录下；</span><br></pre></td></tr></table></figure><h4 id="【package】标签"><a href="#【package】标签" class="headerlink" title="【package】标签"></a>【package】标签</h4><blockquote><p>注意：mappers下的package和重命名标签中的package区别：一个指定实体类包，一个指定dao包</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于指定Dao接口所在的包，当指定了之后就不需要再写mapper标签resource或者class属性了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xiaoai.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux文件挂载</title>
      <link href="/aiyblog/2020/12/26/linux/linux-%E6%96%87%E4%BB%B6%E6%8C%82%E8%BD%BD/"/>
      <url>/aiyblog/2020/12/26/linux/linux-%E6%96%87%E4%BB%B6%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h1><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><p><strong>挂载</strong> 相当于分配盘符，把硬件与文件夹联系起来，这样就可以去挂载点（挂载路径文件夹）访问硬件（光盘、硬盘、U盘等）里面的数据了。<br>和Windows是一样的原理，只不过Windows是自动分配盘符，Linux要自己手动分配而已。<br><strong>挂载点</strong>：一个空的目录就可以（系统在根目录下给了两个默认的挂载点目录）</p><p><strong>挂载命令格式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mount [-t文件系统][-L卷标名]l[-o特殊选项]设备文件名挂载点</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">-t 文件系统:加入文件系统类型来指定挂载的类型，可以ext3、ext4、iso9660等文件系统</span><br><span class="line">-L 卷标名:挂载指定卷标的分区，而不是安装设备文件名挂载</span><br><span class="line">-О 特殊选项:可以指定挂载的额外选项</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">atime/noatime</td><td align="left">更新访问时间/不更新访问时间。访问分区文件时，是否更新文件的访问时间，默认为更新</td></tr><tr><td align="left">async/sync</td><td align="left">异步/同步，默认为异步</td></tr><tr><td align="left">auto/noauto</td><td align="left">自动/手动，mount -a命令执行时，是否会自动安装/etc/fstab文件内容挂载，默认为自动</td></tr><tr><td align="left">defaults</td><td align="left">定义默认值，相当于rw,suid,dev,exec,auto,nouser,async这七个选项</td></tr><tr><td align="left">exec/noexec</td><td align="left">执行/不执行，设定是否允许在文件系统中执行可执行文件，默认是exec允许</td></tr><tr><td align="left">remount</td><td align="left">重新挂载已经挂载的文件系统，一般用于指定修改特殊权限</td></tr><tr><td align="left">rw/ro</td><td align="left">读写/只读，文件系统挂载时，是否具有读写权限，默认是rw</td></tr><tr><td align="left">suid/nosuid</td><td align="left">具有不具有SUID权限，设定文件系统是否具有SUID和SGID的权限，默认是具有</td></tr><tr><td align="left">user/nouser</td><td align="left">允许/不允许普通用户挂载，设定文件系统是否允许普通用户挂载,默认是不允许，只有root可以挂载分区<br/></td></tr><tr><td align="left">usrquota</td><td align="left">写入代表文件系统支持用户磁盘配额，默认不支持</td></tr><tr><td align="left">grpquota</td><td align="left">写入代表文件系统支持组磁盘配额，默认不支持</td></tr></tbody></table><h3 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@ localhost ~-]# mkdir /mnt/cdrom</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立挂载点</span></span><br><span class="line">[root@ localhost ~-]# mount -t iso9660 /dev/cdrom /mntcdrom</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">挂载光盘</span></span><br><span class="line">[root@ localhost ~-]# mount /dev/sr0 /mntcdrom/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>光盘硬件文件名固定：/dev/sr0或者/dev/cdrom(cdrom即sr0，只不过是软连接而已)<br>文件系统：iso9660</p><h3 id="挂载U盘"><a href="#挂载U盘" class="headerlink" title="挂载U盘"></a>挂载U盘</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看U盘设备文件名</span></span><br><span class="line">[root@ localhost ~-]# fdisk -l</span><br><span class="line">[rootalocalhost ~]# mount -t vfat /devlsdbl /mnt/usb/</span><br></pre></td></tr></table></figure><blockquote><p>注意:Linux默认是不支持NTFS文件系统的</p></blockquote><ul><li>U盘硬件文件名不固定：先用fdisk –l 命令查询硬件文件名</li><li>文件系统：fat 、fat16分区识别为fat，fat32分区识别为vfat</li></ul><h2 id="卸载挂载点"><a href="#卸载挂载点" class="headerlink" title="卸载挂载点"></a>卸载挂载点</h2><p>Linux中的卸载挂载点相当于Windows中把硬件（光盘、硬盘、U盘等）拔出。<br>注意：卸载挂载点时，当前目录不要为挂载目录，否则相当于当前正在使用硬件，正在使用肯定就卸载不了啦</p><p><strong>卸载命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">[root@localhost~]# </span><span class="language-bash">umount 设备文件名或挂载点</span></span><br><span class="line">[root@localhost ~]# umount /mnt/cdrom</span><br></pre></td></tr></table></figure><h2 id="如何使Linux支持NTFS文件系统"><a href="#如何使Linux支持NTFS文件系统" class="headerlink" title="如何使Linux支持NTFS文件系统"></a><strong>如何使Linux支持NTFS文件系统</strong></h2><ul><li>1、加载驱动重新编译Linux内核</li><li>2、使用第三方软件（如通过NTFS—3G）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1、下载NTFS-3G插件</span><br><span class="line">http://www.tuxera.com/community/ntfs-3g-download/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、安装NTFS-3G</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">[root@ localhost~-]# tar -zxvf ntfs-3g_ntfsprogs-2013.1.13.tgz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入解压目录</span></span><br><span class="line">[root@ localhost ~-]# cd ntfs-3g_ntfsprogs-2013.1.13</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编i译器准备。没有指定安装目录，安装到默认位置中</span></span><br><span class="line">[root@ localhost ntfs-3g_ntfsprogs-2013.1.13]# ./configure</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译</span></span><br><span class="line">[root@localhost ntfs-3g_ntfsprogs-2013.1.13]# make</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译安装</span></span><br><span class="line">[root@ localhost ntfs-3g_ntfsprogs-2013.1.13]# make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、使用</span><br><span class="line">[root@localhost --]# mount -t ntfs-3g 分区设备文件名挂载点</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Fdisk手工分区"><a href="#Fdisk手工分区" class="headerlink" title="Fdisk手工分区"></a>Fdisk手工分区</h2><h3 id="1、fdisk命令分区过程"><a href="#1、fdisk命令分区过程" class="headerlink" title="1、fdisk命令分区过程"></a>1、fdisk命令分区过程</h3><ul><li>查看分区：fdisk  -l</li><li>手工分区：fdisk 硬件目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 分区命令，输入命令回车进入分区操作</span><br><span class="line">fdish /dev/sdb</span><br></pre></td></tr></table></figure><p><strong>查看帮助</strong>：m</p><p> <img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210117234110736-1399194697.png"></p><p><strong>新建分区</strong>：n<br><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210117234116425-1982115539.png"></p><p>p：主分区<br>e：扩展分区<br>l：逻辑分区</p><blockquote><p>注意：想要建立逻辑分区必须先建立扩展分区，必须保存退出才能生效  </p></blockquote><p><strong>保存退出</strong>：w</p><p>有时候会说分区表被占用必须重启才可以继续，这时可用partprobe重新强制读取一下分区表信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新读取分区表信息</span></span><br><span class="line"><span class="meta prompt_">[root@localhost~]# </span><span class="language-bash">partprobe</span></span><br></pre></td></tr></table></figure><p><strong>格式化分区</strong></p><ul><li>1、格式化:把数据块大小定义生成的大小（分区相当于做柜子时的图纸，格式化</li><li>2、相当于把柜子做出来并分成相应的隔层）</li><li>扩展分区不能被格式化</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式化分|区</span></span><br><span class="line">[root@localhost ~]# mkfs -t ext4 /dev/sdb1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>建立挂载点并挂载分区</strong></p><ul><li>1、完成后硬盘就可以用了</li><li>2、想知道是否已经挂载可用mount和df命令查看</li><li>3、此时的挂载为本次有效而已，每重启需要重新挂载，要解决这问题可以用分区自动挂载。</li></ul><h3 id="2、分区自动挂载与fstab文件修复"><a href="#2、分区自动挂载与fstab文件修复" class="headerlink" title="2、分区自动挂载与fstab文件修复"></a>2、分区自动挂载与fstab文件修复</h3><p> 1、要自动挂载归根结底是要写入/etc/fstab文件，写入时要注意写正确，不然容易导致系统崩溃。</p><p><strong>letc/fstab文件</strong></p><table><thead><tr><th>位置</th><th>说明</th></tr></thead><tbody><tr><td>第一字段</td><td>分区设备文件名或UUID（硬盘通用唯一识别码)</td></tr><tr><td>第二字段</td><td>挂载点</td></tr><tr><td>第三字段</td><td>文件系统名称第四字段:挂载参数</td></tr><tr><td>第五字段</td><td>指定分区是否被dump备份，0代表不备份，1代表每天备份，2代表不定期备份</td></tr><tr><td>第六字段</td><td>指定分区是否被fsck检测，0代表不检测，其他数字代表检测的优先级，那么当然1的优先级比2高</td></tr></tbody></table><p>例子：/etc/fstab文件内容，对应六个字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=d239f2fs-d23e-be97-23e23232add3 / et4 defaults 1 2</span><br></pre></td></tr></table></figure><p>例子：把挂载的分区写入/etc/fstab文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分区自动挂载</span></span><br><span class="line">[root@localhost ~]# vi/etc/fstab</span><br><span class="line">...省略部分输出...</span><br><span class="line">/dev/sdb1 /disk1 ext4 defaults 1 2</span><br></pre></td></tr></table></figure><p>2、写入后最好把/etc/fstab文件中写入的分区通过mount -a都自动挂载一遍，不报错说明修改正确，以防万一修改时输错了，重启的时候，系统找不到文件或者硬件导致系统崩溃。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#依据配置文件/etclfstab的内容，自动挂载</span><br><span class="line">[root@localhost ~]# mount -a</span><br></pre></td></tr></table></figure><p>3、/etc/fstab文件确实不小心写错了，造成系统崩溃时就需要fstab文件修复了。重启时可以看到该文件会报错，此时还可以通过root密码登录，但是无法对该文件进行修改写入，这时可以通过重挂载命令修改根目录的读写权限，然后再去把/etc/fstab文件内容修改正确就可以修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># /etc/fstab文件修复</span><br><span class="line">[root@localhost ~]# mount -o remount,rw /</span><br></pre></td></tr></table></figure><blockquote><p>注意：该方式修复不是万能的，只用在该文件报错的情况下可用，如果把根分区的写错了，重启时连报错都不给你。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础</title>
      <link href="/aiyblog/2020/12/26/docker%E5%9F%BA%E7%A1%80/"/>
      <url>/aiyblog/2020/12/26/docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="docker概念"><a href="#docker概念" class="headerlink" title="docker概念"></a>docker概念</h2><p>docker主机(Host):安装了Docker程序的机器(Docker直接安装在操作系统之上);<br>docker客户端(Client):连接docker主机进行操作﹔<br>docker仓库(Registry):用来保存各种打包好的软件镜像﹔<br>docker镜像(Images):软件打包好的镜像﹔放在docker仓库中;</p><blockquote><p><strong>镜像就像安装包，容器就是安装的应用程序</strong>   </p><p>可以通过镜像安装多个相同的应用程序，但是端口号不能相同</p></blockquote><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ul><li>yum包更新 【sudo yum update】</li><li>安装软件包yum-util提供yum-config-manager功能【sudo yum install -y yum-utils device-mapper-persistent-data lvm2】</li><li>设置yum源  【sudo yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo%E3%80%91">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo】</a></li><li>安装docker 【sudo yum install docker -ce】</li><li>查看版本：【docker -v】</li><li>启动docker  根据linux版本进行相应命令</li></ul><p><strong>操作docker相关命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">检查内核版本，必须是3.10及以上【uname ‐r】 </span><br><span class="line">安装docker(输入y确认安装)【yum install docker 】 </span><br><span class="line">查看版本【docker ‐v】</span><br><span class="line">开机启动docker 【systemctl enable docker】</span><br><span class="line"></span><br><span class="line">启动docker 【systemctl start docker 】</span><br><span class="line">停止docker 【systemctl stop docker】</span><br><span class="line">docker概要信息【docker info】</span><br><span class="line">docker帮助文档【docker --help】</span><br></pre></td></tr></table></figure><h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><p>Docker默认仓库地址是Docker Hub官网地址。</p><p>设置ustc镜像便于docker拉取某些需要的镜像  ustc：老牌linux镜像服务提供者 ustc的docker镜像加速器速度很快</p><ul><li>编辑文件【vi /etc/docker/daemon.json】</li><li>输入内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="镜像与容器"><a href="#镜像与容器" class="headerlink" title="镜像与容器"></a>镜像与容器</h2><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p>镜像是构建docker的基石，可以将镜像当做容器的源代码 体积小，便携，易分享存储和更新<br>由于镜像可能重名（如版本不同），所有通过tag即标签区分<br>镜像可以从所设置的源中拉取</p><ul><li>【docker images】  查看镜像 </li><li>【docker search 镜像名称】  搜索镜像  如：docker search redis</li><li>【docker pull 镜像名称:tag】  拉取镜像  </li><li>【docker rmi 镜像id】  删除镜像   镜像有运行中的容器时不能删除</li><li>【docker rmi ‘docker images -q’】 删除全部镜像 </li></ul><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><strong>通过镜像简单启动容器</strong>：【docker run -d 容器名称:标签】 </p><p><strong>通过镜像启动容器（指定参数）</strong>：【docker run –name 自己给容器随便取个名称(–name和这里的名称可省) -p 主机端口:容器端口  -d  容器名称:标签】  </p><ul><li>标签即相当于版本，latest标签即最新的意思</li><li>参数：<ul><li>–name 容器名称   </li><li>[-p]为docker和本机物理端口映射  </li><li>[-d]为后台运行</li></ul></li></ul><p><strong>容器命令：</strong></p><ul><li><p>查看正在运行的容器 :【docker ps】   </p></li><li><p>查看所有容器: 【docker ps -a】 </p></li><li><p>查看最后一次运行的容器:【docker ps -l】 </p></li><li><p>启动容器:【docker start 容器名称或id】</p></li><li><p>停止容器:【docker stop 容器名称或id】</p></li><li><p>文件拷贝:【docker cp 待拷贝文件路径  容器名称:路径】宿主机到容器 容器关闭时也可以正常拷贝文件进去</p></li><li><p>查看容器ip：</p><ul><li>【docker inspect 容器名称】  显示一推信息</li><li>【<code>docker inspect --format=&#39;&#123;&#123;.NetWorkSettings.IPAddress&#125;&#125;</code>‘ 容器名称 】 直接显示ip地址，其他信息也可以这样显示</li></ul></li><li><p>删除容器：【docker rm 容器名称】 需要停止容器后才能进行移除    </p></li><li><p>进入容器:【<code>docker exec -it 容器名称或id  /bin/bash</code>】  进入容器后操作命令和linux一致就行</p></li><li><p>退出到宿主机位置  容器停止:【docker exit】 </p></li><li><p>查看容器运行日志：【docker logs -f  容器tag】</p></li></ul><h4 id="交互式容器"><a href="#交互式容器" class="headerlink" title="交互式容器"></a>交互式容器</h4><p>使用交互式运行容器，容器运行后直接进入到容器内部，退出容器内部后，容器直接关闭</p><p><strong>创建交互式容器：</strong>【docker run -it –name 容器名称 镜像名称:标签 /bin/bash 】</p><ul><li>交互式创建容器后即进入到容器</li><li>参数：<ul><li>-i：表示运行容器</li><li>-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</li></ul></li><li>每个容器相当于一个小电脑（服务器）</li></ul><blockquote><p>通过镜像启动容器 也可以通过docker exec -it 容器名称或id  /bash  进入容器进行操作</p></blockquote><h4 id="守护式容器"><a href="#守护式容器" class="headerlink" title="守护式容器"></a>守护式容器</h4><p>守护式进程的特点是：</p><ul><li>能够长期运行</li><li>没有交互式会话</li><li>适合运行应用程序和服务</li></ul><p><strong>创建守护式容器：</strong>  【docker run -id –name 容器名称 镜像名称:标签】</p><h4 id="将容器保存为镜像"><a href="#将容器保存为镜像" class="headerlink" title="将容器保存为镜像"></a><strong>将容器保存为镜像</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 基于自己容器创建的镜像创建容器，该新建的容器默认包含自己容器所拥有的资源，因为是基于其创建的</span><br><span class="line">【docker commit 容器名称 镜像名称】</span><br><span class="line">【docker run -di --name=myxxx -p 宿主机端口:容器端口 自己容器所保存的镜像名称】  </span><br><span class="line"></span><br><span class="line"># 镜像导入导出</span><br><span class="line">【docker save -o 文件路径  镜像名称】 镜像导出为镜像文件</span><br><span class="line">【docker load -i 文件路径】 镜像文件恢复为镜像</span><br></pre></td></tr></table></figure><h2 id="docker数据卷"><a href="#docker数据卷" class="headerlink" title="docker数据卷"></a>docker数据卷</h2><p><strong>目录挂载</strong>：宿主机目录和容器目录形成映射关系。 目录挂载后，操作宿主机的目录即操作容器的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建容器时加【-v 宿主机目录:容器目录】 如：</span><br><span class="line">【docker run -id --name=mycentos3 centos:7 -v /usr/local/myhtml:/usr/local/myhtml】</span><br><span class="line">【docker run -id -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7】也可以</span><br></pre></td></tr></table></figure><p>目录挂载即docker数据卷。需求：为了部署demo工程，需要使用到cp的命令将宿主机内的demo文件复制到容器内部</p><p><strong>数据卷</strong>：将宿主机的一个目录，映射到容器的一个目录中，可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变。</p><ul><li>创建数据卷：【docker volume create 数据卷名称】    创建数据卷之后，默认会存放在一个目录下/var/1ib/docker/volumes/数据卷名称/_data</li><li>查看数据卷的详细信息【docker volume inspect 数据卷名称】</li><li>查看全部数据卷：【docker volume  ls】</li><li>删除数据卷 【docker volume rm 数据卷名称】</li><li>应用数据卷 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1----通过创建好的数据卷进行映射。当映射数据卷时，如果数据卷不存在，Docker会自动创建，会将容器内部自带的文件存储在默认的存放路径中。</span></span><br><span class="line">docker run -v 数据卷名称︰容器内部的路径 镜像id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2----直接通过路径进行映射。直接指定一个路径作为数据卷的存放位置，这个路径下是空的。</span></span><br><span class="line">docker run -v 路径︰容器内部的路径 镜像id</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile就是一系列命令和参数构成的脚本  这些命令应用于基础镜像并最终创建一个新的镜像。   文件名称：【Dockerfile】</p><p><strong>存在意义</strong>：更方便构建镜像文件</p><ul><li><strong>开发</strong>：提供一个完全一致开发环境</li><li><strong>测试</strong>：直接拿开发时构建的镜像或通过dockerfile文件构建一个镜像开始工作</li><li><strong>运维</strong>：部署时可以实现应用无缝移植</li></ul><p><strong>相关指令：</strong></p><ul><li>【from image_name:tag】定义使用哪个基础镜像启动构建流程</li><li>【maintainer user_name】声明镜像创建者</li><li>【env key value】设置环境变量（可写多条）</li><li>【run command】dockerfile的核心部分（可写多条）</li><li>【add source_dir/file  dest_dir/file】宿主机文件复制到容器内 如果是压缩文件，复制后会自动解压</li><li>【copy source_dir/file dest_div/file】和add类似，但有压缩文件不会被解压</li><li>【workdir path_div】 设置工作目录</li></ul><p><strong>例子：构建jdk1.8镜像 基于centos:7</strong></p><ul><li>创建目录 上传jdk的tar包 进入目录</li><li>构建dokerfile文件 名称必须叫dockerfile  进入文件</li><li>编写文件 保存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER xiaoai</span><br><span class="line">WORKDIR /usr</span><br><span class="line">RUN mkdir /usr/local/java</span><br><span class="line">ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/</span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_171</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre7</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/bin/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>【docker build -t=’jdk1.8’ Dockerfile所在目录】 所在当前目录则用 <code>.</code>表示  通过Dockerfile构建镜像</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本镜像，第一条指令必须是FROM。一个声明以#字符开头则被视为注释。</p><p>可以在Dpcker文件中使用RUN，CMD，FROM，EXPOSE，ENv等指令。</p><p><strong>构建镜像：</strong>【docker bui1d -t 镜像名称[:tag]】</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ul><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><strong>from</strong>：指定基础镜像，必须为第一个命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：</span></span><br><span class="line">    <span class="keyword">FROM</span> &lt;image&gt;</span><br><span class="line">    <span class="keyword">FROM</span> &lt;image&gt; :&lt;tag&gt;</span><br><span class="line">    <span class="keyword">FROM</span> &lt;image&gt;@&lt;digest&gt;</span><br><span class="line"><span class="comment">#示例: </span></span><br><span class="line">    <span class="keyword">FROM</span> mysq1 :<span class="number">5.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注: tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span></span><br></pre></td></tr></table></figure><p><strong>maintainer</strong>：维护者信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">MAINTAINER</span> Jasper Xu</span><br><span class="line">    <span class="keyword">MAINTAINER</span> sorex@<span class="number">163</span>.com</span><br><span class="line">    <span class="keyword">MAINTAINER</span> Jasper Xu&lt;sorex@<span class="number">163</span>.com&gt;</span><br></pre></td></tr></table></figure><p><strong>run</strong>：构建镜像时执行的命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash">用于在镜像容器中执行命令，其有以下两种命令执行方式:she11执行</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> &lt;<span class="built_in">command</span>&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exec执行格式:</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> [ <span class="string">&quot;executab1e&quot;</span>，<span class="string">&quot;param1&quot;</span>， <span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> [ <span class="string">&quot;&quot;</span>executable<span class="string">&quot;，&quot;</span>param1<span class="string">&quot;，&quot;</span>param2<span class="string">&quot;&quot;</span>]</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> apk update</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;/etc/execfi1e&quot;</span>，<span class="string">&quot;arg1&quot;</span>，<span class="string">&quot;arg1&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如: docker build --no-cache</span></span><br></pre></td></tr></table></figure><p><strong>add</strong>：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> &lt;src&gt;. . . &lt;dest&gt;</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span> ,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]用于支持包含空格的路径</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> hom*/mydir/</span></span><br><span class="line"><span class="comment"># 添加所有以&quot;hom&quot;开头的文件</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> hom?.txt /mydir/</span></span><br><span class="line"><span class="comment"># ?替代一个单字符,例如:&quot;home.txt&quot;</span></span><br><span class="line">    <span class="keyword">ADD</span><span class="language-bash"> <span class="built_in">test</span> relativeDir/<span class="comment">#添加“test”到^wORKDIR `/relativeDir/ADD test /absoluteDir/#添加“test”到/absoluteDir/</span></span></span><br></pre></td></tr></table></figure><p><strong>copy</strong>：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源<br><strong>cmd</strong>：构建容器后调用，也就是在容器启动时才进行调用。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span> , <span class="string">&quot;param1&quot;</span> , <span class="string">&quot;param2&quot;</span>](执行可执行文件，优先)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;param1 &quot;</span> , <span class="string">&quot;param2&quot;</span>]（设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">command</span> param1 param2(执行she11内部命令)</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;This is a test.&quot;</span> l <span class="built_in">wc</span> -</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/bin/wc&quot;</span> , <span class="string">&quot;--he1p&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span></span><br></pre></td></tr></table></figure><p><strong>entrypoint</strong> ：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式;</span></span><br><span class="line">    <span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>，<span class="string">&quot;param1&quot;</span>，<span class="string">&quot;param2&quot;</span><span class="string">&quot;](可执行文件，优先)ENTRYPOINT command param1 param2 (she11内部命令)</span></span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">FROM</span> ubuntu</span><br><span class="line">    <span class="keyword">ENTRYPOINT</span><span class="language-bash"><span class="string"> [&quot;</span>top<span class="string">&quot;，&quot;</span>-b<span class="string">&quot;]CMD [&quot;</span>-c<span class="string">&quot;]</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注: ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而dockerrun命令中指定的任何参数，都会被当做参数再次传递。</span></span><br><span class="line"><span class="comment"># ENTRYPOINT。Dockerfile中只允许有一个。</span></span><br><span class="line"><span class="comment"># ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</span></span><br></pre></td></tr></table></figure><p><strong>label</strong>：用于为镜像添加元数据</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">LABEL</span><span class="language-bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...示例:</span></span><br><span class="line">    <span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span> description=<span class="string">&quot;这是一个web服务器&quot;</span> by=<span class="string">&quot;ghz&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</span></span><br></pre></td></tr></table></figure><p><strong>env</strong>：设置环境变量</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="comment"># &lt;key&gt;之后的所有内容均会被视为其&lt;va1ue&gt;的组成部分，因此，一次只能设置一个变量</span></span><br><span class="line">    <span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line">    <span class="comment"># 可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示;另外，反斜线也可以用于续行</span></span><br><span class="line">    <span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">ENV</span> myName John DoeENV myDog Rex The Dog</span><br><span class="line">    <span class="keyword">ENV</span> mycat=f1uffy</span><br></pre></td></tr></table></figure><p><strong>expose</strong>：指定于外界交互的端口</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;...]</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span></span><br><span class="line">    <span class="keyword">EXPOSE</span> <span class="number">8080</span> <span class="keyword">EXPOSE</span> <span class="number">11211</span>/tcp <span class="number">11211</span>/udp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</span></span><br></pre></td></tr></table></figure><p><strong>volume</strong>：用于指定持久化目录</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/path/to/dir&quot;</span>]</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br><span class="line">    <span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/var/www&quot;</span>,<span class="string">&quot;/var/log/apache2&quot;</span>,<span class="string">&quot;/etc/apache2&quot;</span>]</span></span><br><span class="line"><span class="comment"># 注:一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能:</span></span><br><span class="line"><span class="comment"># 1卷可以容器间共享和重用</span></span><br><span class="line"><span class="comment"># 2容器并不一定要和其它容器共享卷3修改卷后会立即生效</span></span><br><span class="line"><span class="comment"># 4对卷的修改不会对镜像产生影响</span></span><br><span class="line"><span class="comment"># 5卷会一直存在，直到没有任何容器在使用它</span></span><br></pre></td></tr></table></figure><p><strong>workdir</strong>：工作目录，类似于cd命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span></span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> /a(这时工作目录为/a)</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> b (这时工作目录为/a/b)</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> c(这时工作目录为/a/b/c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w 参数覆盖构建时所设置的工作目录。</span></span><br></pre></td></tr></table></figure><p><strong>user</strong>：指定运行容器时的用户名或UID，后续的 RUN也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">USER</span> <span class="keyword">user</span></span><br><span class="line">    <span class="keyword">USER</span> <span class="keyword">user</span>: groupUSER uid</span><br><span class="line">    <span class="keyword">USER</span> uid:gidUSER <span class="keyword">user</span>:gidUSER uid: group</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">USER</span> www</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。</span></span><br></pre></td></tr></table></figure><p><strong>age</strong>：用于指定传递给构建运行时的变量</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式:</span></span><br><span class="line">    <span class="keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">ARG</span> site</span><br><span class="line">    <span class="keyword">ARG</span> bui1d_user=www</span><br></pre></td></tr></table></figure><p><strong>onbuilde</strong>：用于设置镜像触发器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式: </span></span><br><span class="line">    <span class="keyword">ONBUILD</span> [INSTRUCTION]</span><br><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">    <span class="keyword">ONBUILD</span> <span class="keyword">ADD</span><span class="language-bash"> . /app/src</span></span><br><span class="line">    <span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> /usr/loca1/bin/python-bui1d --<span class="built_in">dir</span> /app/src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注:当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</span></span><br></pre></td></tr></table></figure><h3 id="实例1-构建nginx镜像"><a href="#实例1-构建nginx镜像" class="headerlink" title="实例1 构建nginx镜像"></a>实例1 构建nginx镜像</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This my first nginx Dockerfile</span></span><br><span class="line"><span class="comment"># version 1.0</span></span><br><span class="line"><span class="comment"># Base images基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="comment"># MAINTAINER维护者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> ghz</span><br><span class="line"><span class="comment"># ENV设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> PATH/usr/loca1/nginx/sbin : $PATH</span><br><span class="line"><span class="comment"># ADD文件放在当前目录下，拷过去会自动解压</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> nginx-1.8.0.tar.gz /usr/loca1/ <span class="comment"># ngix</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> epe1-release-latest-7.noarch.rpm /usr/1oca1/ <span class="comment">#企业linux扩展包</span></span></span><br><span class="line"><span class="comment"># RUN执行以下命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> rpm -ivh /usr /loca1/epe1-release-1atest-7.noarch.rpm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum instal1 -y wget lftp gcc gcc-c++ make openss1-deve1 pcre-deve1 pcre &amp;&amp; yum cleana11</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -s /sbin/no1ogin -M www</span></span><br><span class="line"><span class="comment"># WORKDIR相当于cd</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/loca1/nginx-1.8.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./configure --prefix=/us r/1oca1/nginx --user=www --group=www --with-http_ss1_module --with-pcre &amp;&amp; make &amp;&amp; make insta11</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;daemon off; &quot;</span> &gt;&gt;/etc/nginx.conf</span></span><br><span class="line"><span class="comment">#EXPOSE映射端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8</span>o</span><br><span class="line"><span class="comment">#CMD运行以下命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="实例2-tomcat镜像"><a href="#实例2-tomcat镜像" class="headerlink" title="实例2 tomcat镜像"></a>实例2 tomcat镜像</h3><ul><li>打成war包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把项目打成war包</span></span><br><span class="line">jar -cvfM0 demo.war demo/*</span><br></pre></td></tr></table></figure><ul><li>通过Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> daocloud.io/library/tomcat:<span class="number">8.0</span>.<span class="number">45</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> demo.war /usr/1oca1/tomcat/webapps</span></span><br></pre></td></tr></table></figure><ul><li>在Dockerfile目录下执行构建镜像命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过Dockerfile构建镜像</span></span><br><span class="line">docker build -t tomcat_my:1.2 .</span><br></pre></td></tr></table></figure><ul><li>查看镜像并通过构建的镜像创建容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动镜像</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat imageId</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">浏览器访问：http://ip地址:8080/demo/</span></span><br></pre></td></tr></table></figure><h2 id="docker私有仓库"><a href="#docker私有仓库" class="headerlink" title="docker私有仓库"></a>docker私有仓库</h2><p>私有仓库存放镜像，中央仓库存放通用镜像，私有仓库可以存放自己所构建的镜像，便于同一局域网的使用 </p><ul><li>拉取私有仓库镜像 【docker pull registry】</li><li>创建容器即创建私有仓库 【docker run -di –name=registry -p 5000:5000 registry】</li><li>网页访问仓库【宿主机ip:容器创建时映射的端口/v2/_catalog】 访问到json数据即私有仓库创建成功</li><li>修改配置文件使docker信任私有仓库才能上传镜像到私有仓库【vi /etc/docker/daemon.json】添加配置：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;insecure_registries&quot;:[&quot;私服ip地址:端口&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启docker服务</li></ul><h2 id="镜像上传到私有仓库"><a href="#镜像上传到私有仓库" class="headerlink" title="镜像上传到私有仓库"></a>镜像上传到私有仓库</h2><p>【docker tag 镜像名称 私服ip和端口/镜像名称】如【docker tag jdk1.8 192.168.x.x:5000/jdk1.8】打标签 相当于复制一个镜像为上传做准备<br>【docker push 私服ip和端口/镜像名称】 如【docker push 192.168.x.x:5000/jdk1.8】 上传镜像到私服<br>访问私服可以查看到上传的镜像<br>获取镜像 【docker pull 私服ip和端口/镜像名称】</p><h2 id="例：docker搭建应用环境："><a href="#例：docker搭建应用环境：" class="headerlink" title="例：docker搭建应用环境："></a>例：docker搭建应用环境：</h2><h3 id="mysql部署"><a href="#mysql部署" class="headerlink" title="mysql部署"></a>mysql部署</h3><p>拉取镜像：【docker pull centos/mysql-centos7】  后面即mysql路径</p><p>创建容器：【docker run -di –name tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD 密码 镜像名称】</p><p>参数：</p><ul><li><p>-p 端口映射  操作宿主机33306端口即相当于操作容器的3306端口  </p></li><li><p>-e MYSQL_ROOT_PASSWORD =  指定mysql密码</p></li><li><p>–mysql图形化界面软件即可进行mysql连接（通过宿主机来连接容器中的mysql）  需要：宿主机ip 密码 用户名 端口==映射的宿主机的端口如33306</p></li></ul><h3 id="tomcat部署"><a href="#tomcat部署" class="headerlink" title="tomcat部署"></a>tomcat部署</h3><p>拉取镜像 pull </p><p>创建容器 【docker run -di –name mytomcat -p 9000:8080 -v /usr/local/webapps:/usr/local/webapps  tomcat:7-jre7】</p><p>使用目录挂载后由于做了目录映射，直接在网页访问tomcat是无法直接访问的，可以把war包上传到目录下进行访问</p><h3 id="nginx部署"><a href="#nginx部署" class="headerlink" title="nginx部署"></a>nginx部署</h3><p>拉取镜像 pull<br>创建容器 【docker run -di –name mynginx -p 80:80 nginx】</p><h3 id="redis部署"><a href="#redis部署" class="headerlink" title="redis部署"></a>redis部署</h3><p>拉取镜像 pull<br>创建容器 【docker run -di –name myredis -p 6379:6379 redis】<br>测试：客户端进入cmd  -》redis-cli -h 远程ip  -》连接成功，存储查询正常即完成。</p><h2 id="例：docker简单使用例子"><a href="#例：docker简单使用例子" class="headerlink" title="例：docker简单使用例子"></a>例：docker简单使用例子</h2><p>通过docker构建tomcat部署web项目。</p><h3 id="复制项目到容器目录运行"><a href="#复制项目到容器目录运行" class="headerlink" title="复制项目到容器目录运行"></a>复制项目到容器目录运行</h3><p><strong>1- 准备一个简单web项目并上传到linux</strong></p><ul><li>目录结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">│  index.html</span><br><span class="line">└─WEB-INF</span><br><span class="line">        web.xml</span><br></pre></td></tr></table></figure><ul><li>文件内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xm1 version=&quot;&quot;1.0&quot; encoding=&quot;UTF-8&quot;&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xm1ns</span>=<span class="string">&quot;http://xm1ns.jcp.org/xm1/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xm1ns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xm1ns.jcp.org/xm1/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://xm1ns.jcp.org/xm1/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dockerTest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello docker!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上传linux  如： 通过FileZilla工具上传</li></ul><p><strong>2-通过Docker安装tomcat</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取Tomcat镜像</span></span><br><span class="line">docker pu17 daocloud.io/library/tomcat:8.0.45</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Tomcat镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建Tomcat容器</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat 镜像tag(获取IMAGE ID， imageId不用输完整也行)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看tomcat启动 浏览器访问http://ip地址:8080</span></span><br></pre></td></tr></table></figure><p><strong>3-把上传的项目复制到tomcat的webapp目录下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入tomcat容器查看目录</span></span><br><span class="line">docker exec -it imageId bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入webapps 查看路径  输出路径： /usr/local/tomcat/webapps</span></span><br><span class="line">cd webapps</span><br><span class="line">pwd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以退出容器 获取重新打开一个终端    进入项目所在目录复制项目到webapp目录</span></span><br><span class="line">exit</span><br><span class="line">docker cp ./demo/ imageId:/usr/local/tomcat/webapps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以再次进入tomcat容器查看是否复制成功</span></span><br><span class="line">docker exec -it imageId bash</span><br><span class="line">cd webapps</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><strong>4- 浏览器访问项目  可通过【docker logs -f tomcat】查看运行日志</strong></p><p><img src="../img/image-20220213215744533.png" alt="image-20220213215744533"></p><h3 id="复制项目到数据卷映射目录操作运行"><a href="#复制项目到数据卷映射目录操作运行" class="headerlink" title="复制项目到数据卷映射目录操作运行"></a>复制项目到数据卷映射目录操作运行</h3><p><strong>1、2、4一致</strong>：如果基于上面直接复制项目到容器目录了可以删除项目后停止容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到容器内tomcat的webapp目录中</span></span><br><span class="line">rm -r demo/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker stop [imageId(可通过[docker ps查看])</span><br><span class="line">docker rm 容器名称/imageId</span><br></pre></td></tr></table></figure><p><strong>3-创建数据卷映射目录并复制项目到映射的目录下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1-----创建数据卷</span></span><br><span class="line">docker volume create v01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器时进行数据卷映射</span></span><br><span class="line">docker run -d -p 8080:8080 -v v01:/usr/local/tomcat/webapps/ --name tomcat imageId</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过【docker volume  <span class="built_in">ls</span>】查看数据卷列表。查看数据卷详细信息获取docker自动创建数据卷时映射的路径,即挂载路径：[MountPoint]</span></span><br><span class="line">docker volume inspect v01</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制项目到映射的路径中</span></span><br><span class="line">cp demo -r /var/lib/docker/volumes/v01/_data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2----直接映射目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建映射的目录</span></span><br><span class="line">mkdir tomcat_webapps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止tomcat并删除容器</span></span><br><span class="line">docker stop 容器名称/imageId</span><br><span class="line">docker rm 容器名称/imageId</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器直接映射目录</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如：docker run -d -p 8080:8080 -v /root/other/dockerTest/tomcat_webapps:/usr/local/tomcat/webapps/ --name tomcat feba</span></span><br><span class="line">docker run -d -p 8080:8080 -v 需要映射的路径:/usr/local/tomcat/webapps/ --name tomcat imageId</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">项目复制到映射的目录中</span></span><br><span class="line">cp demo -r /root/other/dockerTest/tomcat_webapps</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis入门</title>
      <link href="/aiyblog/2020/12/26/mybatis/mybatis%E5%85%A5%E9%97%A8/"/>
      <url>/aiyblog/2020/12/26/mybatis/mybatis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="mybatis笔记"><a href="#mybatis笔记" class="headerlink" title="mybatis笔记"></a>mybatis笔记</h2><p><strong>框架</strong></p><pre><code>软件开发中的一套解决方案，不同的框架解决不同的问题好处：框架封装很多细节，使开发者可以使用极简的方式实现功能，大大提高开发效率</code></pre><p><strong>三层框架</strong></p><pre><code>【表现层】    用于展示数据【业务层】    处理业务需求【持久层】    数据库交互</code></pre><p><strong>持久层技术解决方案</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【JDBC技术】    ConnectionPreparedStatementResultSet</span><br><span class="line">【Spring的JdbcTemplate】spring对jdbc的简单封装</span><br><span class="line">【Apache的DBUtils】和JdbcTemplate很像，是对Jdbc的简单封装</span><br><span class="line">以上都不是框架JDBC是规范JdbcTemplate和DBUtils都只是工具类</span><br></pre></td></tr></table></figure><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><ul><li><p>mybatis是持久层框架，java写的    </p></li><li><p>封装jdbc操作很多细节    </p></li><li><p>开发者只需关注sql语句本身无需关注注册驱动，创建连接等繁杂过程</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【ORM】Object Relational Mappging对象关系映射</span><br><span class="line">    把数据库表和实体类及实体类属性对应，操作实体 类就实现操作数据库表</span><br><span class="line">    需做到：实体类中属性和数据库表字段名称操持一致</span><br></pre></td></tr></table></figure><h3 id="二、入门"><a href="#二、入门" class="headerlink" title="二、入门"></a>二、入门</h3><p><strong>环境搭建</strong></p><ul><li>创建maven工程并导包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mybatis-<span class="number">3.4</span><span class="number">.5</span>.jar</span><br><span class="line">mysql-connector-java-<span class="number">5.1</span><span class="number">.6</span>.jar</span><br><span class="line">log4j-<span class="number">1.2</span><span class="number">.12</span>.jar</span><br></pre></td></tr></table></figure><ul><li>创建对应实体类以及dao接口</li><li>创建并配置mybatis主配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">      <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">      <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/jfs_mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/xiaoai/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建对应接口映射配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">          <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">          <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xiaoai.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置查询所有sql</span></span><br><span class="line"><span class="comment">        id值：findAll为接口方法名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 编写sql语句  --&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 注意事项：</p><ul><li>1–在MyBatista中把持久层的操作接口名称和映射文件叫做：Mapper<ul><li>  所以：IUserDao 和 IUserMapper其实是相同的东西</li></ul></li><li>2–包：com.xiaoai.dao为三级结构<ul><li>目录：com.xiaoai.dao为一级目录</li></ul></li><li>3–mybatis的映射配置文件位置必须和dao接口的包结构相同</li><li>4–映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</li><li>5–映射配置文件的操作（select、update等），id取值必须是接口的方法名<ul><li> resultType为获取数据封装对象类全限定名</li></ul></li></ul><blockquote><p>遵从三、四、五点后，在开发中无须再写dao的实现类</p></blockquote><p><strong>入门案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1--读取配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"><span class="comment">//2--创建SqlSessionFactory工厂</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line"><span class="comment">//3--使用工厂生产SqlSession对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"><span class="comment">//4--使用SqlSession创建Dao接口代理对象</span></span><br><span class="line"><span class="type">IUserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> session.getMapper(IUserDao.class);</span><br><span class="line"><span class="comment">//5--使用代理对象执行方法</span></span><br><span class="line">List&lt;User&gt; list = userDao.findAll();</span><br><span class="line"><span class="keyword">for</span>(User user : list) &#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6--释放资源</span></span><br><span class="line">session.close();</span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>不要忘记在映射配置中告知mybatis对应操作结果要封装到哪个实体类中</li><li>配置方式：resultType=”com.xiaoai.domain.User”</li></ul><p><strong>说明：</strong></p><ul><li>1–读取配置文件，绝对路径(d:/xxx/xxx/xx.xml)和相对路径(src/java/xxx/xx.xml等)不用<ul><li> 一般用[类加载器]、[ServletContext对象的getRealPath()]，因为当编译后路径可能会改变</li></ul></li><li>2–创建工厂使用了[构建者模式]             优势：把对象的创建细节隐藏，使用者直接调用方法即可拿到对象</li><li>3–生产SqlSession使用了工厂模式        优势：解耦（降低类之间的依赖关系）</li><li>4–创建Dao接口实现类使用代理模式    优势：不修改源码基础上对已有方法增强</li><li>5–实际开发越简便越好，所以不采用dao实现类方式，但mbatis支持写dao实现类</li></ul><p>【<strong>注解配置</strong>】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">接口方法上加对应注解如：</span><br><span class="line">   <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">使用注解配置，不用定义对应接口映射配置文件。</span><br><span class="line">   在mybatis主配置文件中&lt;mapper resource=<span class="string">&quot;com/xiaoai/dao/IUserDao.xml&quot;</span>/&gt;</span><br><span class="line">   改为&lt;mapper class=<span class="string">&quot;com.xiaoai.dao.IUserDao&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>【<strong>动态代理</strong>】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Proxy.newProxyInstance(类加载器,代理对象要实现的接口字节码数组,如何代理);</span><br><span class="line">    类加载器：使用和被代理对象相同的类加载器</span><br><span class="line">    代理对象需实现的接口：和被代理对象实现相同的接口</span><br><span class="line">    如何代理：是一个InvocationHandler接口，需写一个该接口实现类来实现代理对象接口的方法</span><br></pre></td></tr></table></figure><h3 id="三、自定义Mybatis"><a href="#三、自定义Mybatis" class="headerlink" title="三、自定义Mybatis"></a>三、自定义Mybatis</h3><pre><code>---创建读取数据流的Resource类读取配置文件---SqlSessionFactoryBuilder即工厂创建，通过XMLConfigBuilder获取Configuration类获取对应配置信息类并创建SqlSessionFactory即工厂---创建对应类（XMLConfigBuilder）传递配置文件字节流，    解析配置文件并将获取的配置信息设置到对应配置类（Configuration、Mapper等，其包含数据库、接口等配置化信息）中---SqlSessionFactory即工厂， 创建SqlSession即创建代理对象的类---SqlSession即创建代理对象，创建代理对象&lt;T&gt;---通过代理对象执行相应接口方法 *数据流（配置源文件）--》构建者（配置类）--》工厂（执行类）--》代理类（代理对象）--》执行者（执行方法）</code></pre><h3 id="四、获取占位符参数-区别"><a href="#四、获取占位符参数-区别" class="headerlink" title="四、获取占位符参数#{} ${}区别"></a>四、获取占位符参数#{} ${}区别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#&#123;&#125;：<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">select * from user where username like #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>select * from user where username like #&#123;uid&#125;</span><br><span class="line">userDao.findByName(&quot;%王%&quot;)</span><br><span class="line">生成：preparing：select * from user where username like ?用的是PrepatedStatment的参数占位符sql</span><br><span class="line"></span><br><span class="line">$&#123;&#125;：<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">select * from user where username like %$&#123;value&#125;%</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">userDao.findByName(&quot;王&quot;)</span><br><span class="line">生成：preparing：select * from user where username like %王%用的是Statment对象的字符串拼接sql</span><br></pre></td></tr></table></figure><h3 id="五、配置文件"><a href="#五、配置文件" class="headerlink" title="五、配置文件"></a>五、配置文件</h3><h4 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h4><p>【<strong>properties标签</strong>】    定义属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置properties</span></span><br><span class="line"><span class="comment">        可以在标签内部配置连接数据库的信息，也可以通过属性引用外部配置文件信息</span></span><br><span class="line"><span class="comment">        ---resource属性：</span></span><br><span class="line"><span class="comment">            用于指定配置文件的位置，是按照类路径的写法来写，并且必须存在于类路径下</span></span><br><span class="line"><span class="comment">            如果是外部文件可用resource引入：</span></span><br><span class="line"><span class="comment">                &lt;properties resource=&quot;jdbcConfig.properties&quot;&gt;&lt;/properties&gt;</span></span><br><span class="line"><span class="comment">        ---url属性：</span></span><br><span class="line"><span class="comment">            是要求按照Url的写法来写地址</span></span><br><span class="line"><span class="comment">            URL:Uniform Resource Locator 统一资源定位符。它是可以唯一标识一个资源的位置</span></span><br><span class="line"><span class="comment">                写法：http://localhost:8080/mybatisserver/demo1Servlet</span></span><br><span class="line"><span class="comment">                      协议主机端口URI</span></span><br><span class="line"><span class="comment">            URI:Uniform Resource Identifier统一资源标识符它是在应用中可以唯一定位一个资源的</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/jfs_mybatis&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用配置的properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【<strong>typeAliases标签</strong>】    取别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用typeAliases配置别名，它只能配置domain中类的别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--typeAlias用于配置别名，  type属性指定实体类全限定类名。   alias属性指定别名，当指定别名后则不再区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--用于指定要配置别名的包，当指定之后，该包下的实体类都会注册的别名，并且类名就是别名 ，不区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xiaoai.domain&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意：mappers下的package和上面的有区别：一个指定实体类包，一个指定dao包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于指定Dao接口所在的包，当指定了之后就不需要再写mapper标签resource或者class属性了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xiaoai.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="接口映射文件"><a href="#接口映射文件" class="headerlink" title="接口映射文件"></a>接口映射文件</h4><p>【<strong>selectKey标签</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置插入操作后，获取插入数据的id 配置在insert标签内</span></span><br><span class="line"><span class="comment">        keyProperty==对应实体类属性名</span></span><br><span class="line"><span class="comment">        keyColumn==对应数据库表字段</span></span><br><span class="line"><span class="comment">        resultType==返回结果类型</span></span><br><span class="line"><span class="comment">        order==在插入语句执行之前还是之后执行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">    select  last_insert_id();</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【<strong>ResultMap标签</strong>】</p><p>当实体类对象属性和数据库列表字段不对应时可设置字段的对应关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置 查询结果的列名和实体类的属性名的对应关系</span></span><br><span class="line"><span class="comment">        type==实体类所在全限定名</span></span><br><span class="line"><span class="comment">        property==实体类属性</span></span><br><span class="line"><span class="comment">        column==对应的数据库表字段</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主键字段的对应 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userAddress&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userSex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userBirthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义resultMap后还需要在所需配置中引用如：查询所有用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六、OGNL表达式"><a href="#六、OGNL表达式" class="headerlink" title="六、OGNL表达式"></a>六、OGNL表达式</h3><p>Object Graphic Navigation Language 对象图导航语言</p><p>它是通过对象的取值方法来获取数据。在写法上把get给省略及后部分首字母变小写</p><ul><li><p>如：获取用户名称    类中==user.getUsername();    ognl==user.username</p></li><li><p>在mybatis中为什么能直接写username而不是user.username呢?因为parameterType参数已经指定了实体类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span>&gt;</span></span><br><span class="line">update user set username=#&#123;username&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当封装对象的属性是另一对象，而查询的参数在属性对象有，封装对象没有时并且parameterType传递的是封装对象</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">则可用&quot;.&quot;调用链式调用。</span><br><span class="line">public class QueryVo &#123;</span><br><span class="line">    private User user;</span><br><span class="line">    public User getUser() &#123;return user;&#125;</span><br><span class="line">    public void setUser(User user) &#123;this.user = user;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 根据queryVo的条件查询用户  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByVo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.xiaoai.domain.QueryVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;user.username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="七、parameterType传入参数类型"><a href="#七、parameterType传入参数类型" class="headerlink" title="七、parameterType传入参数类型"></a>七、parameterType传入参数类型</h3><p><strong>传递简单类型</strong>  </p><p>只包含一个出则可随意定义变量名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询一个用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">select * from user where id=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>传递pojo对象</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span>&gt;</span></span><br><span class="line">    update user set username=#&#123;username&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>传递pojo对象的封装对象</strong>    </p><p>使用”.”链式调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据queryVo的条件查询用户  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByVo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.xiaoai.domain.QueryVo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xiaoai.domain.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;user.username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="八、resultType输出结果类型"><a href="#八、resultType输出结果类型" class="headerlink" title="八、resultType输出结果类型"></a>八、resultType输出结果类型</h3><p><strong>普通基本类型</strong><br><strong>pojo对象</strong><br><strong>pojo对象列表</strong></p><p>当parameterType传入pojo对象的属性与数据库表字段不一致时的解决方法</p><ul><li>直接通过sql语句修改查询字段别名 如：select id as userId,name as userName from user  等<ul><li>方便快速，但由于直接在sql语句修改，当多个sql需要时每个sql都要这样定义，后续改造时麻烦</li></ul></li><li>通过resultMap标签指定pojo属性与表字段对应关系<ul><li>由于需要多定义一个配置并解析，执行效率慢一些，只需在需要处直接用resultMap=”对应配置id”绑定</li><li>修改时只修改resultMap配置内容即可，即后续修改方便</li></ul></li></ul><h3 id="九、连接池"><a href="#九、连接池" class="headerlink" title="九、连接池"></a>九、连接池</h3><p>实际开发中都会使用连接池,可以减少获取</p><h4 id="mybatis连接池提供3种方式配置"><a href="#mybatis连接池提供3种方式配置" class="headerlink" title="mybatis连接池提供3种方式配置"></a>mybatis连接池提供3种方式配置</h4><p>配置位置：主配置文件<dataSource type="POOLED">标签，type属性表示采用何种连接池方式</p><table><thead><tr><th align="left">type属性取值</th><th></th></tr></thead><tbody><tr><td align="left">POOLED</td><td>采用传统javax.sql.DataSource规范中的连接池，mybatis中有针对性规范的实现从池中获取一个连接使用</td></tr><tr><td align="left">UNPOOLED</td><td>采用传统获取连接的方式，虽然也实现javax.sql.DataSource接口，但并没有使用池的思想<br/>创建一个连接使用</td></tr><tr><td align="left">JNDI</td><td>采用服务器提供的JNDI技术实现，来获取DataSource对象，不同服务器所能拿到的DataSource不一样<br/>注意：如果不是web或者Maven的工程，是不能使用的，课程中使用tomcat服务器，采用连接池就是dbcp连接池</td></tr></tbody></table><h3 id="十、mybatis中的事务"><a href="#十、mybatis中的事务" class="headerlink" title="十、mybatis中的事务"></a>十、mybatis中的事务</h3><ul><li>通过SqlSession对象的commit()和rollback()方法实现事务提交和回滚</li><li>开启自动提交：sqlSession = factory.openSession(true);//传入参数true为自动提交事务</li></ul><h3 id="十一、动态SQL标签"><a href="#十一、动态SQL标签" class="headerlink" title="十一、动态SQL标签"></a>十一、动态SQL标签</h3><p>【<if>、<where>标签】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户信息查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username != &#x27;&#x27; &quot;</span>&gt;</span><span class="comment">&lt;!-- test=&quot;表达式&quot; --&gt;</span></span><br><span class="line">            and username like #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null&quot;</span>&gt;</span></span><br><span class="line">            and address like #&#123;address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【<foreach>标签】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有用户在 id 的集合之中 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findInIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;queryvo&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- select * from user where id in (1,2,3,4,5); --&gt;</span></span><br><span class="line">       select * from user</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null and ids.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                       collection==待遍历的集合</span></span><br><span class="line"><span class="comment">                       open==添加语句的开头</span></span><br><span class="line"><span class="comment">                       close=添加语句的结尾</span></span><br><span class="line"><span class="comment">                       item=集合中每个元素的临时变量</span></span><br><span class="line"><span class="comment">                       separator=遍历分隔符</span></span><br><span class="line"><span class="comment">                   --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and id in ( &quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;uid&quot;</span>  <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                   #&#123;uid&#125;</span><br><span class="line">               <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【<sql>标签】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一、抽取重复sql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;defaultUser&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 二、引用抽取的sql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findInIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;queryvo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null and ids.size() &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and id in ( &quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;uid&quot;</span>  <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                #&#123;uid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十二、mybatis中多表查询"><a href="#十二、mybatis中多表查询" class="headerlink" title="十二、mybatis中多表查询"></a>十二、mybatis中多表查询</h3><p>表间关系：    </p><ul><li>一对一    </li><li>一对多    </li><li>多对一    </li><li>多对多 </li></ul><p><strong>一对一查询</strong></p><p>案例：账户和用户的关系</p><ul><li>通过封装一个新类继承父类并加入所需要的属性来当resultType的返回的值完成多表查</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountUser</span> <span class="keyword">extends</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;   <span class="keyword">return</span> username;  &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;   <span class="built_in">this</span>.username = username;  &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;   <span class="keyword">return</span> address;  &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;   <span class="built_in">this</span>.address = address;  &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;   </span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">super</span>.toString() + <span class="string">&quot;   AccountUser [username=&quot;</span> + username + <span class="string">&quot;, address=&quot;</span> + address + <span class="string">&quot;]&quot;</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.domain.AccountUser&quot;</span>&gt;</span></span><br><span class="line">    select a.*,u.username,u.address from account a,user u where a.uid =u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">定义封装的account和user的resultMap</span><br><span class="line"><span class="comment">&lt;!-- 一、接口对应配置文件建立对应关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Account&quot;</span> <span class="attr">id</span>=<span class="string">&quot;accountMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 它是用于指定从表方的引用实体属性的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 二、引用创建的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountMap&quot;</span>&gt;</span></span><br><span class="line">    select u.*,a.id as aid,a.uid,a.money from account a,user u where a.uid =u.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//三、获取到信息后打印</span><br><span class="line">System.out.println(account);</span><br><span class="line">System.out.println(account.user);</span><br></pre></td></tr></table></figure><p>多对一、多对多联系的数据都可以通过对应接口配置文件中<association>标签建立对应关系进行查询获得</p><blockquote><p>注：要在查询对应的实体类中加入泛型为另一所包含信息的实体类的数组）</p></blockquote><h4 id="mybatis中的延迟加载"><a href="#mybatis中的延迟加载" class="headerlink" title="mybatis中的延迟加载"></a>mybatis中的延迟加载</h4><p><strong>延迟加载</strong>（按需加载、懒加载）：真正使用数据时才发起查询，不用的时候不查询。    一对多或多对多使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Account&quot;</span> <span class="attr">id</span>=<span class="string">&quot;accountMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select属性的内容：查询用户的唯一标识。column属性指定的内容：用户根据id查询时，所需要的参数的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span>  <span class="attr">javaType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>  <span class="attr">select</span>=<span class="string">&quot;com.itheima.dao.IUserDao.findById&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountMap&quot;</span>&gt;</span></span><br><span class="line">    select * from account</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主配置文件配置参数值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启mybatis支持延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 允许触发方法进行立即加载，否则按需加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>立即加载：</strong>不管用不用，只要一调用方法，马上发起查询    多对一，一对一使用</p><h4 id="mybatis中的缓存"><a href="#mybatis中的缓存" class="headerlink" title="mybatis中的缓存"></a><strong>mybatis中的缓存</strong></h4><p>缓存：存在于内存中的临时数据</p><p>为什么用缓存</p><blockquote><p>减少数据库交互次数，提高执行效率</p></blockquote><p>什么数据可用，什么不可用：    </p><blockquote><p>适用：经常查询、不经常改变、数据正确与否对最终结果影响不大的。</p><p>不适用：经常改变、数据正确与否对最终结果影响很大。</p></blockquote><p><strong>一级缓存</strong>：指mybatis中SqlSession对象的缓冲</p><ul><li><p>执行查询后，查询结果会同时存入到SqlSession为为我们提供的一块区域中。</p></li><li><p>该区域结构是一个Map，当我们再次查询同样数据，会先去SqlSession中查询，有直接用</p></li><li><p>当SqlSession对象消失时，mybatis一级缓存也就消失了</p></li><li><p>SqlSession对象.clearCache();//此方法也可清除缓存</p></li><li><p>当调用SqlSession对象修改、添加、删除、commit()、close()等方法会清空一级缓存</p></li></ul><p><strong>二级缓存</strong>：指mybatis中SqlSessionFactory对象的缓存，</p><ul><li>由同一个SqlSessionFactory对象创建的SqlSession共享其缓存</li><li>存放的内容是数据，不是对象，拿到数据后再创建对象并填充数据，虽没有查询数据库但是创建了新对象，所以对象不是同一个</li><li>二级缓存使用步骤: </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1--让Mybatis框架支持二级缓存(在主配置文件中配置)</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2--让当前映射文件支持二级缓存(在接口对应配置文件中配置)</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.dao.IUserDao&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3--让当前操作支持二级缓存(在select等操作标签中配置)</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  </span><br><span class="line">    select * from user where id = #&#123;uid&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="mybatis注解开发"><a href="#mybatis注解开发" class="headerlink" title="mybatis注解开发"></a>mybatis注解开发</h2><p>使用注解只是把接口对应的配置文件注解起来，主配置文件内容仍存在。<br>既有注解也有接口对应配置文件，运行会报错。在同一dao下用了注解就不能再用xml配置文件开发。</p><blockquote><p>解决：把接口对应配置文件移动到不相关的目录去</p></blockquote><p><strong>实体类属性与数据库表字段不一致</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*查询所有*/</span></span><br><span class="line"><span class="meta">@Select(value = &quot;select * from user&quot;)</span></span><br><span class="line"><span class="meta">@Results(id=&quot;userMap&quot;,value = &#123; //定义id,其他操作可通过@ResultMap()注解引入</span></span><br><span class="line"><span class="meta">    @Result(id=true,column=&quot;id&quot;,property=&quot;userId&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;username&quot;,property=&quot;userName&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;address&quot;,property=&quot;userAddress&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;sex&quot;,property=&quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;birthday&quot;,property=&quot;userBirthday&quot;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">----------------------------------------例二</span><br><span class="line">    <span class="comment">//其他操作引入类与字段的映射</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultMap(value = &#123;&quot;userMap&quot;&#125;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer userid)</span>;</span><br></pre></td></tr></table></figure><p><strong>多表查询</strong> </p><ul><li>通过@Results()注解映射对应信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多对一（mybatis中也称一对一）</span></span><br><span class="line"><span class="meta">@Results(id=&quot;accountMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">    @Result(id=true,column=&quot;id&quot;,property=&quot;id&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;uid&quot;,property=&quot;uid&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;money&quot;,property=&quot;money&quot;),</span></span><br><span class="line"><span class="meta">    //用@Result注解属性one封装对应一的属性（user属性）,即通过select字符串找到对应方法及sql语句执行获得对应数据</span></span><br><span class="line"><span class="meta">    //fetchType=FetchType.EAGER==什么加载。EAGER==立即加载  LAZY==延时加载</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;user&quot;,</span></span><br><span class="line"><span class="meta">            property=&quot;uid&quot;,</span></span><br><span class="line"><span class="meta">            one=@one(select=&quot;com.itheima.dao.IUserDao.findById&quot;,fetchType=FetchType.EAGER))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一对多</span></span><br><span class="line"><span class="meta">@Results(id=&quot;userMap&quot;,value = &#123;//定义id,其他操作可通过@ResultMap()注解引入</span></span><br><span class="line"><span class="meta">    @Result(id=true,column=&quot;id&quot;,property=&quot;userId&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;username&quot;,property=&quot;userName&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;address&quot;,property=&quot;userAddress&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;sex&quot;,property=&quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;birthday&quot;,property=&quot;userBirthday&quot;),</span></span><br><span class="line"><span class="meta">    //封装对应多（Account属性，用many）</span></span><br><span class="line"><span class="meta">    @Result(column=&quot;accounts&quot;,</span></span><br><span class="line"><span class="meta">            property=&quot;id&quot;,</span></span><br><span class="line"><span class="meta">            many=@many(select=&quot;com.itheima.dao.IAccountDao.findAccountByUid&quot;,fetchType=FetchType.LAZY))&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>注解开发如何使用二级缓存</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在主配置文件开启二级缓存</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存的支持，不配置也默认开启 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">接口上面通过@CacheNamespace()注解开启二级缓存</span><br><span class="line">@CacheNamespace(blocking=true)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis通用mapper</title>
      <link href="/aiyblog/2020/12/26/mybatis/mybatis%E9%80%9A%E7%94%A8mapper/"/>
      <url>/aiyblog/2020/12/26/mybatis/mybatis%E9%80%9A%E7%94%A8mapper/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义通用mapper"><a href="#自定义通用mapper" class="headerlink" title="自定义通用mapper"></a>自定义通用mapper</h2><p>由于mapper做了分层结构，我们的mapper接口可不继承Mapper<T>，而是有选择性的使用需要用到的封装好的相关方法。即自定义通用mapper<br><strong>封装好的方法</strong>：<br><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210107000702651-1968310310.png"></p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p><strong>配置数据库</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb?characterEncoding=UTF-8&amp;&amp;serverTimezone=GMT&amp;&amp;allowMultiQueries=true</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>allowMultiQueries=true</strong> 允许一次执行多行sql语句</p></blockquote><p><strong>1-编写自定义通用mapper接口并选择性的继承封装好的方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyMapper</span>&lt;T&gt; <span class="keyword">extends</span></span><br><span class="line">        <span class="title class_">SelectAllMapper</span>&lt;T&gt;,</span><br><span class="line">        SelectByExampleMapper&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2-个人mapper接口继承自定义通用mapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">MyMapper</span>&lt;Employee&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3-测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/selectByExample&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span>  List&lt;Employee&gt; <span class="title function_">selectByExample</span><span class="params">(Employee employee)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建example对象</span></span><br><span class="line">    <span class="type">Example</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>(Employee.class);</span><br><span class="line">    <span class="comment">//通过example设置查询条件</span></span><br><span class="line">    Example.<span class="type">Criteria</span> <span class="variable">criteria1</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line">    Example.<span class="type">Criteria</span> <span class="variable">criteria2</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line"></span><br><span class="line">    criteria1.andGreaterThan(<span class="string">&quot;empSalary&quot;</span>,<span class="number">3000</span>)</span><br><span class="line">            .andLessThan(<span class="string">&quot;empAge&quot;</span>,<span class="number">25</span>);</span><br><span class="line">    criteria2.andLessThan(<span class="string">&quot;empSalary&quot;</span>,<span class="number">5000</span>)</span><br><span class="line">            .andGreaterThan(<span class="string">&quot;empAge&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    example.or(criteria2);<span class="comment">// 组装查询条件</span></span><br><span class="line">    example.orderBy(<span class="string">&quot;empSalary&quot;</span>).asc().orderBy(<span class="string">&quot;empAge&quot;</span>).desc();<span class="comment">// 排序</span></span><br><span class="line">    example.setDistinct(<span class="literal">true</span>);<span class="comment">//去重</span></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    List&lt;Employee&gt; employees = employeeMapper.selectByExample(example);</span><br><span class="line">    <span class="keyword">return</span> employees;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202101/1594818-20210107001110438-154393146.png"></p><h2 id="扩展通用mapper接口"><a href="#扩展通用mapper接口" class="headerlink" title="扩展通用mapper接口"></a>扩展通用mapper接口</h2><p><strong>个人mapper接口</strong>：普通dao层接口<br><strong>通用mapper接口或自定义通用mapper接口</strong>：已封装好相关sql操作的接口，拿来即用那种<br><strong>扩展通用mapper接口</strong>：个人自定义的sql操作接口</p><p>1-定义【扩展接口】,使用相关注解注释并指定type和method(值为dynamicSQL)，如： @UpdateProvider  <strong>加上@RegisterMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RegisterMapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyBatchUpdateMapper</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@UpdateProvider(type = MyBatchUpdateProvider.class ,method = &quot;dynamicSQL&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">batchUpdate</span><span class="params">(List&lt;T&gt; list)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2-定义【接口方法实现类】,返回相关拼接好的sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatchUpdateProvider</span> <span class="keyword">extends</span> <span class="title class_">MapperTemplate</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBatchUpdateProvider</span><span class="params">(Class&lt;?&gt; mapperClass, MapperHelper mapperHelper)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(mapperClass, mapperHelper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;foreach collection=&quot;list&quot; item=&quot;record&quot; separator=&quot;;&quot; &gt;</span></span><br><span class="line"><span class="comment">            UPDATE tabple_emp</span></span><br><span class="line"><span class="comment">            SET emp_name=#f&#123;record.empName&#125;,</span></span><br><span class="line"><span class="comment">            emp_age=#&#123;record.empAge&#125;,</span></span><br><span class="line"><span class="comment">            emp_salary=#&#123;record.empSalary&#125;</span></span><br><span class="line"><span class="comment">            where emp_id=#&#123;record.empId&#125;</span></span><br><span class="line"><span class="comment">        &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">batchUpdate</span><span class="params">(MappedStatement statement)</span>&#123;  <span class="comment">//方法名和接口需要保持一致</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(<span class="string">&quot;&lt;foreach collection=\&quot;list\&quot; item=\&quot;record\&quot; separator=\&quot;;\&quot; &gt;&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; entityClass = <span class="built_in">super</span>.getEntityClass(statement);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> <span class="built_in">super</span>.tableName(entityClass);</span><br><span class="line">        <span class="type">String</span> <span class="variable">updateClause</span> <span class="operator">=</span> SqlHelper.updateTable(entityClass, tableName);</span><br><span class="line">        builder.append(updateClause);</span><br><span class="line">        builder.append(<span class="string">&quot;&lt;set&gt;&quot;</span>);</span><br><span class="line">        Set&lt;EntityColumn&gt; columns = EntityHelper.getColumns(entityClass);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">idColumn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">idHodler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (EntityColumn entityColumn : columns)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isPrimaryKey</span> <span class="operator">=</span> entityColumn.isId();</span><br><span class="line">            <span class="keyword">if</span> (isPrimaryKey)&#123;</span><br><span class="line">                idColumn = entityColumn.getColumn();</span><br><span class="line">                idHodler = entityColumn.getColumnHolder(<span class="string">&quot;record&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> entityColumn.getColumn();</span><br><span class="line">                <span class="type">String</span> <span class="variable">columnHolder</span> <span class="operator">=</span> entityColumn.getColumnHolder(<span class="string">&quot;record&quot;</span>);</span><br><span class="line"></span><br><span class="line">                builder.append(column).append(<span class="string">&quot;=&quot;</span>).append(columnHolder).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(<span class="string">&quot;&lt;/set&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        builder.append(<span class="string">&quot;WHERE &quot;</span>).append(idColumn).append(<span class="string">&quot;=&quot;</span>).append(idHodler);</span><br><span class="line">        builder.append(<span class="string">&quot;&lt;/foreach&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3-【自定义通用mapper接口继承扩展接口】以及个人mapper接口继承自定义通用mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyMapper</span>&lt;T&gt; <span class="keyword">extends</span></span><br><span class="line">        <span class="title class_">SelectAllMapper</span>&lt;T&gt;,</span><br><span class="line">        SelectByExampleMapper&lt;T&gt; ,</span><br><span class="line">        MyBatchUpdateMapper&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">MyMapper</span>&lt;Employee&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>或者【个人mapper接口直接继承扩展接口】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">MyMapper</span>&lt;Employee&gt; ,</span><br><span class="line">        MyBatchUpdateMapper&lt;Employee&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4-测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/batchUpdate&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">4</span>,<span class="string">&quot;newName01&quot;</span>,<span class="number">111.11</span>,<span class="number">11</span>));</span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">5</span>,<span class="string">&quot;newName02&quot;</span>,<span class="number">222.22</span>,<span class="number">22</span>));</span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">6</span>,<span class="string">&quot;newName03&quot;</span>,<span class="number">222.22</span>,<span class="number">33</span>));</span><br><span class="line">    employeeMapper.batchUpdate(employees);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis分页插件pageHelper使用</title>
      <link href="/aiyblog/2020/12/26/mybatis/mybatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6pageHelper%E4%BD%BF%E7%94%A8/"/>
      <url>/aiyblog/2020/12/26/mybatis/mybatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6pageHelper%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><em>PageHelper是mybatis的一个分页插件</em></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h4 id="1-导入jar包（依赖）"><a href="#1-导入jar包（依赖）" class="headerlink" title="1.导入jar包（依赖）"></a>1.导入jar包（依赖）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2-1(mybatis单独使用)mybatis配置xml中配置拦截器插件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- plugins在配置文件中的位置必须符合要求，否则会报错，顺序如下:</span></span><br><span class="line"><span class="comment">    properties?, settings?,</span></span><br><span class="line"><span class="comment">    typeAliases?, typeHandlers?,</span></span><br><span class="line"><span class="comment">    objectFactory?,objectWrapperFactory?,</span></span><br><span class="line"><span class="comment">    plugins?,</span></span><br><span class="line"><span class="comment">    environments?, databaseIdProvider?, mappers?</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="comment">&lt;!-- 使用下面的方式配置参数，后面会有所有的参数介绍 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2-1(ssm即mybatis交spring管理)spring配置xml中配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 注意其他配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span> <span class="comment">&lt;!--使用下面的方式配置参数，一行配置一个 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;helperDialect&quot;</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> <span class="comment">&lt;!--使用什么数据库需要对应配置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;reasonable&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2-2参数说明</strong></p><blockquote><ol><li><strong>helperDialect</strong> ：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置 helperDialect 属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值： oracle , mysql , mariadb , sqlite , hsqldb , postgresql , db2 , sqlserver , informix , h2 , sqlserver2012 , derby 特别注意：使用 SqlServer2012 数据库时，需要手动指定为 sqlserver2012 ，否则会使用 SqlServer2005 的 方式进行分页。 你也可以实现 AbstractHelperDialect ，然后配置该属性为实现类的全限定名称即可使用自定义的实现方 法。 </li><li><strong>offsetAsPageNum</strong> ：默认值为 false ，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为 true 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分 页。 </li><li><strong>rowBoundsWithCount</strong> ：默认值为 false ，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置 为 true 时，使用 RowBounds 分页会进行 count 查询。 </li><li><strong>pageSizeZero</strong> ：默认值为 false ，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。 </li><li><strong>reasonable</strong> ：分页合理化参数，默认值为 false 。当该参数设置为 true 时， pageNum&lt;=0 时会查询第一 页， pageNum&gt;pages （超过总数时），会查询最后一页。默认 false 时，直接根据参数进行查询。 </li><li><strong>params</strong> ：为了支持 startPage(Object params) 方法，增加了该参数来配置参数映射，用于从对象中根据属 性名取值， 可以配置 pageNum,pageSize,count,pageSizeZero,reasonable ，不配置映射的用默认值， 默认 值为 pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero 。 </li><li><strong>supportMethodsArguments</strong> ：支持通过 Mapper 接口参数来传递分页参数，默认值 false ，分页插件会从查 询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页。 使用方法 可以参考测试代码中的 com.github.pagehelper.test.basic 包下的 ArgumentsMapTest 和 ArgumentsObjTest 。 </li><li><strong>autoRuntimeDialect</strong> ：默认值为 false 。设置为 true 时，允许在运行时根据多数据源自动识别对应方言 的分页 （不支持自动选择 sqlserver2012 ，只能使用 sqlserver ），用法和注意事项参考下面的场景五。 </li><li><strong>closeConn</strong> ：默认值为 true 。当使用运行时动态数据源或没有设置 helperDialect 属性自动获取数据库类 型时，会自动获取一个数据库连接， 通过该属性来设置是否关闭获取的这个连接，默认 true 关闭，设置为 false 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定。 </li></ol></blockquote><h4 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h4><p>真正使用时先通过<code>PageHelper.startPage(page,size);//参数1==页码值，参数2:==每页显示条数</code>设置 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有订单</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Orders&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">5</span>);<span class="comment">//参数1 页码值，参数2: 每页显示条数  必须紧跟调用分页的代码之前</span></span><br><span class="line">    <span class="keyword">return</span> ordersDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后获取pageInfo对象存request域中，在页面获取并使用该对象。</p><hr><h2 id="以下为一个完整例子："><a href="#以下为一个完整例子：" class="headerlink" title="以下为一个完整例子："></a>以下为一个完整例子：</h2><h4 id="1-maven项目pom-xml配置文件引入依赖"><a href="#1-maven项目pom-xml配置文件引入依赖" class="headerlink" title="1. maven项目pom.xml配置文件引入依赖"></a>1. maven项目pom.xml配置文件引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-spring的xml配置中配置PageHelper插件"><a href="#2-spring的xml配置中配置PageHelper插件" class="headerlink" title="2. spring的xml配置中配置PageHelper插件"></a>2. spring的xml配置中配置PageHelper插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传入PageHelper的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 传入插件的对象 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;helperDialect&quot;</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;reasonable&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-service实现类"><a href="#3-service实现类" class="headerlink" title="3. service实现类"></a>3. service实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有订单</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Orders&gt; <span class="title function_">findAll</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> size)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    PageHelper.startPage(page,size);<span class="comment">//参数1==页码值，参数2:==每页显示条数</span></span><br><span class="line">    <span class="keyword">return</span> ordersDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-controller控制器方法"><a href="#4-controller控制器方法" class="headerlink" title="4. controller控制器方法"></a>4. controller控制器方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所以订单--分页</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/findAll.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">findAll</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(name = &quot;page&quot;,required = true,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(name = &quot;pageSize&quot;,required = true,defaultValue = &quot;4&quot;)</span><span class="type">int</span> size)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    List&lt;Orders&gt; ordersList = ordersService.findAll(page,size);</span><br><span class="line">    <span class="comment">//pageinfo就是 一个分页bean</span></span><br><span class="line">    <span class="type">PageInfo</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>(ordersList);</span><br><span class="line">    mv.addObject(<span class="string">&quot;pageInfo&quot;</span>,pageInfo);</span><br><span class="line">    mv.setViewName(<span class="string">&quot;orders-page-list&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-jsp数据展示页面对于pageInfo对象的使用"><a href="#5-jsp数据展示页面对于pageInfo对象的使用" class="headerlink" title="5. jsp数据展示页面对于pageInfo对象的使用"></a>5. jsp数据展示页面对于pageInfo对象的使用</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">----遍历数据</span><br><span class="line">&lt;!--数据列表--&gt;</span><br><span class="line">&lt;table id=<span class="string">&quot;dataList&quot;</span> class=<span class="string">&quot;table table-bordered table-striped table-hover dataTable&quot;</span>&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th class=<span class="string">&quot;&quot;</span> style=<span class="string">&quot;padding-right: 0px;&quot;</span>&gt;&lt;input</span><br><span class="line">id=<span class="string">&quot;selall&quot;</span> type=<span class="string">&quot;checkbox&quot;</span> class=<span class="string">&quot;icheckbox_square-blue&quot;</span>&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;th class=<span class="string">&quot;sorting_asc&quot;</span>&gt;ID&lt;/th&gt;</span><br><span class="line">&lt;th class=<span class="string">&quot;sorting_desc&quot;</span>&gt;订单编号&lt;/th&gt;</span><br><span class="line">&lt;th class=<span class="string">&quot;sorting_asc sorting_asc_disabled&quot;</span>&gt;产品名称&lt;/th&gt;</span><br><span class="line">&lt;th class=<span class="string">&quot;sorting_desc sorting_desc_disabled&quot;</span>&gt;金额&lt;/th&gt;</span><br><span class="line">&lt;th class=<span class="string">&quot;sorting&quot;</span>&gt;下单时间&lt;/th&gt;</span><br><span class="line">&lt;th class=<span class="string">&quot;text-center sorting&quot;</span>&gt;订单状态&lt;/th&gt;</span><br><span class="line">&lt;th class=<span class="string">&quot;text-center&quot;</span>&gt;操作&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;pageInfo.list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;orders&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;input name=<span class="string">&quot;ids&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;orders.id &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;orders.orderNum &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;orders.product.productName &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;orders.product.productPrice &#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;orders.orderTimeStr &#125;&lt;/td&gt;</span><br><span class="line">&lt;td class=<span class="string">&quot;text-center&quot;</span>&gt;$&#123;orders.orderStatusStr &#125;&lt;/td&gt;</span><br><span class="line">&lt;td class=<span class="string">&quot;text-center&quot;</span>&gt;</span><br><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> class=<span class="string">&quot;btn bg-olive btn-xs&quot;</span>&gt;订单&lt;/button&gt;</span><br><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> class=<span class="string">&quot;btn bg-olive btn-xs&quot;</span> onclick=<span class="string">&quot;location.href=&#x27;$&#123;pageContext.request.contextPath&#125;/orders/findById.do?id=$&#123;orders.id&#125;&#x27;&quot;</span>&gt;详情&lt;/button&gt;</span><br><span class="line">&lt;button type=<span class="string">&quot;button&quot;</span> class=<span class="string">&quot;btn bg-olive btn-xs&quot;</span>&gt;编辑&lt;/button&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;!--数据列表/--&gt;</span><br><span class="line"></span><br><span class="line">----分页操作</span><br><span class="line">&lt;div class=<span class="string">&quot;box-footer&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;pull-left&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group form-inline&quot;</span>&gt;</span><br><span class="line">            总共$&#123;pageInfo.pages&#125;页，共$&#123;pageInfo.total&#125; 条数据。 每页</span><br><span class="line">            &lt;select id=<span class="string">&quot;changePageSize&quot;</span> class=<span class="string">&quot;form-control&quot;</span> onchange=<span class="string">&quot;changePageSize()&quot;</span>&gt;</span><br><span class="line">                &lt;option&gt;<span class="number">1</span>&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;<span class="number">2</span>&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;<span class="number">3</span>&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;<span class="number">4</span>&lt;/option&gt;</span><br><span class="line">                &lt;option&gt;<span class="number">5</span>&lt;/option&gt;</span><br><span class="line">            &lt;/select&gt; 条</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;box-tools pull-right&quot;</span>&gt;</span><br><span class="line">        &lt;ul class=<span class="string">&quot;pagination&quot;</span>&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/orders/findAll.do?page=1&amp;pageSize=$&#123;pageInfo.pageSize&#125;&quot;</span> aria-label=<span class="string">&quot;Previous&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/orders/findAll.do?page=$&#123;pageInfo.pageNum-1&#125;&amp;pageSize=$&#123;pageInfo.pageSize&#125;&quot;</span>&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;%--遍历每一页--%&gt;</span><br><span class="line">            &lt;c:forEach begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;$&#123;pageInfo.pages&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;pageNum&quot;</span>&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/orders/findAll.do?page=$&#123;pageNum&#125;&amp;pageSize=$&#123;pageInfo.pageSize&#125;&quot;</span>&gt;$&#123;pageNum&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/c:forEach&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/orders/findAll.do?page=$&#123;pageInfo.pageNum+1&#125;&amp;pageSize=$&#123;pageInfo.pageSize&#125;&quot;</span>&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/orders/findAll.do?page=$&#123;pageInfo.pages&#125;&amp;pageSize=$&#123;pageInfo.pageSize&#125;&quot;</span> aria-label=<span class="string">&quot;Next&quot;</span>&gt;尾页&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">----每页显示几条数据的js方法</span><br><span class="line">function <span class="title function_">changePageSize</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//获取下拉框的值</span></span><br><span class="line">      <span class="type">var</span> <span class="variable">pageSize</span> <span class="operator">=</span> $(<span class="string">&quot;#changePageSize&quot;</span>).val();</span><br><span class="line">      <span class="comment">//向服务器发送请求，改变没页显示条数</span></span><br><span class="line">      location.href = <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/orders/findAll.do?page=1&amp;pageSize=&quot;</span>+ pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript-基本</title>
      <link href="/aiyblog/2020/12/26/ECMAScript-%E5%9F%BA%E6%9C%AC/"/>
      <url>/aiyblog/2020/12/26/ECMAScript-%E5%9F%BA%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>ECMAScript是浏览器脚本语言的规范，而各种我们熟知的js语言,如JavaScrip则是规范的具体实现。</p><ul><li>1.let:声明一个变量，不会越界  const：声明一个常量</li><li>2.字符串扩展<ul><li>includes：是否包含</li><li>startsWith：以xx开始</li><li>endsWith：以xx结束</li><li>const ss = `` ：可以换多行</li></ul></li><li>3.解构表达式<ul><li>数组：const arr=[1,2,3];   let或const [x,y,z]=arr</li><li>对象: let person={name:”zhangsna”,age:23 }; //解构对象需要和原属性名称一致=const {name,age}=person; //若要用其他变量接收可以=let或const {name:a, age:b}=person</li></ul></li><li>4.函数<ul><li>赋默认值：方法参数列表赋默认值 (a, b=1)=&gt;{}</li><li>箭头函数：()=&gt;{}</li><li>对象中定义函数：<ul><li>传统 eat：function(){}</li><li>箭头 eat：()=&gt;{}</li><li>简写 eat(){}</li><li>箭头函数结合结构表达式：({name})=&gt;{}</li></ul></li></ul></li><li>5.map和reduce<ul><li>map(fun)：处理一个数组，遍历数组中的每一个元素用fun处理，把处理结果放入新的数组</li><li>reduce(fun(a, b)[, 100])： let arr=[10,20,30]; 没有初始值<ul><li>第一次 ：a=10(前第一个参数)，b=20（前第二个参数），arr.reduce=a+b=10+20=30;） </li><li>第二次：a=30（上一次reduce结果），b=40（数组中待处理的下一个元素），arr.reduce=a+b=30+40=70;</li></ul></li></ul></li><li>6.对象的扩展<ul><li>keys：获取对象的所有key形成的数组</li><li>values：获取对象的所有value形成的数组</li><li>entries：获取对象的所有key和value形成的二维数组。格式: [5k1,v1], [k2,v2]….]</li><li>assign(dest, …src)：将多个src对象的值拷贝到dest中(浅拷贝)。</li></ul></li><li>7.数组扩展<ul><li>find：找出第一个符合条件的数组成员，然后返回该成员，没有符合条件的成员，则返回undefined。</li><li>findIndex：数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</li><li>includes：与find类似，如果匹配到元素，则返回true,代表找到了。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jsp入门</title>
      <link href="/aiyblog/2020/12/26/jsp%E5%85%A5%E9%97%A8/"/>
      <url>/aiyblog/2020/12/26/jsp%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="jsp知识点"><a href="#jsp知识点" class="headerlink" title="jsp知识点"></a>jsp知识点</h2><p><strong>指令</strong>：用于配置jsp页面，导入资源文件<br><strong>格式</strong>：&lt;%@  属性名1=属性值1 属性名2=属性值2 属性名n=属性值n …..   %&gt;<br><strong>分类</strong>：</p><ul><li><strong>page</strong>：配置jsp页面的</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left"></th></tr></thead><tbody><tr><td align="left">contentType</td><td align="left">等同于response.setContentType()<br/>设置响应体的mime类型以及字符集<br/>设置当前jsp页面的编码（只能是高级的ide才能自动生成，使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</td></tr><tr><td align="left">language</td><td align="left">脚本语言，目前仅支持java</td></tr><tr><td align="left">import</td><td align="left">导包</td></tr><tr><td align="left">errorPage</td><td align="left">当前页面发生异常后，会自动跳转到指定的错误页面标</td></tr><tr><td align="left">isErrorPage</td><td align="left">标识当前页面是否是错误页面。<br/>true：是。可以使用内置对象exception<br/>false：否。默认值，不可以使用内置对象exception</td></tr></tbody></table><ul><li><strong>include</strong>：页面包含的。导入页面的资源文件</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">&quot;top.jsp&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>taglib</strong>：导入资源</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">属性：</span><br><span class="line">prefix:前缀 自定义        </span><br></pre></td></tr></table></figure><ul><li><strong>注释</strong></li></ul><table><thead><tr><th align="left">注释</th><th align="left">符号</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">html注释</td><td align="left"><!-- --></td><td align="left">只能注释html片段</td></tr><tr><td align="left">jsp注释</td><td align="left">&lt;%–  –%&gt;</td><td align="left">可以注释jsp页面任意内容（推荐使用）</td></tr></tbody></table><ul><li><strong>内置对象</strong></li></ul><p>（一共九个）在jsp页面中不需要创建，直接使用的对象</p><table><thead><tr><th align="left">变量名</th><th align="left">真实类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">pageContext：</td><td align="left">PageContext</td><td align="left">当前页面共享数据，还可以获取其他内置的八个对象</td></tr><tr><td align="left">request</td><td align="left">HttpServletRequest</td><td align="left">一次请求访问的多个资源（转发）</td></tr><tr><td align="left">session</td><td align="left">HttpSession</td><td align="left">一次会话的多个请求间</td></tr><tr><td align="left">application</td><td align="left">ServletContext</td><td align="left">所有用户间共享数据</td></tr><tr><td align="left"><strong>前四个为域对象</strong></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">response</td><td align="left">HttpServletResponse</td><td align="left">响应对象</td></tr><tr><td align="left">page:</td><td align="left">Object</td><td align="left">当前页面(Servlet)的对象 相当于this</td></tr><tr><td align="left">out</td><td align="left">JspWriter</td><td align="left">输出对象，数据输出到页面上</td></tr><tr><td align="left">config</td><td align="left">ServletConfig</td><td align="left">servlet的配置对象</td></tr><tr><td align="left">exception</td><td align="left">Throwable</td><td align="left">异常对象<br/>只有声明isErrorPage才有该内置对象</td></tr></tbody></table><ul><li><strong>EL表达式</strong>    </li></ul><p>Expression Language (表达式语言)    替换和简化jsp页面中java代码的编</p><p>语法：${ 表达式 }</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意：jsp默认支持el表达式，如果要忽略el表达式</span><br><span class="line">设置jsp中page指令：isElIgnored=<span class="string">&quot;true&quot;</span> 忽略当前jsp中所有el表达式</span><br><span class="line"></span><br><span class="line">\$&#123;&#125; ：忽略单个表达式</span><br><span class="line">$&#123;empty&#125; 判断字符串，集合，数组对象是否为<span class="literal">null</span>或长度为<span class="number">0</span></span><br><span class="line">$&#123;not empty&#125; 判断字符串，集合，数组对象是否不为<span class="literal">null</span>或不长度为<span class="number">0</span></span><br></pre></td></tr></table></figure><p>获取值：${域名称.键名}</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从指定域中获取指定键的值(el表达式只能从域对象中获取值)</span><br><span class="line">举例：在request域中存储了name=张三获取：$&#123;requstScope.name&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">域名称</th><th align="left">对应域</th></tr></thead><tbody><tr><td align="left">pageScope</td><td align="left">pageContext</td></tr><tr><td align="left">requestScope</td><td align="left">request</td></tr><tr><td align="left">sessionScope</td><td align="left">session</td></tr><tr><td align="left">applicationScope</td><td align="left">application(ServletContext)</td></tr></tbody></table><table><thead><tr><th>方式</th><th>获取值</th><th></th></tr></thead><tbody><tr><td>键值：</td><td>${键名}</td><td>表示以此从最小的域中查找是否有该键对应的值，直到找完为止</td></tr><tr><td>对象属性：</td><td>${域名称.键名.属性名}</td><td>属性名本质上是对象的getxxx()方法去掉get首字母小写  相当于调用了getxxx方法获取值</td></tr><tr><td>list集合值</td><td>${域名称.键名[索引]}</td><td></td></tr><tr><td>map集合值</td><td>${域名称.键名.key}或${域名称.键名[“key”]}</td><td></td></tr></tbody></table><p>隐式对象：el表达式中不用创建直接就可以<br/>类似jsp内置对象不等价<br/>el表达式中有11个隐式对象<br/>pageContext        可以获取jsp其他八个内置对象<br/>${pageContext.request.contextPath}：jsp页面中动态获取虚拟目录</p><ul><li><strong>JSTL</strong></li></ul><p>JavaServer Pages Tag Library JSP标准标签库，是由Apache组织提供的开源的免费的jsp标签</p><p>作用：用于简化和替换jsp页面上的java代码</p><p>使用步骤：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 导入jstl相关jar包</span><br><span class="line">    javax.servlet.jsp.jstl.jar</span><br><span class="line">jstl-impl.jar</span><br><span class="line"></span><br><span class="line"># 引入标签库：taglig指令</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span>  uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"># 使用对应标签</span><br></pre></td></tr></table></figure><p>【&lt;c:if&gt;标签】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--c:if标签：</span><br><span class="line">test必须属性，接收boolean表达式</span><br><span class="line">如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</span><br><span class="line">一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line">注意：c:if标签没有else标签，如果需要else可以再写一个c:if标签</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>【<choose>标签】</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--choose标签</span><br><span class="line">案例：完成数字编号对应星期几</span><br><span class="line"><span class="number">1</span>-域中存储一数字  </span><br><span class="line"><span class="number">2</span>-使用choose标签取出数字相当于<span class="keyword">switch</span>声明</span><br><span class="line"><span class="number">3</span>-使用when标签做数字判断相当于<span class="keyword">case</span></span><br><span class="line"><span class="number">4</span>-otherwise标签做其他情况的声明  相当于<span class="keyword">default</span></span><br><span class="line">--&gt;</span><br><span class="line">&lt;% 　<span class="comment">// 存储数据</span></span><br><span class="line">    <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;choose&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> Integer.parseInt(request.getParameter(<span class="string">&quot;choose&quot;</span>));</span><br><span class="line">        request.setAttribute(<span class="string">&quot;choose&quot;</span>, c);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;choose&quot;</span>, <span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;choose==1&#125;&quot;</span>&gt;星期一&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;choose==2&#125;&quot;</span>&gt;星期二&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;choose==3&#125;&quot;</span>&gt;星期三&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;choose==4&#125;&quot;</span>&gt;星期四&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;choose==5&#125;&quot;</span>&gt;星期五&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;choose==6&#125;&quot;</span>&gt;星期六&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;choose==7&#125;&quot;</span>&gt;星期日&lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;输入数字有误&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>【<foreach>标签】</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;<span class="keyword">for</span>:&lt;/h4&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;10&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> step=<span class="string">&quot;2&quot;</span> varStatus=<span class="string">&quot;s&quot;</span>&gt;</span><br><span class="line">    循环次数：$&#123;s.count&#125;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    容器索引：$&#123;s.index&#125;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    值：$&#123;i&#125; &lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"># 遍历：</span><br><span class="line">java中：<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">19</span>;i++)&#123;&#125;</span><br><span class="line">属性：</span><br><span class="line">        begin：开始值</span><br><span class="line">        end：结束值</span><br><span class="line">        <span class="keyword">var</span>：临时变量</span><br><span class="line">        step：步长</span><br><span class="line">        varStatus：循环状态对象</span><br><span class="line"></span><br><span class="line">&lt;h4&gt;foreach:&lt;/h4&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;str&quot;</span> varStatus=<span class="string">&quot;s&quot;</span>&gt;</span><br><span class="line">    循环次数：$&#123;s.count&#125;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    容器索引：$&#123;s.index&#125;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    值：$&#123;str&#125; &lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"># 遍历容器：</span><br><span class="line">java中：List&lt;User&gt; list;  <span class="keyword">for</span>(User user:list)&#123;&#125;</span><br><span class="line">    属性：</span><br><span class="line">        items：容器对象    如：list</span><br><span class="line">        <span class="keyword">var</span>：容器中元素的临时变量如：user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index:容器中元素的索引，默认从<span class="number">0</span>开始</span><br><span class="line">count:循环次数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署go项目</title>
      <link href="/aiyblog/2020/12/26/go/docker%E9%83%A8%E7%BD%B2go%E9%A1%B9%E7%9B%AE/"/>
      <url>/aiyblog/2020/12/26/go/docker%E9%83%A8%E7%BD%B2go%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://duoke360.com/post/173">如何使用DOCKER部署一个GO WEB应用程序</a></li></ul><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li>主机或者服务器上安装Docker   <a href="https://blog.csdn.net/qq_41617261/article/details/113740699">docker安装与操作</a></li><li>具有一台能够使用SSH密钥对SSH请求进行认证的服务器</li></ul><h2 id="准备go应用"><a href="#准备go应用" class="headerlink" title="准备go应用"></a>准备go应用</h2><ul><li>应用目录结构</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">│  <span class="keyword">go</span>.mod</span><br><span class="line">│  <span class="keyword">go</span>.sum</span><br><span class="line">│  main.<span class="keyword">go</span>    </span><br><span class="line">├─conf</span><br><span class="line">│      app.conf</span><br><span class="line">├─controller</span><br><span class="line">│      MathController.<span class="keyword">go</span></span><br><span class="line">│      MathController_test.<span class="keyword">go</span></span><br><span class="line">└─views</span><br><span class="line">        invalid-route.html</span><br><span class="line">        result.html</span><br></pre></td></tr></table></figure><ul><li>main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;MathApp/controller&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The main function defines a single route, its handler*</span></span><br><span class="line"><span class="comment">// and starts listening on port 8080 (default port for Beego)*</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">beego.Router(<span class="string">&quot;/:operation/:num1:int/:num2:int&quot;</span>, &amp;controller.MathController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">&quot;/test/:name:string&quot;</span>, &amp;controller.TestController&#123;&#125;)</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MathController.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MathController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MathController)</span></span> Get() &#123;</span><br><span class="line">operation := c.Ctx.Input.Param(<span class="string">&quot;:operation&quot;</span>)</span><br><span class="line">num1, _ := strconv.Atoi(c.Ctx.Input.Param(<span class="string">&quot;:num1&quot;</span>))</span><br><span class="line">num2, _ := strconv.Atoi(c.Ctx.Input.Param(<span class="string">&quot;:num2&quot;</span>))</span><br><span class="line"><span class="comment">//Set the values for use in the template*</span></span><br><span class="line">c.Data[<span class="string">&quot;operation&quot;</span>] = operation</span><br><span class="line">c.Data[<span class="string">&quot;num1&quot;</span>] = num1</span><br><span class="line">c.Data[<span class="string">&quot;num2&quot;</span>] = num2</span><br><span class="line">c.TplName = <span class="string">&quot;result.html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform the calculation depending on the &#x27;operation&#x27; route parameter*</span></span><br><span class="line"><span class="keyword">switch</span> operation &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;sum&quot;</span>:</span><br><span class="line">c.Data[<span class="string">&quot;result&quot;</span>] = add(num1, num2)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;product&quot;</span>:</span><br><span class="line">c.Data[<span class="string">&quot;result&quot;</span>] = multiply(num1, num2)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">c.TplName = <span class="string">&quot;invalid-route.html&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(n1, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiply</span><span class="params">(n1, n2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 * n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MathController_test.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSum</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> add(<span class="number">2</span>, <span class="number">5</span>) != <span class="number">7</span> &#123;</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> add(<span class="number">2</span>, <span class="number">100</span>) != <span class="number">102</span> &#123;</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> add(<span class="number">222</span>, <span class="number">100</span>) != <span class="number">322</span> &#123;</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProduct</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> multiply(<span class="number">2</span>, <span class="number">5</span>) != <span class="number">10</span> &#123;</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> multiply(<span class="number">2</span>, <span class="number">100</span>) != <span class="number">200</span> &#123;</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> multiply(<span class="number">222</span>, <span class="number">3</span>) != <span class="number">666</span> &#123;</span><br><span class="line">t.Fail()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.conf</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appname = MathApp</span><br><span class="line">httpport = 8080</span><br><span class="line">runmode = dev</span><br></pre></td></tr></table></figure><ul><li>result.html 和 invalid-route.html </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- result.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MathApp - &#123;&#123;.operation&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    The &#123;&#123;.operation&#125;&#125; of &#123;&#123;.num1&#125;&#125; and &#123;&#123;.num2&#125;&#125; is &#123;&#123;.result&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- invalid-route.html  --&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MathApp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Invalid operation</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><strong>1-创建dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## file：dockerfile.docker</span></span><br><span class="line"><span class="comment"># 将Go的官方映像文件作为基础映像。该映像文件预安装了 Go 1.6 . 该映像已经把 $GOPATH 的值设置到了 /go 。</span></span><br><span class="line"><span class="comment"># 所有安装在 /go/src 中的包将能够被go命令访问。</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 beego 包和 bee 工具。 beego 包将在应用程序中使用。 bee 工具用语在开发中再现地重新加载我们的代码。</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go get github.com/astaxie/beego &amp;&amp; go get github.com/beego/bee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发主机上利用容器为应用程序开放8080端口。</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用bee命令启动应用程序的在线重新加载</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;bee&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>2- 构建image</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">----构建image</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建了Docker file，运行如下的命令来创建image</span></span><br><span class="line">docker build -t ma-image .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以查看你的系统上的image列表，运行如下的命令</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p><strong>3-运行容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">----运行容器</span> </span><br><span class="line">docker run -it --rm --name ma-instance -p 8080:8080 \</span><br><span class="line">-v /app/MathApp:/go/src/MathApp -w /go/src/MathApp ma-image</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>docker run命令用于从一个image上启动一个容器</li><li>-it 标签以交互的方式启动容器</li><li>–rm 标签在容器关闭后将会将其清除</li><li>–name ma-instance 将容器命名为ma-instance</li><li>-p 8080:8080 标签允许通过8080端口访问该容器</li></ul><blockquote><p>输出日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bee   :1.4.1</span><br><span class="line">beego :1.6.1</span><br><span class="line">Go    :go version go1.6 linux/amd64</span><br><span class="line">2016/04/10 13:04:15 [INFO] Uses &#x27;MathApp&#x27; as &#x27;appname&#x27;</span><br><span class="line">2016/04/10 13:04:15 [INFO] Initializing watcher...</span><br><span class="line">2016/04/10 13:04:15 [TRAC] Directory(/go/src/MathApp)</span><br><span class="line">2016/04/10 13:04:15 [INFO] Start building...</span><br><span class="line">2016/04/10 13:04:18 [SUCC] Build was successful</span><br><span class="line">2016/04/10 13:04:18 [INFO] Restarting MathApp ...</span><br><span class="line">2016/04/10 13:04:18 [INFO] ./MathApp is running...</span><br><span class="line">2016/04/10 13:04:18 [asm_amd64.s:1998][I] http server Running on :8080</span><br></pre></td></tr></table></figure></blockquote><p><strong>4-浏览器访问程序</strong></p><ul><li>浏览器中访问：<a href="http://localhost:8080/sum/4/5">http://localhost:8080/sum/4/5</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-3vuex</title>
      <link href="/aiyblog/2020/11/26/vue-3vuex/"/>
      <url>/aiyblog/2020/11/26/vue-3vuex/</url>
      
        <content type="html"><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>vuex是vue的一个插件。</p><ul><li>github 站点: <a href="https://github.com/vuejs/vuex">https://github.com/vuejs/vuex</a> </li><li>在线文档: <a href="https://vuex.vuejs.org/zh-cn/">https://vuex.vuejs.org/zh-cn/</a> </li><li>对 vue 应用中多个组件的共享状态进行集中式的管理(读/写)</li></ul><blockquote><p>安装：npm install vuex –save</p></blockquote><p><strong>状态自管理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">Actions--&gt;state</span><br><span class="line">state--&gt;View</span><br><span class="line">View--&gt;Actions</span><br></pre></td></tr></table></figure><h3 id="vuex对象"><a href="#vuex对象" class="headerlink" title="vuex对象"></a>vuex对象</h3><ul><li>state, //状态对象</li><li>getters // 包含多个getter计算属性函数的对象</li><li>actions, // 包含多个对应事件回调函数的对象</li><li>mutations, // 包含多个更新state函数的对象</li></ul><blockquote><p>vuex使用时有时会把每个对象独立成一个模块</p></blockquote><p><strong>vuex结构</strong></p><p><img src="D:\Users\xiaoaiying\Typora\img\image-20210220011352667.png" alt="image-20210220011352667"></p><p><strong>store对象</strong></p><ul><li><p>所有vuex管理的组件都多一个属性：$store, 它是一个store对象</p></li><li><p>属性：</p><ul><li>state 注册的state对象</li><li>getters 注册的getters对象</li></ul></li><li><p>方法：</p><ul><li>dispatch(actionNmae,data)   分发调用action</li></ul></li></ul><p><strong>执行顺序</strong></p><ul><li><p>state 管理属性状态</p></li><li><p>getters 管理计算属性</p></li><li><p>$store.dispatch  调用 action</p></li><li><p>action 调用 murations</p></li></ul><p><strong>使用例子</strong></p><ul><li>定义vuex核心对象模块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">vuex 核心管理对象模块 store   文件：store.js</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//状态对象</span></span><br><span class="line"><span class="keyword">const</span> state = &#123; <span class="comment">// 初始化状态</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含多个更新state函数的对象</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">// 增加的mutation</span></span><br><span class="line">    <span class="title function_">INCREMENT</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        state.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 减少的mutation</span></span><br><span class="line">    <span class="title function_">DECREMENT</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        state.<span class="property">count</span>--;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含多个对应事件回调函数的对象</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123; </span><br><span class="line">    <span class="comment">// 增加的action</span></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">        <span class="comment">// 提交mutation</span></span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 减少的action</span></span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">        <span class="comment">// 提交mutation</span></span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;DECREMENT&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 奇数才增加</span></span><br><span class="line">    <span class="title function_">incrementIfOdd</span>(<span class="params">&#123;commit,state&#125;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(state.<span class="property">count</span> %<span class="number">2</span> === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 提交mutation</span></span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 过1s才增加</span></span><br><span class="line">    <span class="title function_">incrementAsync</span>(<span class="params">&#123;commit&#125;</span>)&#123;</span><br><span class="line">        <span class="comment">// 在action中直接就可以执行异步代码</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">commit</span>(<span class="string">&#x27;INCREMENT&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含多个getter计算属性函数的对象</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">evenOrOdd</span>(<span class="params">state</span>)&#123;  <span class="comment">// .vue组件中不需要调用，只需要读取属性值</span></span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">count</span>%<span class="number">2</span> === <span class="number">0</span> ? <span class="string">&quot;偶数&quot;</span> : <span class="string">&quot;奇数&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    state, <span class="comment">//状态对象</span></span><br><span class="line">    mutations, <span class="comment">// 包含多个更新state函数的对象</span></span><br><span class="line">    actions, <span class="comment">// 包含多个对应事件回调函数的对象</span></span><br><span class="line">    getters <span class="comment">// 包含多个getter计算属性函数的对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>引入vuex核心配置模块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入口js 创建vue实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>  <span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">App</span>   <span class="comment">// 映射组件为标签</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span>,  <span class="comment">// 模板里写的是标签</span></span><br><span class="line">  store   <span class="comment">// 所有的组件对象都多了个属性：$store</span></span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>.vue中使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>click &#123;&#123;$store.state.count&#125;&#125; times, count is &#123;&#123;evenOrOdd&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementIfOdd&quot;</span>&gt;</span>increment if odd<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementAsync&quot;</span>&gt;</span>increment async<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//原来</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// evenOrOdd()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   return this.$store.getters.evenOrOdd;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 简写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// mapState()返回值：&#123;count()&#123;return this.$store.state[&#x27;count&#x27;]&#125;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// mapGetters()返回值：&#123;evenOrOdd()&#123;return this.$store.getters[&#x27;evenOrOdd&#x27;]&#125;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ...mapGetters([&#x27;evenOrOdd&#x27;])</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 可以定义对象指定getters对象中相应的计算属性 参数1=组件中属性  参数2=vuex的xxx对象中的属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">evenOrOdd</span>: <span class="string">&#x27;evenOrOdd&#x27;</span>&#125;) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 原来</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  increment()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     // 通知vuex增加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     this.$store.dispatch(&#x27;increment&#x27;) // 触发store中对应的action调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  decrement()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     // 通知vuex增加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     this.$store.dispatch(&#x27;decrement&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  //奇数才增加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  incrementIfOdd()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     this.$store.dispatch(&#x27;incrementIfOdd&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  // 过1秒才增加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  incrementAsync()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     this.$store.dispatch(&#x27;incrementAsync&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//  &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 简写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;increment&#x27;</span>,<span class="string">&#x27;decrement&#x27;</span>,<span class="string">&#x27;incrementIfOdd&#x27;</span>,<span class="string">&#x27;incrementAsync&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-2基础</title>
      <link href="/aiyblog/2020/11/26/vue-2%E5%9F%BA%E7%A1%80/"/>
      <url>/aiyblog/2020/11/26/vue-2%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><strong>节点</strong></p><ul><li>document</li><li>element</li><li>attribute</li><li>text</li></ul><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><ul><li><p>modeL:模型，数据对象(data)</p></li><li><p>view:视图，模板页面</p></li><li><p>viewModel:视图模型(vue的实例)</p></li></ul><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">----绑定数据</span><br><span class="line">双括号&#123;&#123;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">----双向绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">----不解析html</span><br><span class="line">v-text</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">----解析html</span><br><span class="line">v-html</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----强制绑定</span><br><span class="line">v-bind 或【:】</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&#x27;imgUrl&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&#x27;imgUrl&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line"></span><br><span class="line">----v-on:事件类型</span><br><span class="line">@事件类型 ：绑定事件监听</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span>test-clic<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;test2(msg)&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue实例内相关属性"><a href="#vue实例内相关属性" class="headerlink" title="vue实例内相关属性"></a>vue实例内相关属性</h2><p>【<strong>el</strong>】 绑定容器元素</p><p>【<strong>data</strong>】 数据绑定</p><p>【<strong>method</strong>】  方法</p><p>【<strong>computed</strong>】计算属性</p><p>【<strong>watch</strong>】监视</p><p>【<strong>生命周期函数</strong>】</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>生命周期函数一般执行1次。</p><ul><li><p>beforeCreate() 创建前</p></li><li><p>created () 创建后</p></li><li><p>beforeMount() 挂载前</p></li><li><p>mounted() 挂载后 </p></li><li><p><strong>beforeUpdate()</strong>   更新前，执行0-n次</p></li><li><p>**updated() **  更新前，执行0-n次</p></li><li><p>beforeDestroy() 销毁前</p></li><li><p>destroyed() 销毁后</p></li></ul><p><strong>常用</strong></p><ul><li>mounted()  发送ajax请求，启动定时器等异步任务</li><li>beforeDestroy()  收尾工作，如：清除定时器</li></ul><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;class与style绑定&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">       </span><br><span class="line">        &lt;p v-upper-text=&quot;msg1&quot;&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p v-lower-text=&quot;msg1&quot;&gt;&lt;/p&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;demo1&quot;&gt;</span><br><span class="line">        &lt;p v-upper-text=&quot;msg2&quot;&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p v-lower-text=&quot;msg2&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 定义全局指令</span><br><span class="line">        Vue.directive(&quot;upper-text&quot;,function(el,binding)&#123;</span><br><span class="line">            console.log(el,binding);</span><br><span class="line">            el.textContent = binding.value.toUpperCase();</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        const vm = new Vue(&#123;</span><br><span class="line">            el:&quot;#demo&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">               msg1:&quot;NBA I Love This Game!&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">            </span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;// 计算属性</span><br><span class="line">           </span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123; // 监视</span><br><span class="line">           </span><br><span class="line">            &#125;,</span><br><span class="line">            directives: &#123;  // 注册局部指令 在当前vm管理范围有效</span><br><span class="line">                &#x27;lower-text&#x27;(el,binding)&#123;</span><br><span class="line">                    console.log(el,binding);</span><br><span class="line">                    el.textContent = binding.value.toLowerCase();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        </span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        const vm2 = new Vue(&#123;</span><br><span class="line">            el:&quot;#demo1&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">               msg2:&quot;Just Do It!&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li>定义插件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vue定义插件  .js文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 向外暴露插件对象</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">MyPlugin</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MyPlugin</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property">myGlobalMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;vue函数对象的方法myGlobalMethod()&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, <span class="keyword">function</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line">            el.<span class="property">textContent</span> = binding.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params">methodOptions</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vue实例对象的方法$myMethod()&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向外暴露</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">MyPlugin</span> = <span class="title class_">MyPlugin</span>;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>class与style绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-my-directive</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue-myPlugin.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 引入插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//声明使用插件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MyPlugin</span>)  <span class="comment">// 内部会执行MyPlugin.install(Vue)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用插件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">myGlobalMethod</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#demo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>:<span class="string">&quot;I Liek You ~ &quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用插件方法</span></span></span><br><span class="line"><span class="language-javascript">        vm.$myMethod()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vue————————————</p><p><strong>组件标签</strong></p><ul><li>可以使用-加小写形式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如标签：&lt;UsersMain/&gt;  可写成  &lt;users-main/&gt;</span><br></pre></td></tr></table></figure><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><ul><li>获取数据：window.localStorage.setItem(“key”)</li><li>获取数据：window.localStorage.getItem(“key”)</li></ul><h2 id="组件通信："><a href="#组件通信：" class="headerlink" title="组件通信："></a>组件通信：</h2><h3 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a><strong>绑定属性</strong></h3><ul><li>传递属性  :xxx  =  “xxx”</li><li>子组件props接收属性 可声明接收类型(Number、Function等)</li><li>调用属性</li></ul><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a><strong>绑定事件</strong></h3><ul><li><p>给子标签绑定事件函数  @xxx = “xxx”</p></li><li><p>子组件触发事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(函数，数据);</span><br></pre></td></tr></table></figure></li></ul><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a><strong>ref</strong></h3><ul><li><p>ref=”xxx” 给子组件取名</p></li><li><p>父组件绑定事件函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;//执行异步代码</span><br><span class="line">//给&lt;TodoHeader/&gt;绑定addTodo事件监听</span><br><span class="line">    //this.$on(&#x27;addTodo&#x27;,this.addTodo)//直接用this的话是给当前组件(App)绑定的监听，不对</span><br><span class="line">this.$refs.xxx.$on(&#x27;addTodo&#x27;, this.addTodo)  // 通过refs获取需绑定的组件</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>子组件触发事件</p></li></ul><h3 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h3><p>好处：两个组件通信，无位置限制(父子、子孙等)，不用一层层传递。</p><blockquote><p>安装pubsub：npm install –save pubsub-js</p><p>引入：import PubSub from ‘pubsub-js’</p></blockquote><ul><li><p>订阅消息：subscribe</p></li><li><p>发布消息：publish</p></li></ul><p><strong>订阅消息</strong></p><p>类似绑定事件监听，调用事件处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;消息名&#x27;</span>，回调函数(msg,data));</span><br></pre></td></tr></table></figure><p><strong>发布消息</strong></p><p>类似提示触发事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">PubSub</span>.<span class="title function_">publis</span>(<span class="string">&#x27;消息名&#x27;</span>，传递的数据)</span><br></pre></td></tr></table></figure><h3 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a><strong>Slot</strong></h3><p>slot=插槽</p><p>把标签传递过去，属性也会一起传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 子组件：定义插槽</span><br><span class="line">&lt;slot name=&quot;checkA11&quot;&gt;&lt;/slot&gt;  </span><br><span class="line"></span><br><span class="line">// 父组件：传递标签   通过属性slot=&quot;xxx&quot;绑定标签到子组件那个插槽中 如：</span><br><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;isAllCheck&quot; slot=&quot;checkAll&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="vue项目两个ajax库"><a href="#vue项目两个ajax库" class="headerlink" title="vue项目两个ajax库"></a>vue项目两个ajax库</h2><h3 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h3><p>vue插件，vue1.x广泛使用</p><blockquote><p>安装：npm install vue-resource –save</p></blockquote><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueResource</span> <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"><span class="comment">// 声明使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueResource</span>)  <span class="comment">// 内部会给vm对象和组件对象添加一个属性： $http</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 发ajax请求获取数据</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://api.github.com/search/repositories?q=vu&amp;sort=stars&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(url).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 成功了</span></span><br><span class="line">        <span class="keyword">const</span> result = response.<span class="property">data</span>;</span><br><span class="line">        <span class="comment">// 得到最受欢迎的repo</span></span><br><span class="line">        <span class="keyword">const</span> mostRepo = result.<span class="property">items</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">repoUrl</span> = mostRepo.<span class="property">html_url</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">repoName</span> = mostRepo.<span class="property">name</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>通用请求库 推荐   vue2.x广泛使用</p><blockquote><p>安装： npm install axios –save</p></blockquote><p><strong>使用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用axios发送ajax请求</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://api.github.com/search/repositories?q=vu&amp;sort=stars&#x27;</span></span><br><span class="line">axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>( </span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 成功了</span></span><br><span class="line">    &#125;</span><br><span class="line">).<span class="title function_">catch</span>(</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="ui组件库"><a href="#ui组件库" class="headerlink" title="ui组件库"></a>ui组件库</h2><h3 id="Mint-Ul"><a href="#Mint-Ul" class="headerlink" title="Mint Ul:"></a><strong>Mint Ul:</strong></h3><ul><li>主页: <a href="http://mint-ui.github.io/#!/zh-cn">http://mint-ui.github.io/#!/zh-cn</a></li><li>说明：饿了么开源的基于vue 的移动端uI组件库</li></ul><blockquote><p>安装：npm install –save mint-ui</p></blockquote><p>修改 babel 配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;transform-runtime&quot;</span>,</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&quot;component&quot;</span>, </span><br><span class="line">     [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;mint-ui&quot;</span>,</span><br><span class="line"><span class="string">&quot;style&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 注册成标签(全局注册)</span><br><span class="line">import &#123;Button&#125; from &#x27;mint-ui&#x27;</span><br><span class="line">Vue.component(Button.name, Button)  // Button.name 即标签使用默认原标签名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;mt-button @click=&quot;handleClick&quot; type=&quot;primary&quot; style=&quot;width: 100%&quot;&gt;Test&lt;/mt-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;Toast&#125; from &#x27;mint-ui&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">handleClick () &#123;</span><br><span class="line">Toast(&#x27;点击了测试&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Elment"><a href="#Elment" class="headerlink" title="Elment"></a><strong>Elment</strong></h3><p>主页: <a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></p><p>说明：饿了么开源的基于vue的PC端u组件库</p><blockquote><p>安装：npm install element-ui –save</p></blockquote><p><strong>使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// main.js引入</span><br><span class="line">import ElementUI from &#x27;element-ui&#x27;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line">// .vue里使用</span><br><span class="line">&lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><blockquote><p>安装: npm install vue-router –save</p></blockquote><ul><li>编写路由模块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 路由器模块  ./src/router/index.js</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// n个路由</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/about&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>引入路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/main.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>  <span class="comment">// 路由器</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;  <span class="comment">// 配置对象的属性名都是一些确定的名称，不能随便修改</span></span><br><span class="line">  <span class="attr">router</span>:router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// .vue</span><br><span class="line">&lt;!--生成路由链接--&gt;</span><br><span class="line">&lt;router-link to=&quot;/about&quot; class=&quot;list-group-item&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/home&quot; class=&quot;list-group-item&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--显示当前组件--&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置路由文件 ./src/router/index.js</span></span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, </span><br><span class="line">    <span class="attr">component</span>: home, </span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// path: &#x27;/home/news&#x27;  或者简化写法</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">News</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Message</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/home/news&#x27;</span>  <span class="comment">// 默认使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]  </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// .vue 使用</span></span><br><span class="line">&lt;router-link to=<span class="string">&quot;/home/news&quot;</span>&gt;<span class="title class_">News</span>&lt;/router-link&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line">&lt;router-view&gt;&lt;/route-view&gt;</span><br></pre></td></tr></table></figure><h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><h4 id="路径携带"><a href="#路径携带" class="headerlink" title="路径携带"></a><strong>路径携带</strong></h4><ul><li>配置路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>: <span class="string">&#x27;mdetail/:id&#x27;</span>, <span class="comment">// :xx来占位</span></span><br><span class="line"><span class="attr">component</span>: <span class="title class_">MessageDetail</span></span><br></pre></td></tr></table></figure><ul><li> 路由路径传递参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;`/home/message/mdetail/$&#123;m.id&#125;`&quot;</span>&gt;&#123;&#123;m.<span class="property">title</span>&#125;&#125;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><ul><li>路由组件读取参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $route 代表当前路由</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br></pre></td></tr></table></figure><h4 id="属性携带数据"><a href="#属性携带数据" class="headerlink" title="属性携带数据"></a><strong>属性携带数据</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view :msg=&quot;msg&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><ul><li>路由组件接收</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">msg: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h3><p>路由使用栈来管理。</p><p>使用：$router.xxx(‘’);</p><ul><li>push()   点击路由链接(可回退当前路由)</li><li>replace()  新路由替换当前路由(不可返回当前路由界面)</li><li>back()  返回上一记录的路由</li><li>go() 前进上一记录的 路由  go(-1) =返回上一记录的路由</li></ul><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p><strong>Object.defineProperty(obj,’属性名’，{…})</strong>;  定义属性</p><p>{…}内相关：</p><ul><li>configurable:是否可以重新定义</li><li>enumerable:是否可以枚举</li><li>value:初始值</li><li>writable:是否可以修改属性值</li><li>get:回调函数，根据其它相关的属性动态计算得到当前属性值</li><li>set:回调函数，监视当前属性值的变化，更新其它相关的属性值</li></ul><p> <strong>Object.keys(obj);</strong>  获取对象所有属性。</p><p><strong>obj.hasOwnProperty(‘属性’);</strong> 判断对象自身是否有该属性。</p><h3 id="DocumentFragment"><a href="#DocumentFragment" class="headerlink" title="DocumentFragment"></a>DocumentFragment</h3><p>文档碎片，高效批量更新多个节点</p><p>Document：对应显示的页面，包含n个element  一旦更新document内部某个元素，界面更新</p><p>DocumentFragment：内存中保存n个element容器对象(不与界面关联)，更新fragment中某个element，界面</p><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;ul id=<span class="string">&quot;fragment_test&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js使用documentFragment</span></span><br><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fragment_test&#x27;</span>)<span class="comment">// 获取ul元素</span></span><br><span class="line"><span class="comment">// 1创建 fragment</span></span><br><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line"><span class="comment">// 2取出xx节点中所有子节点保存到fragment</span></span><br><span class="line"><span class="keyword">let</span> child;</span><br><span class="line"><span class="keyword">while</span>(child = ul.<span class="property">firstchi1d</span>)&#123; <span class="comment">// 一个节点只能有一个父亲</span></span><br><span class="line">    fragment.<span class="title function_">appendchild</span>(child); <span class="comment">// 1-从ul移除，2-添加为fragment子节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3更新fragment中子节点</span></span><br><span class="line"><span class="comment">//Array.prototype.slice.call(xx) 将伪数组xx调用数组中slice方法。</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(fragment.<span class="property">childNodes</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node.<span class="property">nodeType</span> === <span class="number">1</span>)&#123; <span class="comment">// 元素节点</span></span><br><span class="line">        node.<span class="property">textContent</span> = <span class="string">&quot;xiaoai&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)  </span><br><span class="line"><span class="comment">// 4将fragment插入xx节点</span></span><br><span class="line">ul.<span class="title function_">appendChild</span>(fragment);</span><br></pre></td></tr></table></figure><p><strong>补充1</strong></p><ul><li><p>slice() 方法可从已有的数组中返回选定的元素。</p></li><li><p>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</p></li></ul><blockquote><p>slice() 方法不会改变原始数组。</p></blockquote><p><strong>补充2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">nodeType</span></span><br></pre></td></tr></table></figure><p>存在 12 种不同的节点类型，其中可能会有不同节点类型的子节点：</p><table><thead><tr><th align="left">节点类型</th><th align="left">描述</th><th align="left">子节点</th><th></th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Element</td><td align="left">代表元素</td><td>Element, Text, Comment, ProcessingInstruction, CDATASection, EntityReference</td></tr><tr><td align="left">2</td><td align="left">Attr</td><td align="left">代表属性</td><td>Text, EntityReference</td></tr><tr><td align="left">3</td><td align="left">Text</td><td align="left">代表元素或属性中的文本内容。</td><td>None</td></tr><tr><td align="left">4</td><td align="left">CDATASection</td><td align="left">代表文档中的 CDATA 部分（不会由解析器解析的文本）。</td><td>None</td></tr><tr><td align="left">5</td><td align="left">EntityReference</td><td align="left">代表实体引用。</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td align="left">6</td><td align="left">Entity</td><td align="left">代表实体。</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td align="left">7</td><td align="left">ProcessingInstruction</td><td align="left">代表处理指令。</td><td>None</td></tr><tr><td align="left">8</td><td align="left">Comment</td><td align="left">代表注释。</td><td>None</td></tr><tr><td align="left">9</td><td align="left">Document</td><td align="left">代表整个文档（DOM 树的根节点）。</td><td>Element, ProcessingInstruction, Comment, DocumentType</td></tr><tr><td align="left">10</td><td align="left">DocumentType</td><td align="left">向为文档定义的实体提供接口</td><td>None</td></tr><tr><td align="left">11</td><td align="left">DocumentFragment</td><td align="left">代表轻量级的 Document 对象，能够容纳文档的某个部分</td><td>Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference</td></tr><tr><td align="left">12</td><td align="left">Notation</td><td align="left">代表 DTD 中声明的符号。</td><td>None</td></tr></tbody></table><p>对于每种节点类型，nodeName 和 nodeValue 属性的返回值：</p><table><thead><tr><th align="left">节点类型</th><th align="left">nodeName 返回</th><th align="left">nodeValue 返回</th><th></th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Element</td><td align="left">元素名</td><td>null</td></tr><tr><td align="left">2</td><td align="left">Attr</td><td align="left">属性名称</td><td>属性值</td></tr><tr><td align="left">3</td><td align="left">Text</td><td align="left">#text</td><td>节点的内容</td></tr><tr><td align="left">4</td><td align="left">CDATASection</td><td align="left">#cdata-section</td><td>节点的内容</td></tr><tr><td align="left">5</td><td align="left">EntityReference</td><td align="left">实体引用名称</td><td>null</td></tr><tr><td align="left">6</td><td align="left">Entity</td><td align="left">实体名称</td><td>null</td></tr><tr><td align="left">7</td><td align="left">ProcessingInstruction</td><td align="left">target</td><td>节点的内容</td></tr><tr><td align="left">8</td><td align="left">Comment</td><td align="left">#comment</td><td>注释文本</td></tr><tr><td align="left">9</td><td align="left">Document</td><td align="left">#document</td><td>null</td></tr><tr><td align="left">10</td><td align="left">DocumentType</td><td align="left">文档类型名称</td><td>null</td></tr><tr><td align="left">11</td><td align="left">DocumentFragment</td><td align="left">#document 片段</td><td>null</td></tr><tr><td align="left">12</td><td align="left">Notation</td><td align="left">符号名称</td><td>null</td></tr></tbody></table><p>NodeTypes - Named Constants</p><table><thead><tr><th>NodeType</th><th>Named Constant</th></tr></thead><tbody><tr><td>1</td><td>ELEMENT_NODE</td></tr><tr><td>2</td><td>ATTRIBUTE_NODE</td></tr><tr><td>3</td><td>TEXT_NODE</td></tr><tr><td>4</td><td>CDATA_SECTION_NODE</td></tr><tr><td>5</td><td>ENTITY_REFERENCE_NODE</td></tr><tr><td>6</td><td>ENTITY_NODE</td></tr><tr><td>7</td><td>PROCESSING_INSTRUCTION_NODE</td></tr><tr><td>8</td><td>COMMENT_NODE</td></tr><tr><td>9</td><td>DOCUMENT_NODE</td></tr><tr><td>10</td><td>DOCUMENT_TYPE_NODE</td></tr><tr><td>11</td><td>DOCUMENT_FRAGMENT_NODE</td></tr><tr><td>12</td><td>NOTATION_NODE</td></tr></tbody></table><h2 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-1基础</title>
      <link href="/aiyblog/2020/11/26/Vue-1%E5%9F%BA%E7%A1%80/"/>
      <url>/aiyblog/2020/11/26/Vue-1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><p>下载vuejs文件导入或者：</p><ul><li>1–安装node.js，可以安装nrm  管理下载镜像</li><li>2–创建静态工程项目，进入项目目录cmd</li><li>3–npm init初始化</li><li>3–npm instal vue –save（本地安装，-g为全局安装）安装vue</li><li>4–编写代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:v-on=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;vue&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--vue对象的heml的模板：待渲染的视图--&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!--双向绑定，v-model：数据模型--&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;num&quot;&gt;</span><br><span class="line">    &lt;!--v-on:事件名=js表达式、方法名，定义一个事件--&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;js表达式：点我啊&quot; v-on:click=&quot;num++&quot;&gt;&lt;!--js表达式--&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;方法名：点我啊&quot; v-on:click=&quot;incr&quot;&gt;&lt;!--方法名--&gt;</span><br><span class="line">    &lt;!--花括号：js表达式--&gt;</span><br><span class="line">    &lt;h1&gt;大家好，我是&#123;&#123;name&#125;&#125;,有&#123;&#123;num&#125;&#125;位妹子迷恋我&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;vue算式1+3=&#123;&#123;1+3&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!--初始化的vue实例：数据模型  作用域：id为app的标签内 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;, //element，选择器</span><br><span class="line">        data:&#123;/*定义数据模型*/</span><br><span class="line">            name:&quot;liudehua&quot;,</span><br><span class="line">            num:100</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            incr()&#123;</span><br><span class="line">                this.decr();//this可以调用该模型任何属性</span><br><span class="line">            &#125;,</span><br><span class="line">            decr()&#123;</span><br><span class="line">                this.num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;//加载数据函数</span><br><span class="line">            //可以通过ajax发送异步请求获取后台数据</span><br><span class="line">            this.num = 10000;//这里让其num等于10000，即初始访问，上面num数据等于10000，</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>**生命周期 **每个Vue实例在被创建时都要经过一系列的初始化过程 :创建实例，装载模板，渲染模板等等。Vue为生命周期中的每个状态都设置了钩子函数(监听函数)。每当Vue实例处于不同的生命周期时，对应的函数就会被触发调用。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令(Directives) 是带有<code>v-</code>前缀的特殊特性。指令特性的预期值是:单个JavaScript表达式。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。例如v-on，代表绑定事件。</p><h3 id="1-插值表达式"><a href="#1-插值表达式" class="headerlink" title="1-插值表达式"></a>1-插值表达式</h3><p><code>&#123;&#123;js表达式、数据模型&#125;&#125;</code>: 表达式</p><blockquote><p>该表达式支持JS语法，可以调用js内置函数(必须有返回值)<br>表达式必须有返回结果。例如1 + 1,没有结果的表达式不允许使用，如: vara= 1 + 1;<br>可以直接获取Vue实例中定义的数据或函数</p></blockquote><p><code>v-text和v-html</code> v-xxxx=”数据模型” 可以用来获取数据 相当于.innerHTML和.innerText  v-html：把html解析 v-text：不解析html  一般使用v-text 防止脚本侵入</p><p><code>v-model</code></p><blockquote><p>刚才的v-text和v-html可以看做是单向绑定，数据影响了视图渲染，但是反过来就不行。<br>v-model是双向绑定，视图(View) 和模型(Model) 之间会互相影响。<br>既然是双向绑定，-定是在视图中可以修改数据，这样就限定了视图的元素类型。目前v-modeI的可使用元素有:<br>input<br>select<br>textarea<br>checkbox<br>radio<br>components (Vue中的自定义组件)<br>基本上除了最后一项，其它都是表单的输入项。</p></blockquote><blockquote><p>多个CheckBox对应一个model时， model的类型是一个数组， 单个checkbox,默认是boolean类型<br>radio对应的值是input的value值<br>text和textarea默认对应的model是字符串<br>select单选对应字符串，多选对应也是数组</p></blockquote><h3 id="2-v-on"><a href="#2-v-on" class="headerlink" title="2-v-on"></a>2-v-on</h3><p>用于给页面元素绑定事件</p><p><strong>语法</strong>:v-on:事件名=”js片段或图数名”</p><p>另外，事件绑定可以简写，例如v-on:click=’ add’可以简写为@click add’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">`按键修饰符：`全部的按键别名: </span><br><span class="line">.ent</span><br><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获&#x27;删除&quot;和“退格”键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br><span class="line"></span><br><span class="line">组合按键：.ctrl\alt\shift.x.x.x....  </span><br><span class="line">事件修饰符：在事件处理程序中调用event.preventDefaultO)或event.stopPropagation()是非常常见的需求。</span><br><span class="line">尽管我们可以在方法中轻松实现这点，但更好的方式是:方法只有纯粹的数据逻辑，而不是去处理DOM事件细节。</span><br><span class="line">为了解决这个问题，Vue.js 为v-on提供了事件修饰符。修饰符是由点开头的指令后缀来表示的。</span><br><span class="line">.stap:阻止事件冒泡到父元素</span><br><span class="line">.prevent:阻止默认事件发生*</span><br><span class="line">.capture:使用事件捕获模式</span><br><span class="line">.self:只有元素自身触发事件才执行。 (冒泡或捕获的都不执行)</span><br><span class="line">.once:只执行一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">按键修饰符：全部的按键别名: </span><br><span class="line">.ent</span><br><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获&#x27;删除&quot;和“退格”键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br><span class="line">组合按键： .ctrl\alt\shift.x.x.x....  </span><br></pre></td></tr></table></figure><h3 id="3-v-for"><a href="#3-v-for" class="headerlink" title="3-v-for"></a>3-v-for</h3><p><strong>语法</strong>:v-for=”item in items”</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>html模板<ul><li><code>&#123;&#123;&#125;&#125;</code>：插值表达式，声明式渲染，单向，会出现插值闪烁  v-text：把所有的内容当做文本渲染  v-html：识别js html css渲染</li><li>v-model:双向渲染，在表单元素中使用。</li><li>v-on:事件名：v-on:click=”js表达式或者函数名”  @click（点击事件）   @contextMenu(右键事件  .prevent:禁用默认事件)  @keyup(键盘事件 回车==.enter(或13)</li><li>钩子函数：初始化（new Vue()） 模板加载 视图渲染 更新 销毁 。 created：加载数据模型  mounted：渲染 updated：更新 destroyed：销毁</li><li>v-for: 遍历集合或者对象 <ul><li>v-for=”(item,index) in items”</li><li>v-for=”(val, key, index) in user”</li></ul></li></ul></li><li>vue实例<ul><li>el: “#app” // vue实例的作用范围</li><li>data: {数据模型}</li><li>methods: {定义方法}</li><li>created(){加载数据}</li></ul></li></ul><p><strong>学习的代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-on</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1----vue对象的heml的模板：待渲染的视图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3----花括号：js表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>大家好，我是&#123;&#123;name&#125;&#125;,有&#123;&#123;num&#125;&#125;位妹子迷恋我<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>vue算式：1+3=&#123;&#123;1+3&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4----双向绑定，v-model：视图(View) 和模型(Model) 之间会互相影响。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-on:事件名=js表达式、方法名，定义一个事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js表达式：点我啊&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span><span class="comment">&lt;!--添加事件：js表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;方法名：点我啊&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;incr&quot;</span>&gt;</span><span class="comment">&lt;!--添加事件：方法名--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--花括号引用方法：需要带括号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>vue算式：1+3=&#123;&#123;sum()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>大家好，我是<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;name&quot;</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">span</span>&gt;</span>,有&#123;&#123;num&#125;&#125;位妹子迷恋我<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>大家好，我是<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">span</span>&gt;</span>,有&#123;&#123;num&#125;&#125;位妹子迷恋我<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--张学友为默认值，当网络慢时没有立即加载到数据就会显示张学友，若使用&#123;&#123;name&#125;&#125;，当网络慢时会显示“&#123;&#123;name&#125;&#125;”，即原样输出  也叫插值闪烁 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-html：把html解析     v-text：不解析html--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一般使用v-text 防止脚本侵入--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ios&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span>&gt;</span>ios</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span>&gt;</span>java</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span>&gt;</span>php</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>您选择了：&#123;&#123;language.join(&quot;,&quot;)&#125;&#125;<span class="comment">&lt;!--.join(&quot;,&quot;)把数组中的所有元素转换为一个字符串：--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-on简写， --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on简写 @xxx&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;incr&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;鼠标右击事件&quot;</span> @<span class="attr">contextMenu</span>=<span class="string">&quot;incr&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;鼠标右击事件,禁止右击菜单弹出&quot;</span> @<span class="attr">contextMenu</span>=<span class="string">&quot;incr2($event)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;鼠标右击事件,禁止右击菜单弹出--vue写法&quot;</span> @<span class="attr">contextMenu.prevent</span>=<span class="string">&quot;incr&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;回车即提交--13&quot;</span>  @<span class="attr">keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;回车即提交--enter&quot;</span>  @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;回车即提交--组合按键alt.t&quot;</span>  @<span class="attr">keyup.alt.t</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- on-for:遍历 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ur</span>&gt;</span><span class="comment">&lt;!--index表示下标，+1由于index从0开始 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in users&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;-&#123;&#123;user.name&#125;&#125;-&#123;&#123;user.gender&#125;&#125;-&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ur</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ur</span>&gt;</span><span class="comment">&lt;!--index表示下标，+1由于index从0开始 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;val in user&quot;</span>&gt;</span>&#123;&#123;val&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ur</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ur</span>&gt;</span><span class="comment">&lt;!--index表示下标，+1由于index从0开始 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(val,key,index) in user&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;-&#123;&#123;key&#125;&#125;:&#123;&#123;val&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ur</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ur</span>&gt;</span><span class="comment">&lt;!--提供key可以提供检索--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(val,key,index) in user&quot;</span> <span class="attr">:key-</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;-&#123;&#123;key&#125;&#125;:&#123;&#123;val&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ur</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--引入vue,不能简写标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2----初始化的vue实例：数据模型  作用域：id为app的标签内 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>, <span class="comment">//element，选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="comment">/*定义数据模型*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;&lt;span style=&#x27;color: red;&#x27;&gt;liudehua&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>:<span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">language</span>:[],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;柳岩&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;峰哥&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;范冰冰&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>,<span class="attr">age</span>:<span class="number">24</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;刘亦菲&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;古力娜扎&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">user</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;柳岩&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;<span class="comment">/*方法*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">incr</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">decr</span>();<span class="comment">//this可以调用该模型任何</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">decr</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">sum</span>(<span class="params"></span>)&#123;<span class="comment">/*花括号引入的方法，需要有返回值*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="number">1</span>+<span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">incr2</span>(<span class="params">ev</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                ev.<span class="title function_">preventDefault</span>();<span class="comment">/*进制默认事件*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">submit</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;你已经提交了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>)&#123;<span class="comment">/*加载数据函数*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//可以通过ajax向后端请求数据初始化</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">10000</span>; <span class="comment">//这里有这个函数初始值显示10000，没有该函数，初始显示100</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200812232717120-911141221.png" alt="代码结果"></p><h2 id="v-xx等常用命令"><a href="#v-xx等常用命令" class="headerlink" title="v-xx等常用命令"></a>v-xx等常用命令</h2><p><strong>v-if</strong>  false=不进行渲染<br><strong>v-show</strong> false=渲染了只是添加了<code>display: none;</code></p><blockquote><p>一般使用<code>v-if</code>，因为和java if类似还有else if可用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-on</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xmlns:v-bind</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1----vue对象的heml的模板：待渲染的视图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-if：判断<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>v-if--你看到了，所以现在是ture<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>v-show--你看到了，所以现在是ture<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击改变为false&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;show=!show&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-else-if和v-else<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123;random&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击生成随机数&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;random=Math.random()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;random&gt;0.75&quot;</span>&gt;</span>大于0.75<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;random&gt;0.25&quot;</span>&gt;</span>大于0.25<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>小于0.25<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!-- v-else一定要紧跟带v-if或v-else-if 属性的标签后面--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-if和v-for一起使用：只显示女生<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ur</span>&gt;</span><span class="comment">&lt;!--index表示下标，+1由于index从0开始 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender==&#x27;女&#x27;&quot;</span>  <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;-&#123;&#123;user.name&#125;&#125;-&#123;&#123;user.gender&#125;&#125;-&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ur</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>v-bind：表示该属性的值为一个动态值<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;store&quot;</span>&gt;</span><span class="comment">&lt;!--双向绑定，可以通过该text修改store的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active: store &gt;0&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;加入购物车&quot;</span>&gt;</span><span class="comment">&lt;!--当store的值大于0，添加红色边框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active: store &gt;0&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;加入购物车-v-bind可以省略&quot;</span>&gt;</span><span class="comment">&lt;!--v-bind可以省略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active: store &gt;0&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span> <span class="attr">value</span>=<span class="string">&quot;加入购物车-动态class可以和静态class共同存在&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>computed计算属性：可以向普通值一样使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。</span></span><br><span class="line"><span class="comment">        然而，不同的是`计算属性是会基于它们的依赖进行缓存的`。计算属性只有在它的相关依赖发生改变时才会重新求值。</span></span><br><span class="line"><span class="comment">        这就意味着只要birthday还没有发生改变，多次访问birthday 计算属性会立即返回之前的计算结果，而不必再次执行函数。</span></span><br><span class="line"><span class="comment">        方法每次都必须进行计算。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;new Date(birthday).getFullYear()+&quot;年&quot;+new Date(birthday).getMonth()+&quot;月&quot;+new Date(birthday).getDay()+&quot;日&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>通过方法：&#123;&#123;birth()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>通过计算属性：&#123;&#123;birth1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--计算属性可以向数据模型一样使用--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>watch监听：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--引入vue,不能简写标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2----初始化的vue实例：数据模型  作用域：id为app的标签内 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>, <span class="comment">//element，选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="comment">/*定义数据模型*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">show</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*&lt;h1&gt;v-else-if和v-else&lt;/h1&gt;*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">random</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/* &lt;h1&gt;v-if和v-for一起：&lt;/h1&gt;  只显示女生*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;柳岩&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;峰哥&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;范冰冰&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>,<span class="attr">age</span>:<span class="number">24</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;刘亦菲&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;古力娜扎&#x27;</span>,<span class="attr">gender</span>:<span class="string">&#x27;女&#x27;</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*  &lt;h1&gt;v-bind：表示该属性的值为一个动态值&lt;/h1&gt;*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">value</span>:<span class="string">&quot;这按钮是一个动态值&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">store</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">birthday</span>:<span class="number">1523423456342</span>, <span class="comment">//毫秒值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">search</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;<span class="comment">/*方法*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">birth</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span>  date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">this</span>.<span class="property">birthday</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> date.<span class="title function_">getFullYear</span>()+<span class="string">&quot;年&quot;</span>+date.<span class="title function_">getMonth</span>()+<span class="string">&quot;月&quot;</span>+date.<span class="title function_">getDay</span>()+<span class="string">&quot;日&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;<span class="comment">/*计算属性：里面可以定义方法，方法必须有返回值，计算属性可以向数据模型一样使用*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">birth1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span>  date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="variable language_">this</span>.<span class="property">birthday</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> date.<span class="title function_">getFullYear</span>()+<span class="string">&quot;年&quot;</span>+date.<span class="title function_">getMonth</span>()+<span class="string">&quot;月&quot;</span>+date.<span class="title function_">getDay</span>()+<span class="string">&quot;日&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>:&#123;<span class="comment">/*监听*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">search</span>(<span class="params">newVal1,oldVal</span>)&#123;<span class="comment">/*监听的方法名要和数据模型一致，监听search也要叫searchc*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal1,oldVal);<span class="comment">/*参数1：newVal1=新值 参数2：oldVal=旧值*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//可以通过ajax发送请求到后台接口查询然后渲染到页面</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200814114113135-1765137807.png"></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>component<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在vue里，所有的vue实例都是组件。</span></span><br><span class="line"><span class="comment">    一旦全局注册，就意味着即便以后你不再使用这个组件，它依然会随着Vue的加载而加载。</span></span><br><span class="line"><span class="comment">    因此，对于一些并不频繁使用的组件，我们会采用局部注册。</span></span><br><span class="line"><span class="comment">    我们先在外部定义一个对象，结构与创建组件时传递的第二个参数一致:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>全局组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span><span class="comment">&lt;!--组件不会相互影响--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>局部组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello1</span>&gt;</span><span class="tag">&lt;/<span class="name">hello1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件通信：父向子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.父组件使用子组件时，在父模板中子组件标签自定义属性(属性名任意，属性值为要传递的数据)</span></span><br><span class="line"><span class="comment">        2.子组件通过props接收父组件数据，通过自定义属性的属性名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter2</span> <span class="attr">:num2</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">counter2</span>&gt;</span><span class="comment">&lt;!--:表示v-bond，动态值   1.父组件使用子组件时，自定义属性(属性名任意，属性值为要传递的数据)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter3</span> <span class="attr">:num3</span>=<span class="string">&quot;num3&quot;</span> <span class="attr">title</span>=<span class="string">1</span>&gt;</span><span class="tag">&lt;/<span class="name">counter3</span>&gt;</span><span class="comment">&lt;!--:表示v-bond，动态值  title=表示静态的值，会解析为字符串)--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件通信：子向父<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter4</span> <span class="attr">:num4</span>=<span class="string">&quot;num4&quot;</span> @<span class="attr">incr1</span>=<span class="string">&quot;incr()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">counter4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义一个全局属性  子组件  可以在任何vue实例的模板下都可以使用   template根标签只能有一个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;counter&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;button @click=&#x27;num++&#x27;&gt;点我呀，点我加1。--全局属性不相互影响&#123;&#123;num&#125;&#125;&lt;/button&gt;&quot;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;<span class="comment">/*方法：返回数据模型</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                由于这里设计为方法，所以操作组件不会相互影响，</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                所以如果是data:&#123;num:0&#125;操作的是对象，每次都一样的对象，则会相互影响*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">num</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义一个局部组件  子组件 放在哪个vue实例，就可以在哪个vue实例模板下使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> hello =&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;div&gt;打个招呼：我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&quot;刘德华&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*组件通信</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1.父向子通信: a.父自定义属性，属性名随便写，属性值是要传递的数据模型 b.子通过props接收，参数名是自定义属性的属性名[&quot;属性名&quot;]或&#123;属性名:&#123;type default required&#125;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2.子向父通信: a.父自定义事件，事件名随便写，属性值是要传递的方法     b.子定义事件调用子自己的方法，子的方法中通过this.$emit(&quot;自定义事件名&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*父向子通信*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;counter2&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;button @click=&#x27;num2++&#x27;&gt;组件通信：父向子num2-&#123;&#123;num2&#125;&#125;&lt;/button&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:[<span class="string">&quot;num2&quot;</span>]   <span class="comment">/*2.子组件通过props接收父组件数据，通过自定义属性的属性名*/</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;counter3&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;button @click=&#x27;num3++&#x27;&gt;组件通信：父向子num3-&#123;&#123;num3&#125;&#125;&lt;/button&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num3</span>:&#123;<span class="comment">/*props:内属性可以这样写*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">Number</span>, <span class="comment">/*type 可以是下列原生构造函数中的一个:String、Number、Boolean、Array、Object、Date、Function、Symbol*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">default</span>:<span class="number">0</span>, <span class="comment">//默认值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">request</span>:<span class="literal">false</span> <span class="comment">/*表示不是必须的*/</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">Number</span><span class="comment">/*限定了title的属性为number，但 &lt;counter3 :num3=&quot;num3&quot; title=1&gt;&lt;/counter3&gt;中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                title=1，1也会解析为字符串，所以会报类型错误*/</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*子向父通信：通过方法来操作其数据模型实现通信*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;counter4&quot;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">&quot;&lt;button @click=&#x27;subIncr&#x27;&gt;组件通信：子向父num4-&#123;&#123;num4&#125;&#125;&lt;/button&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">props</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num4</span>:&#123;<span class="comment">/*props:内属性可以这样写*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>:<span class="title class_">Number</span>, <span class="comment">/*type 可以是下列原生构造函数中的一个:String、Number、Boolean、Array、Object、Date、Function、Symbol*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">default</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">subIncr</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&quot;incr1&quot;</span>)<span class="comment">/*相当于模板中父传过来的方法*/</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*父组件*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>:<span class="number">0</span>, <span class="comment">//这里定义data和组件红定义是不同的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num3</span>:<span class="string">&quot;abc&quot;</span>, <span class="comment">/*父向子传递的不是对应的类型也可正常显示，但控制台会报类型错误*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num4</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123; <span class="comment">//在这里引用子组件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hello1</span>:hello  <span class="comment">//hello1=使用时标签名   hello=绑定到定义的某个组件</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">incr</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">num4</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200814114817849-1729930880.png"></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><blockquote><p>使用vue-router和vue可以非常方便的实现复杂单页应用的动态路由功能。下载与安装：<br>官网: <a href="https://router.vuejs.org/zh-cn/">https://router.vuejs.org/zh-cn/</a><br>使用npm安装:npm install vue-router –save</p></blockquote><p>登录组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const loginForm = &#123;//组件内的template只能有一个根标签</span><br><span class="line">    template:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;登录页&lt;/h1&gt;</span><br><span class="line">            用户名：&lt;input type=&quot;text&quot;&gt;&lt;br/&gt;</span><br><span class="line">            密&amp;emsp;码：&lt;input type=&quot;password&quot;&gt;&lt;br/&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;登录&quot;&gt;&lt;br/&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const registerForm = &#123;//组件内的template只能有一个根标签</span><br><span class="line">    template:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;注册页&lt;/h1&gt;</span><br><span class="line">            用&amp;ensp;户&amp;ensp;名：&lt;input type=&quot;text&quot;&gt;&lt;br/&gt;</span><br><span class="line">            密&amp;emsp;&amp;emsp;码：&lt;input type=&quot;password&quot;&gt;&lt;br/&gt;</span><br><span class="line">            确认密码：&lt;input type=&quot;password&quot;&gt;&lt;br/&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;注册&quot;&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">    &lt;!--vue-router简介和安装</span><br><span class="line">        使用vue-router和vue可以非常方便的实现复杂单页应用的动态路由功能。</span><br><span class="line">        官网: https://router.vuejs.org/zh-cn/</span><br><span class="line">        使用npm安装:“npm install vue-router --save --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;span&gt;&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;&lt;/span&gt; &lt;!-- &lt;router-link to=&quot;/login&quot;&gt; 标签用来绑定路由路径--&gt; </span><br><span class="line">        &lt;span&gt;&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;&lt;/span&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt; &lt;!-- router绑定的组件在该位置显示 即锚点 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../node_modules/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt; &lt;!-- 引入router --&gt;</span><br><span class="line">&lt;script src=&quot;js/login.js&quot;&gt;&lt;/script&gt; &lt;!-- 引入login组件 --&gt;</span><br><span class="line">&lt;script src=&quot;js/register.js&quot;&gt;&lt;/script&gt; &lt;!-- 引入regster组件 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    //创建router  定义router</span><br><span class="line">    const router = new VueRouter(&#123;</span><br><span class="line">        routes:[</span><br><span class="line">            &#123;</span><br><span class="line">                path:&quot;/login&quot;, //路由路径，必须以/开头</span><br><span class="line">                component:loginForm,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path:&quot;/register&quot;,</span><br><span class="line">                component:registerForm,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        // components:&#123; //路由会加载组件，可以不用引入</span><br><span class="line">        //     loginForm,</span><br><span class="line">        //     registerForm</span><br><span class="line">        // &#125;,</span><br><span class="line">        router,  //添加router进来，即绑定router 和上面定义的router名称要一致，名称必须交router</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200814120537873-1333498626.png"><br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200814120550742-461924979.png"></p><h2 id="ui库"><a href="#ui库" class="headerlink" title="ui库"></a>ui库</h2><p>Vue虽然会帮我们进行视图的渲染，但样式还是由我们自己来完成。</p><ul><li>一些现成的Ul组件，拿来即用，常见的例如: <ul><li>BootStrap</li><li>LayUI</li><li>EasyUI</li><li>ZUI</li></ul></li><li>这些UI组件的基因天生与Vue不合，因为他们更多的是利用DOM操作，借助于jQuery实现，而不是MVVM的思想。目前与Vue吻合的UI框架也非常的多，国内比较知名的如: <ul><li>element-ui: 饿了么出品</li><li>i-view: 某公司出品</li></ul></li></ul><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>ajax请求框架 Vue官方推荐的ajax请求框架</p><p><strong>axios：</strong>异步查询数据，首先想起的肯定是jQuery。但jQuery与mvvm的思想不吻合，而且ajax只是jQuery的一-小部分。因此不可能为了发起ajax请求而去引用这么大的一个库。可用axios来发送异步请求。</p><p>Axios是一个基于promise的HTTP库，可以用在浏览器和node.js中<br>axios的github：<a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p><ul><li>1 首先就是引入axios,如果你使用es6,只需要安装axios模块之后引入：import axios from ‘axios’;<ul><li>安装方法：<code>npm install axios</code> 或 <code>bower install axios</code></li></ul></li><li>2 当然也可以用script引入<script src="https ://unpkg. com/axios/dist/axios.min.js"></script></li><li>3 也可以下载axios的js文件后引入</li></ul><p>axios的GET请求语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;/item/category/list?pid=0&quot;</span>) <span class="comment">// 请求路径和请求参数拼接</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="comment">// 成功回调函数</span></span><br><span class="line">     &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 失败回调函数</span></span><br><span class="line">     &#125;)</span><br><span class="line"><span class="comment">// 参数较多时，可以通过params来传递参数</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;/item/category/list&quot;</span>, </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">params</span>:&#123;  <span class="comment">//与post请求区别：get请求多参数需要添加params</span></span><br><span class="line">            <span class="attr">pid</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">resp</span>)&#123;&#125;)<span class="comment">// 成功时的回调 resp=response</span></span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>)&#123;&#125;)<span class="comment">// 失败时的回调</span></span><br></pre></td></tr></table></figure><p>axios的POST请求语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;/user&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">21</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">resp</span>)&#123;&#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>为方便起见，为所有支持的请求方法提供了别名</p><ul><li>axios.request(config)</li><li>axios.get(url[, config])</li><li>axios.delete(url[, config])</li><li>axios.head(urI[, config])</li><li>axios.post(url[, data[, config]])</li><li>axios.put(urI[, data[, config])</li><li>axios.patch(url[, data[, config]])</li></ul><h2 id="qs工具"><a href="#qs工具" class="headerlink" title="qs工具"></a>qs工具</h2><p> vue中json和字符串的相互转换</p><ul><li>下载qs工具 创建变量$qs<ul><li>import qs from ‘qs’</li><li>Vue.prototype.$qs = qs;</li></ul></li><li>this.$qs.stringify：json格式转为字符串  {name:zhansan,age:22} == name=zhansan&amp;age=22</li><li>this.$qs.parse：字符串转json name=zhansan&amp;age=22 == {name:zhansan,age:22}</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lucene初识</title>
      <link href="/aiyblog/2020/11/26/lucene%E5%88%9D%E8%AF%86/"/>
      <url>/aiyblog/2020/11/26/lucene%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p><strong>Lucene</strong> 基于java开发全文检索工具包</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>索引库—document(文档)—域（相当于属性，存 关键字:值）</p><ul><li>创建索引<ul><li>IndexWriter：创建索引库 参数1：打开目录   参数2：配置  <ul><li>IndexWriter  indexWriter =  new IndexWriter(FSDirectory.open(new File(“索引库磁盘路径”).toPath()),new IndexWriterConfig());</li></ul></li><li>Document：创建文档<ul><li> Document document = new Document();</li></ul></li><li>Field：创建域  参数1：域名称  参数2：域内容 参数3：是否存储<ul><li> Field field = new xxxField(“域名称”,域内容, Field.Store.YES或.NO);</li></ul></li><li>域添加到文档：document.add(域);  文档添加到索引库：indexWriter.addDocument(document);</li></ul></li><li>查询索引<ul><li>IndexReader：获取索引库<ul><li>IndexReader indexReader = DirectoryReader.open(FSDirectory.open(new File(“索引库磁盘路径”).toPath()));</li></ul></li><li>IndexSearcher：由索引库创建查询对象<ul><li>IndexSearcher indexSearcher = new IndexSearcher(indexReader);</li></ul></li><li>Query：创建具体查询<ul><li>Query query = new TermQuery(new Term(“content”,”spring”));//查询域名为content，域内容包含spring的</li></ul></li><li>TopDocs：执行查询获取topDocs即文档对象   参数1：查询对象  参数2：查询结果返回最大记录数<ul><li>TopDocs topDocs = indexSearcher.search(query, 10);<ul><li>System.out.println(“查询总记录数：”+topDocs.totalHits); //获取查询总记录数</li><li>ScoreDoc[] scoreDocs = topDocs.scoreDocs; //获取文档列表<ul><li>遍历scoreDocs可以获取文档编号id：int docID =  doc.doc;</li><li>通过id可查询文档： Document document = indexSearcher.doc(docID);<ul><li>通过文档获取域内容：document.get(“域名称”)</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>索引库操作<ul><li>优化：属性—是否分析（是否分词处理）、是否索引（索引方可查）、是否存储（存入文档，存入文档后field才可从document中取出）  根据不同数据要求创建不同的域</li><li>增加文档<ul><li>创建文档document，创建域field，域加入文档，文档加入索引库</li></ul></li><li>删除索引<ul><li>删除全部文档：indexWriter.deleteAll();</li><li>选择性删除：indexWriter.deleteDocuments(new Term(“name”,”apache”));//把域名为name，其值包含apache的document删除</li></ul></li><li>更新索引：先删除，后添加</li><li>查询索引：查询索引不同主要在于创建query对象，创建好相应query对象，其他操作一致<ul><li>Query子类–TermQuery： Query query = new TermQuery(new Term(“content”,”spring”));</li><li>Query子类–RangeQuery（范围查询）： Query query = LongPoint.newRangeQuery(“size”, 0l, 10000l);//最后一位为L表示long类型</li><li>QueryPaser查询：先分词，后查询<pre><code>- 导入jar包： lucene-queryparser-7.4.0.jar-  QueryParser queryParser = new QueryParser(&quot;name&quot;,new IKAnalyzer());    - 使用QueryPaser创建Query对象：Query query = queryParser.parse(&quot;待检索的一句话&quot;);</code></pre></li></ul></li></ul></li><li>IndexWriter和IndexReader对象使用完后都要进行关闭：.close();</li></ul><h2 id="lucene实现全文检索流程"><a href="#lucene实现全文检索流程" class="headerlink" title="lucene实现全文检索流程"></a>lucene实现全文检索流程</h2><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>1-下载lucene（就是一些jar包，需要使用那些就引入） 地址：<a href="http://lucene.apache.org/">http://lucene.apache.org/</a>—适应的jdk—创建java项目<br>2-需要的jar：</p><ul><li>lucene-analyzers-common-7.4.0.jar</li><li>lucene-core-7.4.0.jar</li><li>commons-io.jar</li></ul><p>1.<strong>创建索引</strong></p><ul><li>1–原始文档：要基于哪些数据来进行搜索，这些数据即原始文档。</li><li>2–构建文档对象：对应每个原始文档创建一个document对象—-每个document对象包含多个域—域中保存原始文档数据（域名称、域值）<br>  每个文档有唯一编号即文档id</li><li>3–分析文档：分词过程：空格拆分得单词列表—-单词统一转小写—-去除标点—-去除停用词（无意义的词）<br>  每个关键词封装一个term对象中，Term中包含两部分内容：关键词所在的域、关键词本身<br>  不同域拆分出相同关键词是不同Term。</li><li>4–创建索引：基于关键词列表创建一个索引，保存到索引库中。索引库中：索引、document对象、关键词、文档的对应关系<br>  <code>倒排索引结构:</code>通过词语找文档</li></ul><p>2.<strong>查询索引</strong></p><ul><li>1–用户查询接口：用户输入查询条件地方</li><li>2–关键词封装成一个查询对象（查询的域、关键词）</li><li>3–执行查询：根据查询关键词—-域搜索—-找到关键词—-根据关键词找到对应文档</li><li>4–渲染结果：根据文档id找到文档对象—-关键词高亮—-分页—-展示</li></ul><h3 id="创建索引步骤："><a href="#创建索引步骤：" class="headerlink" title="创建索引步骤："></a>创建索引步骤：</h3><p>1-创建director对象，指定索引库保存位置<br>2-基于directory对象创建一个IndexWriter对象<br>3-读取磁盘文件，对应每个文件创建一个文档对象<br>4-域添加到文档对象中<br>5-文档对象写入索引库<br>6-关闭indexwriter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.lucene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriter;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.IndexWriterConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.FieldDoc;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuceneFirst</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1-创建director对象，指定索引库保存位置</span></span><br><span class="line"><span class="comment">//        Directory directory = new RAMDirectory();//把索引库保存在内存</span></span><br><span class="line">        <span class="type">Directory</span> <span class="variable">directory</span> <span class="operator">=</span> FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath());<span class="comment">//把索引库保存在磁盘</span></span><br><span class="line"><span class="comment">//        2-基于directory对象创建一个IndexWriter对象</span></span><br><span class="line">        <span class="type">IndexWriter</span> <span class="variable">indexWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(directory,<span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>());</span><br><span class="line"><span class="comment">//        3-读取磁盘文件，对应每个文件创建一个文档对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\02.参考资料\\searchsource&quot;</span>);</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//读取文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> f.getName();</span><br><span class="line">            <span class="comment">//文件路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> f.getPath();</span><br><span class="line">            <span class="comment">//文件内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> FileUtils.readFileToString(f,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//文件大小</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> FileUtils.sizeOf(f);</span><br><span class="line">            <span class="comment">//创建field</span></span><br><span class="line">            <span class="comment">//参数1：域名称  参数2：域内容 参数3：是否存储</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;name&quot;</span>,fileName, Field.Store.YES);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;path&quot;</span>,filePath,Field.Store.YES);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;content&quot;</span>,fileContent,Field.Store.YES);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldSize</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;size&quot;</span>,filePath,Field.Store.YES);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4-域添加到文档对象中</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line">            document.add(fieldName);</span><br><span class="line">            document.add(fieldPath);</span><br><span class="line">            document.add(fieldContent);</span><br><span class="line">            document.add(fieldSize);</span><br><span class="line"><span class="comment">//        5-文档对象写入索引库</span></span><br><span class="line">            indexWriter.addDocument(document);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6-关闭indexwriter</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可使用luke工具查看索引库中内容</p><h3 id="查询索引步骤："><a href="#查询索引步骤：" class="headerlink" title="查询索引步骤："></a>查询索引步骤：</h3><p>1、创建一个Director对象，指定索引库的位置<br>2、创建一个IndexReader对象<br>3、创建一个IndexSearcher对象，构造方法中的参数indexReader对象。<br>4、创建一个Query对象，TermQuery<br>5、执行查询，得到一个TopDocs对象<br>6、取查询结果的总记录数<br>7、取文档列表<br>8、打印文档中的内容<br>9、关闭IndexReader对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.lucene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuceneFirst</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1-创建director对象，指定索引库保存位置</span></span><br><span class="line"><span class="comment">//        Directory directory = new RAMDirectory();//把索引库保存在内存</span></span><br><span class="line">        <span class="type">Directory</span> <span class="variable">directory</span> <span class="operator">=</span> FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath());<span class="comment">//把索引库保存在磁盘</span></span><br><span class="line"><span class="comment">//        2-基于directory对象创建一个IndexWriter对象</span></span><br><span class="line">        <span class="type">IndexWriter</span> <span class="variable">indexWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(directory,<span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>());</span><br><span class="line"><span class="comment">//        3-读取磁盘文件，对应每个文件创建一个文档对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\02.参考资料\\searchsource&quot;</span>);</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//读取文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> f.getName();</span><br><span class="line">            <span class="comment">//文件路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> f.getPath();</span><br><span class="line">            <span class="comment">//文件内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> FileUtils.readFileToString(f,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//文件大小</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> FileUtils.sizeOf(f);</span><br><span class="line">            <span class="comment">//创建field</span></span><br><span class="line">            <span class="comment">//参数1：域名称  参数2：域内容 参数3：是否存储</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;name&quot;</span>,fileName, Field.Store.YES);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;path&quot;</span>,filePath,Field.Store.YES);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;content&quot;</span>,fileContent,Field.Store.YES);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldSize</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;size&quot;</span>,fileSize+<span class="string">&quot;&quot;</span>,Field.Store.YES);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4-域添加到文档对象中</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line">            document.add(fieldName);</span><br><span class="line">            document.add(fieldPath);</span><br><span class="line">            document.add(fieldContent);</span><br><span class="line">            document.add(fieldSize);</span><br><span class="line"><span class="comment">//        5-文档对象写入索引库</span></span><br><span class="line">            indexWriter.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6-关闭indexwriter</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">searchIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//        1、创建一个Director对象，指定索引库的位置</span></span><br><span class="line">        <span class="type">Directory</span> <span class="variable">directory</span> <span class="operator">=</span> FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath());<span class="comment">//把索引库保存在磁盘</span></span><br><span class="line"><span class="comment">//        2、创建一个IndexReader对象</span></span><br><span class="line">        <span class="type">IndexReader</span> <span class="variable">indexReader</span> <span class="operator">=</span> DirectoryReader.open(directory);</span><br><span class="line"><span class="comment">//        3、创建一个IndexSearcher对象，构造方法中的参数indexReader对象。</span></span><br><span class="line">        <span class="type">IndexSearcher</span> <span class="variable">indexSearcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexSearcher</span>(indexReader);</span><br><span class="line"><span class="comment">//        4、创建一个Query对象，TermQuery</span></span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TermQuery</span>(<span class="keyword">new</span> <span class="title class_">Term</span>(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;spring&quot;</span>));</span><br><span class="line"><span class="comment">//        5、执行查询，得到一个TopDocs对象</span></span><br><span class="line">        <span class="type">TopDocs</span> <span class="variable">topDocs</span> <span class="operator">=</span> indexSearcher.search(query, <span class="number">10</span>);<span class="comment">//参数1：查询对象  参数2：查询结果返回最大记录数</span></span><br><span class="line"><span class="comment">//        6、取查询结果的总记录数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查询总记录数：&quot;</span>+topDocs.totalHits);</span><br><span class="line"><span class="comment">//        7、取文档列表</span></span><br><span class="line">        ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line"><span class="comment">//        8、打印文档中的内容</span></span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc doc : scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//取文档id</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">docID</span> <span class="operator">=</span>  doc.doc;</span><br><span class="line">            <span class="comment">//根据id取文档对象</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(document.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(document.get(<span class="string">&quot;path&quot;</span>));</span><br><span class="line">            System.out.println(document.get(<span class="string">&quot;size&quot;</span>));</span><br><span class="line"><span class="comment">//            System.out.println(document.get(&quot;content&quot;));</span></span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------------------------------分隔线&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        9、关闭IndexReader对象</span></span><br><span class="line">        indexReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>默认使用标准分析器：StandardAnalyzer(父类：Analyzer)<br>查看分析器分析效果：使用Analyzer对象的tokenStream方法返回一个TokenStream对象。对象中包含了最终分词结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.lucene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.standard.StandardAnalyzer;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTokenStream</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTokenStream</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1）创建一个Analyzer对象，StandardAnalyzer对象</span></span><br><span class="line">        <span class="type">Analyzer</span> <span class="variable">analyzer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardAnalyzer</span>();</span><br><span class="line"><span class="comment">//        2）使用分析器对象的tokenStream方法获得一个TokenStream对象</span></span><br><span class="line">        <span class="type">TokenStream</span> <span class="variable">tokenStream</span> <span class="operator">=</span> analyzer.tokenStream(<span class="string">&quot;&quot;</span>, <span class="string">&quot;The Spring Framework provides a comprehensive programming and configuration model.&quot;</span>);</span><br><span class="line"><span class="comment">//        3）向TokenStream对象中设置一个引用，相当于数一个指针</span></span><br><span class="line">        <span class="type">CharTermAttribute</span> <span class="variable">charTermAttribute</span> <span class="operator">=</span> tokenStream.addAttribute(CharTermAttribute.class);</span><br><span class="line"><span class="comment">//        4）调用TokenStream对象的rest方法。如果不调用抛异常</span></span><br><span class="line">        tokenStream.reset();</span><br><span class="line"><span class="comment">//        5）使用while循环遍历TokenStream对象</span></span><br><span class="line">        <span class="keyword">while</span> (tokenStream.incrementToken())&#123;</span><br><span class="line">            System.out.println(charTermAttribute.toString());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6）关闭TokenStream对象</span></span><br><span class="line">        tokenStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="中文分析器：IKAnalyze"><a href="#中文分析器：IKAnalyze" class="headerlink" title="中文分析器：IKAnalyze"></a>中文分析器：IKAnalyze</h3><ul><li>1-添加jar：IK-Analyzer-1.0-SNAPSHOT.jar</li><li>2-配置文件、扩展词典、停用词词典添加到工程classpath下（扩展词典严禁使用windows记事本编辑，保证扩展词典编码格式是utf-8） 扩展词典：可添加新词  停用词词典：无意义的词或者敏感词</li></ul><p><strong>配置文件</strong> *（IKAnalyzer.cfg.xml）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE properties SYSTEM <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;  </span><br><span class="line">&lt;properties&gt;  </span><br><span class="line">&lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</span><br><span class="line">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="line">&lt;entry key=<span class="string">&quot;ext_dict&quot;</span>&gt;hotword.dic;&lt;/entry&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="line">&lt;entry key=<span class="string">&quot;ext_stopwords&quot;</span>&gt;stopword.dic;&lt;/entry&gt; </span><br><span class="line"></span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p><strong>查看效果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.lucene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.Analyzer;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.analysis.tokenattributes.CharTermAttribute;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTokenStream2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTokenStream</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1）创建一个Analyzer对象，StandardAnalyzer对象</span></span><br><span class="line">        <span class="type">Analyzer</span> <span class="variable">analyzer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>();</span><br><span class="line"><span class="comment">//        2）使用分析器对象的tokenStream方法获得一个TokenStream对象</span></span><br><span class="line">        <span class="type">TokenStream</span> <span class="variable">tokenStream</span> <span class="operator">=</span> analyzer.tokenStream(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Lucene 是apache软件基金会一个开放源代码的全文检索引擎工具包，是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎&quot;</span>);</span><br><span class="line"><span class="comment">//        3）向TokenStream对象中设置一个引用，相当于数一个指针</span></span><br><span class="line">        <span class="type">CharTermAttribute</span> <span class="variable">charTermAttribute</span> <span class="operator">=</span> tokenStream.addAttribute(CharTermAttribute.class);</span><br><span class="line"><span class="comment">//        4）调用TokenStream对象的rest方法。如果不调用抛异常</span></span><br><span class="line">        tokenStream.reset();</span><br><span class="line"><span class="comment">//        5）使用while循环遍历TokenStream对象</span></span><br><span class="line">        <span class="keyword">while</span> (tokenStream.incrementToken())&#123;</span><br><span class="line">            System.out.println(charTermAttribute.toString());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6）关闭TokenStream对象</span></span><br><span class="line">        tokenStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200820224120967-2030411925.png"></p><p><strong>使用指定分析器</strong> 在基于directory对象创建一个IndexWriter对象时使用IndexWriterConfig()带参构造方法把分析器传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IndexWriter</span> <span class="variable">indexWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(directory,<span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(<span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>()));</span><br></pre></td></tr></table></figure><h2 id="索引库维护"><a href="#索引库维护" class="headerlink" title="索引库维护"></a>索引库维护</h2><p>域属性：是否分析（是否分词处理）、是否索引（索引方可查）、是否存储（存入文档，存入文档后field才可从document中取出）<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200820225901328-1510776572.png"></p><p><strong>上面创建索引可优化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1-创建director对象，指定索引库保存位置</span></span><br><span class="line"><span class="comment">//        Directory directory = new RAMDirectory();//把索引库保存在内存</span></span><br><span class="line">        <span class="type">Directory</span> <span class="variable">directory</span> <span class="operator">=</span> FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath());<span class="comment">//把索引库保存在磁盘</span></span><br><span class="line"><span class="comment">//        2-基于directory对象创建一个IndexWriter对象</span></span><br><span class="line">        <span class="type">IndexWriter</span> <span class="variable">indexWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(directory,<span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(<span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>()));</span><br><span class="line"><span class="comment">//        3-读取磁盘文件，对应每个文件创建一个文档对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\02.参考资料\\searchsource&quot;</span>);</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//读取文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> f.getName();</span><br><span class="line">            <span class="comment">//文件路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> f.getPath();</span><br><span class="line">            <span class="comment">//文件内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> FileUtils.readFileToString(f,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//文件大小</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> FileUtils.sizeOf(f);</span><br><span class="line">            <span class="comment">//创建field</span></span><br><span class="line">            <span class="comment">//参数1：域名称  参数2：域内容 参数3：是否存储</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;name&quot;</span>,fileName, Field.Store.YES);</span><br><span class="line"><span class="comment">//            Field fieldPath = new TextField(&quot;path&quot;,filePath,Field.Store.YES);</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoredField</span>(<span class="string">&quot;path&quot;</span>,filePath);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;content&quot;</span>,fileContent,Field.Store.YES);</span><br><span class="line"><span class="comment">//            Field fieldSize = new TextField(&quot;size&quot;,fileSize+&quot;&quot;,Field.Store.YES);</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldSizeValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LongPoint</span>(<span class="string">&quot;size&quot;</span>,fileSize);<span class="comment">//分析、索引、不存储</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">fieldSizeStore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoredField</span>(<span class="string">&quot;size&quot;</span>,fileSize);<span class="comment">//不分析、不索引、存储可取值</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4-域添加到文档对象中</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line">            document.add(fieldName);</span><br><span class="line">            document.add(fieldPath);</span><br><span class="line">            document.add(fieldContent);</span><br><span class="line"><span class="comment">//            document.add(fieldSize);</span></span><br><span class="line">            document.add(fieldSizeValue);</span><br><span class="line">            document.add(fieldSizeStore);</span><br><span class="line"><span class="comment">//        5-文档对象写入索引库</span></span><br><span class="line">            indexWriter.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        6-关闭indexwriter</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>添加文档</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDocument</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1--相当于创建索引库   创建indexWriter对象，需要ikanalyzer作为分析器 参数1：打开目录   参数2：配置</span></span><br><span class="line">    <span class="type">IndexWriter</span>  <span class="variable">indexWriter</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(</span><br><span class="line">            FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(<span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>())</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//2--document  创建一个document对象</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line">    <span class="comment">//3--域  向document添加域</span></span><br><span class="line">    document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;新添加的文件&quot;</span>,Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;新添加的文件内容&quot;</span>,Field.Store.NO));</span><br><span class="line">    document.add(<span class="keyword">new</span> <span class="title class_">StoredField</span>(<span class="string">&quot;path&quot;</span>,<span class="string">&quot;d:/tem/helol&quot;</span>));</span><br><span class="line">    <span class="comment">//把文档写入索引库</span></span><br><span class="line">    indexWriter.addDocument(document);</span><br><span class="line">    <span class="comment">//关闭索引库</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200820232625662-1574433750.png" alt="添加前"></p><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200820232706543-230041264.png" alt="添加后"></p><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200820232821428-702159132.png" alt="添加文档详细"></p><p><strong>删除文档</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAllDocument</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1--相当于创建索引库   创建indexWriter对象，需要ikanalyzer作为分析器 参数1：打开目录   参数2：配置</span></span><br><span class="line">    <span class="type">IndexWriter</span>  <span class="variable">indexWriter</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(</span><br><span class="line">            FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(<span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>())</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//删除全部文档</span></span><br><span class="line">    indexWriter.deleteAll();</span><br><span class="line">    <span class="comment">//关闭索引库</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200820233400915-1734891957.png"></p><p><strong>根据term选择性删除文档</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDocumentByQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1--相当于创建索引库   创建indexWriter对象，需要ikanalyzer作为分析器 参数1：打开目录   参数2：配置</span></span><br><span class="line">    <span class="type">IndexWriter</span>  <span class="variable">indexWriter</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(</span><br><span class="line">            FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(<span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>())</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//删除文档</span></span><br><span class="line">    indexWriter.deleteDocuments(<span class="keyword">new</span> <span class="title class_">Term</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;apache&quot;</span>));<span class="comment">//把域名为name，其值包含apache的document删除</span></span><br><span class="line">    <span class="comment">//关闭索引库</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改文档：</strong>  原理：先删除，后添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDocument</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//1--相当于创建索引库   创建indexWriter对象，需要ikanalyzer作为分析器 参数1：打开目录   参数2：配置</span></span><br><span class="line">    <span class="type">IndexWriter</span>  <span class="variable">indexWriter</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">IndexWriter</span>(</span><br><span class="line">            FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IndexWriterConfig</span>(<span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>())</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//创建一个新文档</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Document</span>();</span><br><span class="line">    <span class="comment">//向文档中添加域</span></span><br><span class="line">    document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;更新后的文档&quot;</span>, Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;更新后的文档1&quot;</span>, Field.Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;更新后的文档2&quot;</span>, Field.Store.YES));</span><br><span class="line">    <span class="comment">//更新操作</span></span><br><span class="line">    indexWriter.updateDocument(<span class="keyword">new</span> <span class="title class_">Term</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;spring&quot;</span>),document);<span class="comment">//删除域名为name中包含spring值的document，又添加了上面新建的一个document</span></span><br><span class="line">    <span class="comment">//关闭索引库</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>索引库查询</strong><br>1–使用query的子类</p><ul><li>TermQuery<ul><li>根据关键词查询，需指定查询的域及要查询的关键词</li></ul></li><li>RangeQuery：范围查询</li></ul><p>2–QueryPaser查询：先对查询的内容分词，然后基于分词结果进行查询  以上查询都是指定域和某一词查询，当查询只为一句话时可用QueryPaser查询，例如百度查询</p><ul><li>添加jar：lucene-queryparser-7.4.0.jar</li></ul><p><strong>RangeQuery和QueryPaser查询代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.lucene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.document.LongPoint;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.index.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.QueryParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.IndexSearcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.Query;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.ScoreDoc;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.search.TopDocs;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</span><br><span class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.wltea.analyzer.lucene.IKAnalyzer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchIndex</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IndexReader indexReader;</span><br><span class="line">    <span class="keyword">private</span> IndexSearcher indexSearcher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//1--创建indexReader</span></span><br><span class="line">        indexReader = DirectoryReader.open(FSDirectory.open(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\CurriculumNeeds\\SelfTaught\\09JavaFstack\\12 Lucene\\index&quot;</span>).toPath()));</span><br><span class="line">        <span class="comment">//2--由indexReader创建indexSearcher</span></span><br><span class="line">        indexSearcher = <span class="keyword">new</span> <span class="title class_">IndexSearcher</span>(indexReader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RangeQuery：范围查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//3--创建query对象</span></span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> LongPoint.newRangeQuery(<span class="string">&quot;size&quot;</span>, <span class="number">0l</span>, <span class="number">100l</span>);<span class="comment">//最后一位为L表示long类型</span></span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        printResult(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询并打印</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printResult</span><span class="params">(Query query)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//4--执行查询获得topdocs对象</span></span><br><span class="line">        <span class="type">TopDocs</span> <span class="variable">topDocs</span> <span class="operator">=</span> indexSearcher.search(query,<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;总记录数：&quot;</span>+topDocs.totalHits);</span><br><span class="line">        <span class="comment">//获取文档数组</span></span><br><span class="line">        ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc doc:scoreDocs ) &#123;</span><br><span class="line">            <span class="comment">//取文档id</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">docID</span> <span class="operator">=</span>  doc.doc;</span><br><span class="line">            <span class="comment">//根据id取文档对象</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> indexSearcher.doc(docID);</span><br><span class="line">            System.out.println(document.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(document.get(<span class="string">&quot;path&quot;</span>));</span><br><span class="line">            System.out.println(document.get(<span class="string">&quot;size&quot;</span>));</span><br><span class="line"><span class="comment">//            System.out.println(document.get(&quot;content&quot;));</span></span><br><span class="line">            System.out.println(<span class="string">&quot;---------------------------------------------分隔线&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        indexReader.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//QueryPaser：查询内容先分词，后查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryPaser</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建一个QueryPaser对象，参数1：默认搜索域，参数2：分析器对象</span></span><br><span class="line">        <span class="type">QueryParser</span> <span class="variable">queryParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryParser</span>(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span> <span class="title class_">IKAnalyzer</span>());</span><br><span class="line">        <span class="comment">//使用QueryPaser创建Query对象</span></span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> queryParser.parse(<span class="string">&quot;lucene是java开发的全文检索工具包&quot;</span>);</span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        printResult(query);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java线程2</title>
      <link href="/aiyblog/2020/09/02/java/java%E7%BA%BF%E7%A8%8B2/"/>
      <url>/aiyblog/2020/09/02/java/java%E7%BA%BF%E7%A8%8B2/</url>
      
        <content type="html"><![CDATA[<h2 id="java并发包、线程池原理分析、锁的深度化"><a href="#java并发包、线程池原理分析、锁的深度化" class="headerlink" title="java并发包、线程池原理分析、锁的深度化"></a>java并发包、线程池原理分析、锁的深度化</h2><ul><li>Vector和ArrayList区别</li></ul><blockquote><p>实现原理都是通过数组实现-查询速度快、增加、修改、删除速度慢<br>区别：线程安全问题<br>Vector是安全、ArrayList线程不安全。 ArrayList效率高<br>vector的add方法使用synchronized锁(同步函数)，多个线程操作时，由于争取资源，所以效率低一些</p></blockquote><ul><li>HasTable和HasMap</li></ul><blockquote><p>hasTable线程安全，hasMap线程不安全<br>hasMap底层：链表+数组(链表增加、修改、删除快，数组查询快) put方法：通过hascode取模得到下标位置(一致性取模算法)<br>hasTable的put()方法使用synchronized(同步函数)<br>collections中.synchronizedMap(Map&lt;k,v&gt;)—将不安全的map转为安全的map</p></blockquote><h2 id="jdk-并发包"><a href="#jdk-并发包" class="headerlink" title="jdk 并发包"></a>jdk 并发包</h2><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><ul><li>从什么时候开始上锁？</li><li>从什么时候开始释放锁？</li><li><strong>synchronized同步锁</strong> 内置锁，自动档 缺点：效率低、扩展不高、不能自定义</li><li><strong>Lock锁</strong> 也是保证线程安全问题  手动挡–手动上锁，手动释放锁， 灵活性高</li><li>多线程并发(Thread，多个线程操作同一个资源)与网站并发(多个请求同时访问一台服务器)</li><li>通信<blockquote><p>lock锁通信通过Condition</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.threadLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成者消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//资源 ---包子</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Res</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String pi;  <span class="comment">//包子皮</span></span><br><span class="line">    <span class="keyword">public</span> String xian; <span class="comment">//馅料</span></span><br><span class="line">    <span class="comment">//标志位  true==生产者线程进行等待，消费者可以消费  false==生产者线程进行生产，消费者线程进行等待</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;  <span class="comment">//有资源=true 没有资源=false</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">//创建一个锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Out</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Res res;</span><br><span class="line">    Condition condition;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Out</span><span class="params">(Res res,Condition condition)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">        <span class="built_in">this</span>.condition = condition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产操作</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//开始上锁</span></span><br><span class="line">                res.lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (res.flag)&#123;</span><br><span class="line">                    condition.await(); <span class="comment">//等待</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (count==<span class="number">0</span>)&#123;</span><br><span class="line">                    res.pi = <span class="string">&quot;薄皮&quot;</span>; <span class="comment">//1--生产线程到这里改变了皮，还未修改馅，同时消费线程直接执行打印了资源信息</span></span><br><span class="line">                    res.xian = <span class="string">&quot;猪肉馅&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    res.pi = <span class="string">&quot;冰皮&quot;</span>;</span><br><span class="line">                    res.xian=<span class="string">&quot;绿豆馅&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count = (count+<span class="number">1</span>)%<span class="number">2</span>; <span class="comment">//计算奇数或偶数 实现生产不同数据</span></span><br><span class="line">                System.out.println(<span class="string">&quot;生产者生产了--&quot;</span>+res.pi+res.xian+<span class="string">&quot;--包子&quot;</span>);</span><br><span class="line">                res.flag = <span class="literal">true</span>;<span class="comment">//修改标志位，表示写完了，有资源了，提示消费者消费</span></span><br><span class="line">                condition.signal(); <span class="comment">//唤醒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                res.lock.unlock(); <span class="comment">//怕上面代码突然出bug，锁就无法释放了，所以最好放到finally代码块中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Res res;</span><br><span class="line">    Condition condition;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Input</span><span class="params">(Res res,Condition condition)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.res = res;</span><br><span class="line">       <span class="built_in">this</span>.condition = condition;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//消费操作</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                res.lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (!res.flag)&#123;</span><br><span class="line">                    condition.await();<span class="comment">//等待</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2--消费线程同时运行，打印了皮=薄皮，但是生成线程还没有修改好馅，此时性别还为绿豆馅，然后这里直接打印了，所以出现了：薄皮绿豆馅包子</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者消费了--&quot;</span>+res.pi+res.xian+<span class="string">&quot;--包子&quot;</span>);</span><br><span class="line">                res.flag = <span class="literal">false</span>; <span class="comment">//修改标志位，告知消费完了，没有资源了消费了，提醒生产者生产</span></span><br><span class="line">                condition.signal(); <span class="comment">//唤醒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                res.lock.unlock();<span class="comment">//怕上面代码突然出bug，锁就无法释放了，所以最好放到finally代码块中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutInputThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Res</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Res</span>();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> res.lock.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="type">Out</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Out</span>(res,condition);</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(res,condition);</span><br><span class="line"></span><br><span class="line">        out.start();</span><br><span class="line">        input.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3></li></ul><p>保证线程原子性 </p><p>如：AtomicInteger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileNoAtomic</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//需要10个线程共享count 用static修饰关键字，其存放在静态区，只会存放一次，这样所有线程都会共享了。</span></span><br><span class="line"><span class="comment">//    private volatile static int count = 0;</span></span><br><span class="line">    <span class="comment">//通过AtomicInteger类(原子类，jdk1.5出现)保证线程原子性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line"><span class="comment">//            count++;</span></span><br><span class="line">            count.incrementAndGet(); <span class="comment">//即变量count++</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用volatile修饰，其最后结果可能也不是10000，其只实现线程可见性，不保证线程原子性，因此最后可能不会出现结果10000</span></span><br><span class="line"><span class="comment">//        System.out.println(getName()+&quot;,&quot;+count)</span></span><br><span class="line">        <span class="comment">//通过原子类保证最后结果得到10000 即线程安全</span></span><br><span class="line">        System.out.println(getName()+<span class="string">&quot;,&quot;</span>+count.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建10个线程</span></span><br><span class="line">        VolatileNoAtomic[] volatileNoAtomics = <span class="keyword">new</span> <span class="title class_">VolatileNoAtomic</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;volatileNoAtomics.length;i++)&#123;</span><br><span class="line">            volatileNoAtomics[i] = <span class="keyword">new</span> <span class="title class_">VolatileNoAtomic</span>();<span class="comment">//创建10个线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;volatileNoAtomics.length;i++)&#123;</span><br><span class="line">            volatileNoAtomics[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>怎么停止线程</strong></p><ul><li>stop() 不推荐 </li><li>设计怎么停止线程？思路？<blockquote><p>while循环时设置方法修改信号<br>.interrupt()中断线程，抛出异常</p></blockquote></li></ul><h3 id="ThreadLock"><a href="#ThreadLock" class="headerlink" title="ThreadLock"></a>ThreadLock</h3><ul><li>什么是ThreadLock？ </li></ul><blockquote><p>为每一个线程提供一个局部变量，使线程互不影响 即便共享同一个全局数据 </p></blockquote><ul><li>ThreadLock原理是什么？<blockquote><p>通过map存储所以线程以及其自己的变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">//共享的资源</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResNumber</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  ThreadLocal&lt;Integer&gt; threadLocal =  <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Integer&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Integer <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//设置ThreadLocal返回的初始值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//get()方法会通过当前线程判断是否存在该线程，如果存在直接拿取，如果不存在，则在map创建(key=该线程名称，value=ThreadLocal设置返回的初始值)</span></span><br><span class="line">        count = threadLocal.get()+<span class="number">1</span>;<span class="comment">//获取该线程变量值</span></span><br><span class="line">        <span class="comment">//set()方法,会通过当前线程判断是否存在该线程，如果存在直接修改值，如果不存在则在map创建(key=该线程名称，value=待设置的值)</span></span><br><span class="line">        threadLocal.set(count);<span class="comment">//修改该线程变量值</span></span><br><span class="line">        <span class="keyword">return</span> count+<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocalThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ResNumber resNumber;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LocalThreadDemo</span><span class="params">(ResNumber resNumber)</span> &#123;<span class="built_in">this</span>.resNumber = resNumber;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;--number=&quot;</span>+resNumber.getNumber());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T_ThreadLocal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ResNumber</span> <span class="variable">resNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResNumber</span>();</span><br><span class="line">        <span class="comment">//即便共享同一个数据，但通过ThreadLocal,各线程相当于操作各自的数据，使数据不共享</span></span><br><span class="line">        <span class="type">LocalThreadDemo</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalThreadDemo</span>(resNumber);</span><br><span class="line">        <span class="type">LocalThreadDemo</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalThreadDemo</span>(resNumber);</span><br><span class="line">        <span class="type">LocalThreadDemo</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalThreadDemo</span>(resNumber);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ConcurrenHasMap"><a href="#ConcurrenHasMap" class="headerlink" title="ConcurrenHasMap"></a>ConcurrenHasMap</h3><p>分段锁计算</p><blockquote><p>多线程共享同一个HasTable，效率非常低(因为锁的资源竞争)。加锁后，每次只能有一个线程去操作hastable。<br>ConcurrenHasMap通过分段锁(最高为16段)来提高操作的速度。即将一个整体拆分成多个小的HasTable，即有多个锁，多线程操作时，由于操作的是不同的下标即操作不同的锁，所以可以提高多线程操作效率(即减少了锁的资源竞争)</p></blockquote><h3 id="CountDownLatch-计数"><a href="#CountDownLatch-计数" class="headerlink" title="CountDownLatch(计数)"></a>CountDownLatch(计数)</h3><p> 作用：计数用的，通过await()方法让某些线程在后面执行。jdk1.5的并发包出现 </p><ul><li><strong>new CoountDownLatch(线程总数)</strong> 创建一个countDownlatch对象</li><li>**.countDown()**线程执行一次，线程总数减1</li><li>**.await()**countDownLatch中不为0，则一直等待</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tbf_CountDownLatch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程1开始执行....&quot;</span>);</span><br><span class="line">                <span class="comment">//模拟子线程执行任务</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">30</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程1执行完任务....&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();<span class="comment">//每次减一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程2开始执行....&quot;</span>);</span><br><span class="line">                <span class="comment">//模拟子线程执行任务</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">30</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程2执行完任务....&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();<span class="comment">//每次减一</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        countDownLatch.await(); <span class="comment">//计数不为0，以下代码一直等待</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始执行任务....&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CyclicBarrier-计数"><a href="#CyclicBarrier-计数" class="headerlink" title="CyclicBarrier(计数)"></a>CyclicBarrier(计数)</h3><p>作用：计数用的，当线程达到一定次数，所有线程才并行执行</p><ul><li>**.await()**所有线程没有执行完前面的代码，则后面代码不会执行，线程一直在此等待 但线程要使用同一个CyclicBarrier对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">writer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> CyclicBarrier cyclicBarrier;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">writer</span><span class="params">(CyclicBarrier cyclicBarrier)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(currentThread().getName()+<span class="string">&quot;开始写入数据&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">30</span>);<span class="comment">//模拟消耗时间</span></span><br><span class="line">            System.out.println(currentThread().getName()+<span class="string">&quot;写入数据成功...&quot;</span>);</span><br><span class="line">            cyclicBarrier.await(); <span class="comment">//所有线程执行完才并发执行下面的代码</span></span><br><span class="line">            System.out.println(currentThread().getName()+<span class="string">&quot;所有数据执行完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tbf_CyclicBarrier</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span>); <span class="comment">//初始5个线程执行完毕后才并发</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123; <span class="comment">//创建5个线程执行，需要最后“”一起写出</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">writer</span>(cyclicBarrier).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore(信号量)"></a>Semaphore(信号量)</h3><p>作用：信号量为0后,其余线程都要等某个获得资源权限的线程释放资源，然后等待的线程谁抢到释放的资源谁使用</p><ul><li><strong>.acquire()</strong> 获取到资源权限，总数减1</li><li><strong>.release()</strong> 释放资源</li></ul><blockquote><p>一个信号量，当信号量为0后，其余线程都要等某个获得资源权限的线程释放资源，然后谁抢到释放的资源谁使用<br>例子：3个茅坑10个人用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Semaphore wc;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">(Semaphore wc,String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.wc=wc;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取资源</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">availablePermits</span> <span class="operator">=</span> wc.availablePermits();</span><br><span class="line">        <span class="keyword">if</span> (availablePermits&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;有茅坑。。。&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(name+<span class="string">&quot;没有茅坑了。。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取资源</span></span><br><span class="line">            wc.acquire(); <span class="comment">//获取到资源权限，总数减1,总数</span></span><br><span class="line">            System.out.println(name+<span class="string">&quot;抢到茅坑--关门，可以上厕所。。。&quot;</span>);</span><br><span class="line">            <span class="comment">//模拟上厕所时间</span></span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">1000</span>));</span><br><span class="line">            System.out.println(name+<span class="string">&quot;释放茅坑--开门&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            wc.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tbf_Semaphore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//最多支持多个资源访问</span></span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Parent</span>(semaphore,<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;个人,&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h2><ul><li>生产者消费者概念</li><li>队列(消息中间件)：多个线程共享数据</li><li>并发队列有界、无界（区别：存储长度一个有限制，一个无限制）</li><li>阻塞队列、非阻塞队列 (阻塞：生产者写入满时，生产者就会进入到阻塞–当队列为空的时候，消费者会等待)</li></ul><blockquote><p>队列遵循的规则–先进先出，后进后出</p></blockquote><ul><li>无界限 如：ConcurrentLinkedDeque</li><li>可阻塞，有界限 如：BlockingQueue(子类:1-ArrayBlockingQueue 2-LinkedBlockingQueue)</li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="* 线程池"></a>* 线程池</h2><ul><li>什么是线程池？为什么使用线程池？</li></ul><blockquote><p>经常创建、启动、销毁非常耗资源，使用线程池进行线程管理、复用。可以提高程序效率<br>线程池好处：1-重复利用，降低资源消耗 2-提高响应速度 3-提高线程可管理性–线程池进行创建和分配</p></blockquote><ul><li>线程池使用方式？</li></ul><blockquote><p>接口【Executor】封装好了四种线程池<br>【1-newCachedThreadPool】创建一个可缓存线程池，如果线程长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 优点：可重复利用<br>【2-newFixedThreadPool】创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。<br>【3-newScheduledThreadPool】创建一个定长线程池，支持定时及周期性任务执行。<br>【4-newSingleThreadExecutor】创建单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO、LIFO，优先级)执行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T_newCachedThreadPool</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//        //可缓存线程池</span></span><br><span class="line"><span class="comment">//        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span></span><br><span class="line"><span class="comment">//        for (int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">//            int temp=i;</span></span><br><span class="line"><span class="comment">//            newCachedThreadPool.execute(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void run() &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;threadName:&quot;+Thread.currentThread().getName()+&quot;,i=&quot;+temp);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可固定长度线程池---------------------------------------------</span></span><br><span class="line"><span class="comment">//        ExecutorService newFixedThreadPool = Executors.newFixedThreadPool(3);</span></span><br><span class="line"><span class="comment">//        for  (int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">//            int temp=i;</span></span><br><span class="line"><span class="comment">//            newFixedThreadPool.execute(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void run() &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;threadName:&quot;+Thread.currentThread().getName()+&quot;,i=&quot;+temp);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//可定时长度线程池---------------------------------------------</span></span><br><span class="line"><span class="comment">//        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(3);</span></span><br><span class="line"><span class="comment">//        for  (int i=0;i&lt;10;i++)&#123;</span></span><br><span class="line"><span class="comment">//            int temp=i;</span></span><br><span class="line"><span class="comment">//            scheduledExecutorService.schedule(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void run() &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(&quot;threadName:&quot;+Thread.currentThread().getName()+&quot;,i=&quot;+temp);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;,3,TimeUnit.SECONDS); //3秒后，线程开始运行</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//单线程化线程池---------------------------------------------</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        <span class="keyword">for</span>  (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=i;</span><br><span class="line">            scheduledExecutorService.execute(()-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;threadName:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;,i=&quot;</span>+temp);</span><br><span class="line">             &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledExecutorService.shutdown(); <span class="comment">//停止线程池</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线程池主要是配置返回了ThreadPoolExecutor，其构造函数参数如下：</li></ul><blockquote><p>CodeOllSize–核心线程池大小<br>MaiMumPoolSize–线程池大小<br>keepAliveTime–终止时间 Unit–超时秒数<br>线程池包括：核心线程池和最大线程池</p></blockquote><p><strong>线程数合理配置</strong></p><ul><li>遵循两个原则</li></ul><blockquote><p>1-cpu密集(cpu频繁调度)：cpu密集时，任务少配置线程数，线程数和大概cpu核数相同，这样可以使每个线程都在执行任务<br>2-io密集：io密集时，大部分线程都阻塞，因此需要多配置线程数，2*cup核数</p></blockquote><h2 id="总结-基础知识点"><a href="#总结-基础知识点" class="headerlink" title="总结(基础知识点)"></a>总结(基础知识点)</h2><ul><li><p>进程与线程区别</p></li><li><p>什么是线程安全 (保证在多个线程之间共享同个全局变量或静态变量，保证数据一致性、原子性)</p></li><li><p>多线程之间同步 (线程同步方式：synchronized、lock)</p></li><li><p>join (类似插队)</p></li><li><p>java内存模型</p></li><li><p>原子类(如原子类：AtomicInteger)+可见性(voratile关键字)</p></li><li><p>wait、notify、守护线程与非守护线程(.setDaemon(true/false)=设置守护线程 .isDaemon()=判断线程是否为守护线程)</p></li><li><p>停止线程</p></li><li><p>死锁</p></li><li><p>多线程运行状态</p></li><li><p>lock锁</p></li><li><p>java并发包</p><ul><li>ThreadLock(为每个线程提供自己的局部变量代替共享的全局变量，以此实现线程操作共享数据和操作非共享数据一样)</li></ul></li><li><p>线程池</p></li></ul><h2 id="java锁机制"><a href="#java锁机制" class="headerlink" title="java锁机制"></a>java锁机制</h2><ul><li>悲观锁<blockquote><p>默认包含排它锁，每次拿数据的时候，都会上锁  缺点：效率低，因为只能保证一个连接进行操作。</p></blockquote></li><li>乐观锁<blockquote><p>版本标识–即cas无锁机制</p></blockquote></li><li>重入锁<blockquote><p>重入锁(锁可以传递给下一个方法)与非重入锁(会产生死锁) </p></blockquote></li><li>读写锁<blockquote><p>可以共读，不可共写。读写锁最好一起使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读写锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//读写锁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="comment">//读锁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">r</span> <span class="operator">=</span> rwl.readLock();</span><br><span class="line">    <span class="comment">//写锁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">w</span> <span class="operator">=</span> rwl.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key,Object value)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            w.lock();<span class="comment">//写锁住</span></span><br><span class="line">            System.out.println(<span class="string">&quot;正在写入：key=&quot;</span>+key+<span class="string">&quot;--value=&quot;</span>+value+<span class="string">&quot;,开始。。。&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            map.put(key,value);</span><br><span class="line">            System.out.println(<span class="string">&quot;正在写入：key=&quot;</span>+key+<span class="string">&quot;--value=&quot;</span>+value+<span class="string">&quot;,结束。。。&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            w.unlock();<span class="comment">//写解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r.lock();<span class="comment">//读锁住</span></span><br><span class="line">            System.out.println(<span class="string">&quot;正在读取：key=&quot;</span>+key+<span class="string">&quot;,开始。。。&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            value = map.get(key);</span><br><span class="line">            System.out.println(<span class="string">&quot;正在读取：key=&quot;</span>+key+<span class="string">&quot;--value=&quot;</span>+value+<span class="string">&quot;,结束。。。&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            r.unlock();<span class="comment">//读解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">        <span class="comment">//写线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                    put(i+<span class="string">&quot;&quot;</span>,i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//读线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                    get(i+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>CAS无锁<blockquote><p>cas无锁机制效率比有锁机制高，cas无锁机制其实和乐观锁类似概念。<br>cas三个参数：1-V表示要更新的变量 2-E表示预期值 3-N表示新值<br>仅当v值=e值是，才会将v值设为n，如v值和e值不同，说明已经有其他线程做了更新，则当前线程说明都不做。最后，cas返回当前v的真实值</p></blockquote></li><li>自旋锁<blockquote><p>底层通过cas无锁机制无限循环实现。 </p></blockquote></li><li>排它锁</li><li>分布式锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java线程1</title>
      <link href="/aiyblog/2020/08/29/java/java%E7%BA%BF%E7%A8%8B1/"/>
      <url>/aiyblog/2020/08/29/java/java%E7%BA%BF%E7%A8%8B1/</url>
      
        <content type="html"><![CDATA[<h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><ul><li>继承Thread类，重写run  启动–通过Thread对象.start();</li><li>实现Runable接口，重写run，然后new一个Thread对象，把实现Runable类的对象作为构造参数传入  启动–通过Thread对象.start();</li><li>实现Callable接口，重写call方法（有返回值）<blockquote><p>也可以用runable接口的匿名内部类<br>或者可以使用线程池</p></blockquote></li></ul><h2 id="程序中同步"><a href="#程序中同步" class="headerlink" title="程序中同步"></a>程序中同步</h2><p><strong>同步：</strong>程序从上往下有循序执行<br><strong>异步：</strong>程序分别执行，互不影响</p><p><strong>阻塞</strong>：程序执行到某处被阻塞，需等阻塞任务完成，然后执行响应后才继续往下执行<br><strong>非阻塞</strong>：程序不会在某处被阻塞，不需等阻塞任务完成，而是等阻塞任务完成后通过回调方法执行响应</p><ul><li>线程间同步：保证线程安全，即保证数据原子性。</li></ul><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>多个线程共享同一个全局变量，做写时，可能受到其他线程干扰，导致数据有问题。读时，不会产生影响。</p><ul><li>线程之间同步 即：保证数据的原子性<ul><li>synchronized–自动挡</li><li>lock–手动档  jdk1.5并发包</li></ul></li></ul><h2 id="synchronized-锁"><a href="#synchronized-锁" class="headerlink" title="synchronized 锁"></a>synchronized 锁</h2><ol><li>最好两个线程以上才加锁，一个线程也加锁降低了性能，因为一个线程不会发生安全问题，加锁后还要先判断然后才能操作</li><li>谁先拿到锁谁先操作，一个线程操作另一线程无法操作 即保证只有一个线程进行执行操作  </li><li>多个线程想同步，必须用同一把锁</li></ol><ul><li>什么地方需要加锁?<blockquote><p>包裹需要操作共享数据的代码块</p></blockquote></li><li>锁什么时候释放？<blockquote><p>代码执行完毕或程序抛出异常</p></blockquote></li></ul><p>缺点：效率非常低<br>弊端：多个线程需要判断锁，较为消耗资源， 即抢锁的资源</p><ul><li>同步函数使用的是this锁</li></ul><p>怎么证明同步函数使用this锁?</p><blockquote><p>两个线程实现同步，一个用this锁同步代码块，一个用同步函数</p></blockquote><ul><li><p>一个线程使用同步函数,另一个线程使用同步代码块(非this)则不能够同步</p></li><li><p>静态同步函数不是用this锁</p><blockquote><p>一个变量被static修饰的话存放在永久区，当class文件被加载的时候就会初始化<br>静态同步函数使用的是该文件字节码锁</p></blockquote></li></ul><h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2><p>同步中嵌套同步，无法释放。一直等待，变为死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 线程问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1_si</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">oj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">trainlCount</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (oj)&#123;  <span class="comment">//xc-1 到这里得到了oj锁，要进入sale()需要拿到this锁</span></span><br><span class="line">                    sale();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;   <span class="comment">//同时，xc-2 到这里得到了this锁，要执行需要拿到oj，由于oj锁被xc-1拿去了所以两个都在等，即产生了死锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (oj)&#123;</span><br><span class="line">            <span class="keyword">if</span> (trainlCount&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;,出售第&quot;</span>+(<span class="number">100</span>-trainlCount+<span class="number">1</span>)+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                trainlCount--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">T1_si</span> <span class="variable">myt1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1_si</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myt1,<span class="string">&quot;xc-1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myt1,<span class="string">&quot;xc-2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        myt1.flag = <span class="literal">false</span>;</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>多线程三大特性</strong><ul><li>原子性  一致性–保证线程安全问题</li><li>可见性  java内存模型</li><li>有序性  join、wait、notfy</li></ul></li></ul><h2 id="java内存模型-—-线程安全问题的产生"><a href="#java内存模型-—-线程安全问题的产生" class="headerlink" title="java内存模型  —-线程安全问题的产生"></a>java内存模型  —-线程安全问题的产生</h2><p>即可见性：决定了一个线程与另一个线程是否可见。即数据的修改是否能被另一个线程知道</p><blockquote><p>主内存：主要存放共享的全局变量<br>线程私有本地内存：本地线程私有变量 </p></blockquote><ul><li>每个线程都有一个私有本地内存，如果某一本地内存修改共享变量后，主内存没有及时通知到其他线程的私有本地内存，则可能发生数据不一致(同步)的问题</li><li>volatile关键字修饰共享变量，其他线程修改共享变量时可以强制刷新到主内存，然后主内存及时通知其他线程，以此实现线程可见性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadVolatileDome</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123; &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程结束执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadVolatile</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ThreadVolatileDome</span> <span class="variable">threadVolatileDome</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadVolatileDome</span>();</span><br><span class="line">        threadVolatileDome.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//主线程修改了全局变量，即修改flag变量值，如果不使用volatile修饰flag，则不会及时刷新到主内存，则子线程私有本地内存的flag一直为true，即它不会结束线程</span></span><br><span class="line">        <span class="comment">//通过volatile关键字刷新变量flag值到主内存，主内存及时通知私有本地内存，私有本地内存变量值一修改，线程马上根据变量值进行相关操作</span></span><br><span class="line">        threadVolatileDome.setFlag(<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;flag设为false&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(threadVolatileDome.flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>volatile保证线程之间可见性，但不保证原子性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileNoAtomic</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">//需要10个线程共享count 用static修饰关键字，其存放在静态区，只会存放一次，这样所有线程都会共享了。</span></span><br><span class="line"><span class="comment">//    private volatile static int count = 0;</span></span><br><span class="line">    <span class="comment">//通过AtomicInteger类(原子类，jdk1.5出现)保证线程原子性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line"><span class="comment">//            count++;</span></span><br><span class="line">            count.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用volatile修饰，其最后结果可能也不是10000，其只实现线程可见性，不保证线程原子性，因此最后可能不会出现结果10000</span></span><br><span class="line"><span class="comment">//        System.out.println(getName()+&quot;,&quot;+count)</span></span><br><span class="line">        <span class="comment">//通过原子类保证最后结果得到10000 即线程安全</span></span><br><span class="line">        System.out.println(getName()+<span class="string">&quot;,&quot;</span>+count.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建10个线程</span></span><br><span class="line">        VolatileNoAtomic[] volatileNoAtomics = <span class="keyword">new</span> <span class="title class_">VolatileNoAtomic</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;volatileNoAtomics.length;i++)&#123;</span><br><span class="line">            volatileNoAtomics[i] = <span class="keyword">new</span> <span class="title class_">VolatileNoAtomic</span>();<span class="comment">//创建10个线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;volatileNoAtomics.length;i++)&#123;</span><br><span class="line">            volatileNoAtomics[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="多线程间通信"><a href="#多线程间通信" class="headerlink" title="多线程间通信"></a>多线程间通信</h2><p><strong>同步：</strong>多个线程对同一个资源的相同操作，同步即保证数据安全。<br><strong>通信：</strong>多个线程对同一个资源(共享资源)不同操作。需要进行通信，保证数据安全问题</p><ul><li>多个线程使用同一个run方法，通过synchronize锁资源实现同步</li><li>多个线程使用的不同的run方法，即生产者和消费者，通过通信来保证安全问题</li></ul><h3 id="生产者与消费者模式"><a href="#生产者与消费者模式" class="headerlink" title="生产者与消费者模式"></a>生产者与消费者模式</h3><blockquote><p>多线程通信—生产者和消费者。 考虑线程安全问题<br><strong>生产者：</strong>发布资源。如写 </p></blockquote><p><strong>消费者：</strong>利用资源。如读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成者消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//资源</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Res</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String userName;</span><br><span class="line">    <span class="keyword">public</span> String sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Out</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Res res;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Out</span><span class="params">(Res res)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//写操作 </span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (count==<span class="number">0</span>)&#123;</span><br><span class="line">                res.userName = <span class="string">&quot;xiaoai&quot;</span>; <span class="comment">//1--生产线程到这里改变了资源姓名，还未修改性别，同时消费线程直接执行打印了资源信息</span></span><br><span class="line">                res.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res.userName = <span class="string">&quot;honghong&quot;</span>;</span><br><span class="line">                res.sex=<span class="string">&quot;女&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算奇数或偶数  使上面写出不同数据</span></span><br><span class="line">            count = (count+<span class="number">1</span>)%<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Res res;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Input</span><span class="params">(Res res)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//2--消费线程同时运行，打印了userName=xiaoai，但是生成线程还没有修改好性别，此时sex=女，然后这里直接打印了，所以出现了：xiaoai--女</span></span><br><span class="line">            System.out.println(res.userName+<span class="string">&quot;--&quot;</span>+res.sex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutInputThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Res</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Res</span>();</span><br><span class="line">        <span class="type">Out</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Out</span>(res);  <span class="comment">//生产线程</span></span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(res); <span class="comment">//消费线程</span></span><br><span class="line"></span><br><span class="line">        out.start();</span><br><span class="line">        input.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>解决1：要使用同一锁  用this锁不行，因为不是同一个run即不是同一个this  锁同一个资源(即res)可以，但是有点问题。即不会写一个读一个，或者会重复读取一个相同的数据</p></li><li><p>解决2：生产一个，消费一个，没有生产即不可消费，消费没完则不可生产</p><blockquote><p><strong>wait()</strong>:让当前线程从运行状态变为休眠状态  即:立即释放锁的资源<br><strong>notify()</strong>:让当前线程从休眠状态变为运行状态   即：唤醒另一个线程   必须是同一个锁的资源才能唤醒<br><strong>notifyAll()</strong>:唤醒所有等待中的线程<br>ps:需要同步才能使用，而且要是同一个锁的资源  一般wait()和notify()一起使用 wait和notify只能在synchronized使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成者消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//资源 ---包子</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Res</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String pi;  <span class="comment">//包子皮</span></span><br><span class="line">    <span class="keyword">public</span> String xian; <span class="comment">//馅料</span></span><br><span class="line">    <span class="comment">//标志位  true==生产者线程进行等待，消费者可以消费  false==生产者线程进行生产，消费者线程进行等待</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;  <span class="comment">//有资源=true 没有资源=false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Out</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Res res;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Out</span><span class="params">(Res res)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//生产操作</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (res)&#123;</span><br><span class="line">                <span class="keyword">if</span> (res.flag)&#123;  <span class="comment">//flag==true  有资源，无法生产，所以生产者需要等待</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        res.wait(); <span class="comment">//表示让当前线程从运行状态变成休眠状态 并且释放锁的资源</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count==<span class="number">0</span>)&#123;</span><br><span class="line">                    res.pi = <span class="string">&quot;薄皮&quot;</span>; <span class="comment">//1--生产线程到这里改变了皮，还未修改馅，同时消费线程直接执行打印了资源信息</span></span><br><span class="line">                    res.xian = <span class="string">&quot;猪肉馅&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    res.pi = <span class="string">&quot;冰皮&quot;</span>;</span><br><span class="line">                    res.xian=<span class="string">&quot;绿豆馅&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count = (count+<span class="number">1</span>)%<span class="number">2</span>; <span class="comment">//计算奇数或偶数 实现生产不同数据</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;生产者生产了-&quot;</span>+res.pi+res.xian+<span class="string">&quot;-包子&quot;</span>);</span><br><span class="line">                <span class="comment">//----------生产完成，可以消费</span></span><br><span class="line">                System.out.println(<span class="string">&quot;-----------生产了-&quot;</span>+res.pi+res.xian+<span class="string">&quot;-包子，可以消费&quot;</span>);</span><br><span class="line">                res.flag = <span class="literal">true</span>;<span class="comment">//修改标志位，表示写完了，有资源了，提示消费者消费</span></span><br><span class="line">                res.notify(); <span class="comment">// 唤醒消费者线程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Input</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Res res;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Input</span><span class="params">(Res res)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//消费操作</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (res)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!res.flag)&#123;  <span class="comment">//flag==false 没有资源，无法消费，所以消费者需要等待</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        res.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2--消费线程同时运行，打印了皮=薄皮，但是生成线程还没有修改好馅，此时性别还为绿豆馅，然后这里直接打印了，所以出现了：薄皮绿豆馅包子</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费者消费了-&quot;</span>+res.pi+res.xian+<span class="string">&quot;-包子&quot;</span>);</span><br><span class="line">                <span class="comment">//----------消费完了，可以生产</span></span><br><span class="line">                System.out.println(<span class="string">&quot;-----------消费了-&quot;</span>+res.pi+res.xian+<span class="string">&quot;-包子，可以生产&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;------------------------------------------------------\n&quot;</span>);</span><br><span class="line">                res.flag = <span class="literal">false</span>; <span class="comment">//修改标志位，告知消费完了，没有资源了消费了，提醒生产者生产</span></span><br><span class="line">                res.notify(); <span class="comment">//唤醒生产者线程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutInputThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Res</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Res</span>();</span><br><span class="line">        <span class="type">Out</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Out</span>(res);</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(res);</span><br><span class="line"></span><br><span class="line">        out.start();</span><br><span class="line">        input.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>wait和sleep的区别？</p><blockquote><p>作用都是做休眠<br>wait用于同步中可以释放锁的资源，sleep不会释放锁的资源，sleep只有等时间到期才从休眠状态变为运行状态。<br>wait需要notify才能从休眠状态变为运行状态</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【elasticsearch】es操作</title>
      <link href="/aiyblog/2020/08/26/%E3%80%90elasticsearch%E3%80%91es%E6%93%8D%E4%BD%9C/"/>
      <url>/aiyblog/2020/08/26/%E3%80%90elasticsearch%E3%80%91es%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><p>dsl查询：<a href="https://blog.csdn.net/weixin_45921762/article/details/107933085">https://blog.csdn.net/weixin_45921762/article/details/107933085</a></p><p>聚合查询：</p><ul><li><a href="https://www.jianshu.com/p/1b430a637971">https://www.jianshu.com/p/1b430a637971</a></li><li><a href="https://blog.csdn.net/alex_xfboy/article/details/86100037">https://blog.csdn.net/alex_xfboy/article/details/86100037</a></li></ul><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><ul><li>区分es版本：以下版本=6.5.4</li><li>区分是否带类型<ul><li>5.x 及以前版本，一个 index 有一个或者多个 type</li><li>6.x 版本，一个 index 只有一个 type</li><li>7.x 版本移除了 type，type 相关的所有内容全部变成 Deprecated，为了兼容升级和过渡，所有的 7.x 版本 es 数据写入后 type 字段都默认被置为 “_doc”</li></ul></li></ul><h3 id="增"><a href="#增" class="headerlink" title="增"></a><strong>增</strong></h3><ul><li>创建索引，指定类型映射</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// POST/PUT /[索引名]/[类型]</span></span><br><span class="line"><span class="comment">// 如下：PUT /myindex  异常可改为 /myindex/emps/  /myindix/_doc等等</span></span><br><span class="line">PUT /myindex</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>直接添加单条数据 【不做字段映射，默认根据插入数据指定】</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [索引]/_doc/[_id]</span></span><br><span class="line">POST myindex/_doc/<span class="number">7</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xiaoai&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2012-1-12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test content&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>批量添加数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT /myindex/_bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;小黑&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">23</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;北京&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;王小黑&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">24</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;上海&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张小五&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">8</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;无锡&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;win7&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">9</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;南京&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;梅超风&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">43</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;杭州&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张无忌&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">59</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;北京&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><ul><li>直接覆盖</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST myindex/_doc/<span class="number">7</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xiaoai5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2001-1-12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test conten5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其余字段会置空</span></span><br><span class="line">POST myindex/_doc/<span class="number">7</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xiaoai5&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>更改</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其余字段不会被修改</span></span><br><span class="line">POST myindex/_doc/<span class="number">7</span>/_update</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">43</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;广东&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="comment">// DELET [索引]/_doc/[_id]</span></span><br><span class="line">DELETE myindex/_doc/<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除索引</span></span><br><span class="line">DELETE myindex/</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>如果自定义有id字段，区分自定【id】和默认【_id】</li><li>_doc即默认类型，如果有自定义类型，操作可把【_doc】换为对应类型</li></ul><h2 id="DSL查询"><a href="#DSL查询" class="headerlink" title="DSL查询"></a>DSL查询</h2><blockquote><p>通过使用term查询得知ES中默认使用分词器为标准分词器(StandardAnalyzer),标准分词器对于英文单词分词,对于中文单字分词。</p><p>通过使用term查询得知,在ES的Mapping Type 中 keyword , date ,integer, long , double , boolean or ip 这些类型不分词，只有text类型分词。</p></blockquote><p>ES中的查询操作分为2种。</p><ul><li>查询(query)：默认会计算每个返回文档的得分，然后根据得分排序</li><li>过滤(filter)：只会筛选出符合的文档，并不计算得分，且它可以缓存文档 。所以，单从性能考虑，过滤比查询更快。</li></ul><p>换句话说，过滤适合在大范围筛选数据，而查询则适合精确匹配数据。一般应用时， 应先使用过滤操作过滤数据， 然后使用查询匹配数据。</p><ul><li>使用语法<ul><li>URL查询: GET    /索引/_search?参数</li><li>DSL查询: POST  /索引/_search {}</li></ul></li></ul><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>删除索引</span><br><span class="line">DELETE /ems</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建索引并指定类型</span><br><span class="line">PUT /ems</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;date&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>插入测试数据</span><br><span class="line">PUT /ems/_bulk</span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;小黑&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">23</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;北京&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;王小黑&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">24</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;上海&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张小五&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">8</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;无锡&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;win7&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">9</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;南京&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;梅超风&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">43</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;杭州&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张无忌&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">59</span><span class="punctuation">,</span><span class="attr">&quot;bir&quot;</span><span class="punctuation">:</span><span class="string">&quot;2012-12-12&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span><span class="punctuation">,</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;北京&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><p><strong>query</strong> ：查询</p><ul><li><p><strong>match_all</strong>: 返回索引中的全部文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>match</strong>：条件匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;redis api java key&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_should_match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;50%&quot;</span> #<span class="number">50</span>%命中率，即命中两个词就返回</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>multi_match</strong> : 多字段检索</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;operator&quot;</span><span class="punctuation">:</span> <span class="string">&quot;and&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">,</span><span class="string">&quot;content&quot;</span><span class="punctuation">]</span> #这里写要检索的指定字段</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>term</strong>: 用来使用关键词查询</p></li><li><p><strong>range</strong>: 用来指定查询指定范围内的文档</p><table><thead><tr><th align="left">符号标识</th><th>代表含义</th></tr></thead><tbody><tr><td align="left">gte</td><td>大于或等于</td></tr><tr><td align="left">gt</td><td>大于</td></tr><tr><td align="left">lte</td><td>小于或等于</td></tr><tr><td align="left">lt</td><td>小于</td></tr></tbody></table></li><li><p><strong>prefix</strong>: 用来检索含有指定前缀的关键词的相关文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>wildcard</strong>: 通配符查询 </p><ul><li><strong>?</strong>  用来匹配一个任意字符  </li><li><strong>*</strong> 用来匹配多个任意字符</li></ul></li><li><p><strong>regexp</strong>：正则搜索</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;red[a-z].+&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ids</strong> : 值为数组类型,用来根据一组id获取多个对应的文档</p></li><li><p><strong>fuzzy</strong>: 用来模糊查询含有指定关键字的文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fuzzy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;spring&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">fuzzy 模糊查询  最大模糊错误 必须在<span class="number">0</span><span class="number">-2</span>之间</span><br><span class="line"># 搜索关键词长度为 <span class="number">2</span> 不允许存在模糊 <span class="number">0</span></span><br><span class="line"># 搜索关键词长度为<span class="number">3</span><span class="number">-5</span> 允许一次模糊 <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"># 搜索关键词长度大于<span class="number">5</span> 允许最大<span class="number">2</span>模糊</span><br></pre></td></tr></table></figure></li><li><p><strong>bool</strong>: 用来组合多个条件实现复杂查询</p><ul><li><strong>must</strong>: 相当于&amp;&amp; 同时成立</li><li><strong>should</strong>: 相当于|| 成立一个就行。有一个特殊性，如果组合查询中没有 must 条件，那么 should 中必须至少匹配一个。可以通过 minimum_should_match 来限制它匹配更多个。</li><li> <strong>must_not</strong>: 相当于! 不能满足任何一个</li></ul></li></ul></li><li><p><strong>size</strong>: 指定查询结果中返回指定条数。 默认返回值10条</p></li><li><p><strong>from</strong>：用来指定起始返回位置，和size关键字连用可实现分页效果</p></li><li><p><strong>_source</strong>: 是一个数组,在数组中用来指定展示那些字段</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">,</span><span class="string">&quot;age&quot;</span><span class="punctuation">,</span><span class="string">&quot;address&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>highlight</strong>: 可以让符合条件的文档中的关键词高亮。自定义高亮html标签:<ul><li><strong>pre_tags</strong>：高亮前缀</li><li><strong>post_tags</strong>：高亮后缀</li><li><strong>require_field_match</strong>：开启多个字段高亮</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;redis&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;/span&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;require_field_match&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><blockquote><p>在执行filter和query时,先执行filter在执行query</p><p>Elasticsearch会自动缓存经常使用的过滤器，以加快性能</p></blockquote><ul><li><strong>filter</strong>：过滤<ul><li><strong>term</strong> : term 一般用在不分词字段上的，因为它是完全匹配查询，如果要查询的字段是分词字段就会被拆分成各种分词结果，和完全查询的内容就对应不上了</li><li><strong>terms</strong> : 类似于数据库的 in</li><li><strong>ranage</strong> : 查询范围</li><li><strong>exists</strong> : 是否存在</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#terms</span><br><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;constant_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> # 包含以下关键字</span><br><span class="line">            <span class="string">&quot;redis&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;api&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># ranage</span><br><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">23</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># exists</span><br><span class="line">GET /ems/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;exists&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;address&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p><strong>query</strong> ：查询</p><ul><li><strong>match_all</strong>: 返回索引中的全部文档</li><li><strong>match</strong>：条件匹配</li><li><strong>multi_match</strong> : 多字段检索</li><li><strong>term</strong>: 用来使用关键词查询</li><li><strong>range</strong>: 用来指定查询指定范围内的文档</li><li><strong>prefix</strong>: 用来检索含有指定前缀的关键词的相关文档</li><li><strong>wildcard</strong>: 通配符查询 ? =用来匹配一个任意字符   * =用来匹配多个任意字符</li><li><strong>regexp</strong>：正则搜索</li><li><strong>ids</strong> : 值为数组类型,用来根据一组id获取多个对应的文档</li><li><strong>fuzzy</strong>: 用来模糊查询含有指定关键字的文档</li><li><strong>bool</strong>: 用来组合多个条件实现复杂查询<ul><li><strong>must</strong>: 相当于&amp;&amp; 同时成立</li><li><strong>should</strong>: 相当于|| 成立一个就行。有一个特殊性，如果组合查询中没有 must 条件，那么 should 中必须至少匹配一个。可以通过 minimum_should_match 来限制它匹配更多个。</li><li> <strong>must_not</strong>: 相当于! 不能满足任何一个</li><li><strong>filter</strong>：过滤<ul><li><strong>term</strong> : term 一般用在不分词字段上的，因为它是完全匹配查询，如果要查询的字段是分词字段就会被拆分成各种分词结果，和完全查询的内容就对应不上了</li><li><strong>terms</strong> : 类似于数据库的 in</li><li><strong>ranage</strong> : 查询范围</li><li><strong>exists</strong> : 是否存在</li></ul></li></ul></li></ul></li><li><p><strong>size</strong>: 指定查询结果中返回指定条数。 默认返回值10条</p></li><li><p><strong>from</strong>：用来指定起始返回位置，和size关键字连用可实现分页效果</p></li><li><p><strong>_source</strong>: 是一个数组,在数组中用来指定展示那些字段</p></li><li><p><strong>highlight</strong>: 可以让符合条件的文档中的关键词高亮。自定义高亮html标签:</p><ul><li><strong>pre_tags</strong>：高亮前缀</li><li><strong>post_tags</strong>：高亮后缀</li><li><strong>require_field_match</strong>：开启多个字段高亮</li></ul></li></ul><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p><strong>聚合操作主要分以下四种类型</strong>：</p><table><thead><tr><th>聚合方式</th><th>解释</th></tr></thead><tbody><tr><td>Bucket Aggregation</td><td>一些满足特定条件的文档的集合</td></tr><tr><td>Metric Aggregation</td><td>一些数学计算，可以对文档字段统计分析</td></tr><tr><td>Pipeline Aggregation</td><td>对其他的聚合结果进行二次聚合</td></tr><tr><td>Metrix Aggregation</td><td>支持对多个字段的操作并提供一个结果矩阵</td></tr></tbody></table><p><strong>格式说明</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可简写为 aggs</span></span><br><span class="line"><span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="comment">//聚合的名字 自定义</span></span><br><span class="line">    <span class="attr">&quot;&lt;aggregation_name&gt;&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>   </span><br><span class="line">        <span class="comment">//聚合的类型</span></span><br><span class="line">        <span class="attr">&quot;&lt;aggregation_type&gt;&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>   </span><br><span class="line">            <span class="comment">//聚合体：对哪些字段进行聚合</span></span><br><span class="line">            &lt;aggregation_body&gt;      </span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="comment">//元</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">,</span><span class="attr">&quot;meta&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="punctuation">[</span>&lt;meta_data_body&gt;<span class="punctuation">]</span> <span class="punctuation">&#125;</span> <span class="punctuation">]</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在聚合里面在定义子聚合</span></span><br><span class="line">        <span class="punctuation">[</span><span class="punctuation">,</span><span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="punctuation">[</span>&lt;sub_aggregation&gt;<span class="punctuation">]</span>+ <span class="punctuation">&#125;</span> <span class="punctuation">]</span>?   </span><br><span class="line">    <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="comment">//聚合的名字2 ...</span></span><br><span class="line">    <span class="punctuation">[</span><span class="punctuation">,</span><span class="attr">&quot;&lt;aggregation_name_2&gt;&quot;</span> <span class="punctuation">:</span> </span><br><span class="line">     <span class="punctuation">&#123;</span> </span><br><span class="line">     ... </span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">...<span class="punctuation">]</span>                   </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="简单聚合查询例子"><a href="#简单聚合查询例子" class="headerlink" title="简单聚合查询例子"></a>简单聚合查询例子</h3><p><strong>数据</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建索引字段映射</span></span><br><span class="line">PUT employee</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">PUT employee/_bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bob&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">8000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Rod&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">18000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;female&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gaving&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">12000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;King&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dba&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">15000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;female&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jonhson&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dba&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">16000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Douge&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">41</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">20000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;female&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cutting&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dba&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">7000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bona&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">14000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;female&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Shyon&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dba&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">19000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;female&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;James&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">22000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Golsling&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">23000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;female&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lily&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jack&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">3000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;female&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Rose&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">6000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;female&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Will&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dba&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">4500</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smith&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span> <span class="attr">&quot;sal&quot;</span><span class="punctuation">:</span> <span class="number">23000</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>查询工种有几种类型</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">GET employee/_doc/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job_category_count&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;cardinality&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;job&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果报错，需要打开支持聚合索引先执行  注意聚合操作那个字段需要给字段映射添加fielddata：true，最好在字段映射时添加上</span></span><br><span class="line">PUT employee/_mapping/_doc/</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span>     <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fielddata&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">548</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job_category_count&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>查询每个工种分桶信息</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">GET employee/_doc/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job_agg_info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;job&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job_agg_info&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dba&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>查询每个工种的数量，以及不同工种的工资统计信息</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">GET employee/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job_and_salary_info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;job&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;sal_info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sal&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">6044</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job_and_salary_info&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sal_info&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;min&quot;</span> <span class="punctuation">:</span> <span class="number">2000.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;max&quot;</span> <span class="punctuation">:</span> <span class="number">23000.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;avg&quot;</span> <span class="punctuation">:</span> <span class="number">13428.57142857143</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sum&quot;</span> <span class="punctuation">:</span> <span class="number">94000.0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dba&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sal_info&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;min&quot;</span> <span class="punctuation">:</span> <span class="number">4500.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;max&quot;</span> <span class="punctuation">:</span> <span class="number">19000.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;avg&quot;</span> <span class="punctuation">:</span> <span class="number">12300.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sum&quot;</span> <span class="punctuation">:</span> <span class="number">61500.0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;html&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sal_info&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;count&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;min&quot;</span> <span class="punctuation">:</span> <span class="number">3000.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;max&quot;</span> <span class="punctuation">:</span> <span class="number">22000.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;avg&quot;</span> <span class="punctuation">:</span> <span class="number">14250.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sum&quot;</span> <span class="punctuation">:</span> <span class="number">57000.0</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/aiyblog/2020/08/26/java/java%E5%9F%BA%E7%A1%80/"/>
      <url>/aiyblog/2020/08/26/java/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><ul><li>简单泛型类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> E key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">(E key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此方法并不是泛型方法，只是使用了类的泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getKey</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此方法并不是泛型方法，只是使用了类的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(E key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子类继承泛型父类"><a href="#子类继承泛型父类" class="headerlink" title="子类继承泛型父类"></a>子类继承泛型父类</h4><ul><li>不指定父类泛型，默认为Object</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不指定子类泛型，则需要直接指定父类泛型类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 子类不指定泛型，需直接指定父类泛型类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指定子类泛型需与父类泛型保持一致</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类泛型需和子类泛型一致，</span></span><br><span class="line"><span class="comment"> * 虽然Parent中泛型等于E，但这里子类定义泛型为T 也需把父类泛型写成T，</span></span><br><span class="line"><span class="comment"> * 定义子类继承父类时，泛型需保持一致，相当于把T当成类型传递给父类使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指定多个子类泛型，指定的父类泛型时需包含在子类泛型列表中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parent&lt;x&gt;中的泛型需在 Child&lt;...&gt;泛型列表中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span>&lt;T,E&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">(T key,E value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(key);</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ul><li>泛型类接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;E&gt; &#123;</span><br><span class="line">    E <span class="title function_">getKey</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现类不是泛型类，接口要明确数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现类也是泛型类，实现类和接口的泛型类型要一致</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pear</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><ul><li>public与返回值中间<T>非常重要，可以理解为声明此方法为泛型方法，只有声明了<T>的方法才是泛型方法</li><li>泛型类中的使用了泛型的成员方法并不是泛型方法。</li><li><T>表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T，与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">toList</span><span class="params">(T... arr)</span> &#123;</span><br><span class="line">    List&lt;T&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line">    <span class="keyword">for</span> (T element : arr) &#123;</span><br><span class="line">        lists.add(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lists;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getOne</span><span class="params">(T... arr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(arr.length)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getOneRandom</span><span class="params">(List&lt;T&gt; lists)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lists.get(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(lists.size()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型方法的泛型与类的泛型是相互独立不影响的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKey</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; E <span class="title function_">getValue</span><span class="params">(E obj)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用可以发现泛型方法泛型和类泛型互不影响</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    Generic&lt;Integer&gt; generic = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;&gt;(<span class="number">111</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> generic.getKey();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> generic.getValue(<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><blockquote><p>Integer 为 Number子类</p></blockquote><ul><li>普通泛型类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> E first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirst</span><span class="params">(E first)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">         Box&lt;Number&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">         box1.setFirst(<span class="number">100</span>);</span><br><span class="line">         showBox(box1);</span><br><span class="line"></span><br><span class="line">        Box&lt;Integer&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">        box1.setFirst(<span class="number">200</span>);</span><br><span class="line">        showBox(box2);  <span class="comment">// 报错，方法参数泛型不同</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBox</span><span class="params">(Box&lt;Number&gt; box1)</span> &#123;</span><br><span class="line">        System.out.println(box1.getFirst());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通配符【-】"><a href="#通配符【-】" class="headerlink" title="通配符【?】"></a>通配符【?】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">         Box&lt;Number&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">         box1.setFirst(<span class="number">100</span>);</span><br><span class="line">         showBox(box1);</span><br><span class="line"></span><br><span class="line">        Box&lt;Integer&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">        box1.setFirst(<span class="number">200</span>);</span><br><span class="line">        showBox(box2);  <span class="comment">// 不报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用泛型通配符&quot;?&quot; 接收任意类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBox</span><span class="params">(Box&lt;?&gt; box1)</span> &#123;</span><br><span class="line">        System.out.println(box1.getFirst());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通配符上限【-extents】"><a href="#通配符上限【-extents】" class="headerlink" title="通配符上限【? extents】"></a>通配符上限【? extents】</h4><ul><li>要求该泛型的类型，只能是实参类型，或实参类型的子类类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">         Box&lt;Number&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">         box1.setFirst(<span class="number">100</span>);</span><br><span class="line">         showBox(box1);</span><br><span class="line"></span><br><span class="line">        Box&lt;Integer&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">        box1.setFirst(<span class="number">200</span>);</span><br><span class="line">        showBox(box2);  <span class="comment">// 不报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用泛型通配符&quot;?&quot; 只能接收Number及其子类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBox</span><span class="params">(Box&lt;? extends Number&gt; box1)</span> &#123;</span><br><span class="line">        System.out.println(box1.getFirst());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用通配符上限修饰，如果是列表则不能添加元素，因为【?】上限限定子类也能接收，所以无法确定接收的是何种类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">222</span>);  <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定类型可以添加子类型</span></span><br><span class="line">    List&lt;Number&gt; listNumber = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; listInteger = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    listInteger.add(<span class="number">111</span>); <span class="comment">// 不报错</span></span><br><span class="line">    listNumber.add(<span class="number">111</span>); <span class="comment">// 不报错</span></span><br><span class="line">    listNumber.addAll(listInteger); <span class="comment">// 不报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通配符下限【-super】"><a href="#通配符下限【-super】" class="headerlink" title="通配符下限【? super】"></a>通配符下限【? super】</h4><ul><li>要求该泛型的类型，只能是实参类型，或实参类型的父类类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">         Box&lt;Number&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">         box1.setFirst(<span class="number">100</span>);</span><br><span class="line">         showBox(box1);</span><br><span class="line"></span><br><span class="line">        Box&lt;Integer&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">        box1.setFirst(<span class="number">200</span>);</span><br><span class="line">        showBox(box2);  <span class="comment">// 报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用泛型通配符&quot;?&quot; 只能接收Number及其父类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBox</span><span class="params">(Box&lt;? <span class="built_in">super</span> Number&gt; box1)</span> &#123;</span><br><span class="line">        System.out.println(box1.getFirst());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下限通配符，如果是列表可以添加数据，但不保证数据类型。</li></ul><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><p><strong>类型擦除</strong>：泛型是Java 1.5版本才引进的概念，在这之前是没有泛型的，但是，泛型代码能够很好地和之前版本的代码兼容。那是因为，泛型信息只存在于代码编译阶段，在进入JVM之前，与泛型相关的信息会被擦除掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; intList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;() ;</span><br><span class="line"></span><br><span class="line">        System.out.println(intList.getClass().getSimpleName());   <span class="comment">// ArrayList</span></span><br><span class="line">        System. out.println(strList.getClass().getSimpleName ()); <span class="comment">// ArrayList</span></span><br><span class="line"></span><br><span class="line">        System. out. println(intList.getClass() == strList.getClass()); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无限制类型擦除"><a href="#无限制类型擦除" class="headerlink" title="无限制类型擦除"></a>无限制类型擦除</h4><p><img src="D:\Users\xiaoaiying\Typora\img\image-20210908005446933.png" alt="image-20210908005446933"></p><h4 id="有限制类型擦除"><a href="#有限制类型擦除" class="headerlink" title="有限制类型擦除"></a>有限制类型擦除</h4><p><img src="D:\Users\xiaoaiying\Typora\img\image-20210908005514394.png" alt="image-20210908005514394"></p><h4 id="擦除方法中类型定义的参数"><a href="#擦除方法中类型定义的参数" class="headerlink" title="擦除方法中类型定义的参数"></a>擦除方法中类型定义的参数</h4><p><img src="D:\Users\xiaoaiying\Typora\img\image-20210908005956970.png" alt="image-20210908005956970"></p><h4 id="桥接方法"><a href="#桥接方法" class="headerlink" title="桥接方法"></a>桥接方法</h4><p><img src="D:\Users\xiaoaiying\Typora\img\image-20210908005852420.png" alt="image-20210908005852420"></p><h3 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h3><ul><li>可以声明带泛型的数组引用，但是不能直接创建带泛型的数组对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt;[] listArr1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;[<span class="number">5</span>];         <span class="comment">//报错</span></span><br><span class="line">    ArrayList&lt;String&gt;[] listArr2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;[<span class="number">5</span>];   <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">    ArrayList[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">5</span>];</span><br><span class="line">    ArrayList&lt;String&gt;[] listArr3 = list;  <span class="comment">//不报错 但有弊端</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弊端例如：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    ArrayList[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">5</span>];</span><br><span class="line">    ArrayList&lt;String&gt;[] listArr3 = list;  <span class="comment">//不报错</span></span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; intList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    intList.add(<span class="number">100</span>);</span><br><span class="line">    list[<span class="number">0</span>] = intList;</span><br><span class="line">    System.out.println(listArr3[<span class="number">0</span>].get(<span class="number">0</span>)); <span class="comment">// 类型转换异常，因为存入Integer类型 取的时候用泛型String取</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt;[] listArr3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">5</span>];  <span class="comment">//不报错</span></span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; intList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    intList.add(<span class="number">100</span>);</span><br><span class="line">    listArr3[<span class="number">0</span>] = intList;  <span class="comment">// 编译时即会报错</span></span><br><span class="line">   </span><br><span class="line">    ArrayList&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    intList.add(<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line">    listArr3[<span class="number">0</span>] = strList;  <span class="comment">// 不会报错</span></span><br><span class="line">    System.out.println(listArr3[<span class="number">0</span>].get(<span class="number">0</span>)); </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以通过java.lang.reflect.Array的newInstance (Class<T>,int)创建T[]数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fruit</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> T[] array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Fruit</span><span class="params">(Class&lt;T&gt;clz,<span class="type">int</span> length)</span>&#123;</span><br><span class="line"><span class="comment">//通过Array.newInstance创建泛型数组</span></span><br><span class="line">array = (T[]) Array.newInstance(clz,length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> index,T item)</span>&#123;</span><br><span class="line">array[index] = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> array[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> T[] getArray()&#123;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射与泛型"><a href="#反射与泛型" class="headerlink" title="反射与泛型"></a>反射与泛型</h3><ul><li>Person类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>反射指定泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 使用泛型</span></span><br><span class="line">    Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">    Constructor&lt;Person&gt; constructor = personClass.getConstructor();</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> constructor. newInstance ();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不使用泛型</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">personClass</span> <span class="operator">=</span> Person.class;</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> personClass. getConstructor();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> constructor. newInstance() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring初识</title>
      <link href="/aiyblog/2020/01/26/spring/spring%E5%88%9D%E8%AF%86/"/>
      <url>/aiyblog/2020/01/26/spring/spring%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="程序的耦合"><a href="#程序的耦合" class="headerlink" title="程序的耦合"></a>程序的耦合</h2><p><strong>耦合</strong>：程序间的依赖关系</p><ul><li>类间依赖</li><li>方法间依赖</li></ul><p><strong>解耦</strong>：降低程序间的依赖关系</p><ul><li>实际开发中应做到：编译期不依赖，运行时才依赖</li><li>第一步：使用反射创建对象，而避免使用new关键字</li><li>第二步：通过读取配置文件来获取要创建的对象全限定类名</li></ul><h2 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h2><p>工厂：一个创建Bean对象的工厂</p><p>Bean：在计算机英语中，有可从用组件的含义    </p><p>JavaBean：用java英语编写的可重用组件</p><blockquote><p>javabean &gt; 实体类</p></blockquote><p>第一个：需要一个配置文件来配置我们的service和dao</p><ul><li>配置的内容：1-唯一标识=全限定类名(key=value)</li></ul><p>第二个：通过读取配置文件中配置的内容，反射创建对象</p><ul><li>配置文件可以是xml也可以是properties</li><li>单例对象：对象被创建一次，类内成员只初始化一次，从始至终只有一个对象<ul><li>线程问题：多个线程访问修改同一对象容易出问题<br>实现单例即在通过反射创建对象时只能调用一次</li></ul></li><li>多例对象：对象被创建多次，<pre><code>    效率问题：执行效率没有单例对象高</code></pre></li></ul><blockquote><p>静态代码块随着类加载只执行一次，后续通过类来创建对象时静态代码块不再执行，<br>即在静态代码块中为类属性赋值后，每次创建的对象对应的属性都会先有相同的值。</p></blockquote><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><ul><li>配置文件</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">accountService</span>=<span class="string">com.xiaoai.t2.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span>=<span class="string">com.xiaoai.t2.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure><ul><li>工厂类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个properties对象</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Properties props;</span><br><span class="line">    <span class="comment">//定义一个map，用于存放我们要创建的对象，我们称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line">    <span class="comment">//使用静态代码块为properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="comment">//获取配置文件流对象</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            props.load(in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">            <span class="comment">//取出properties配置文件中所有的key</span></span><br><span class="line">            <span class="type">Enumeration</span> <span class="variable">keys</span> <span class="operator">=</span> props.keys();</span><br><span class="line">            <span class="comment">//遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys.nextElement().toString();</span><br><span class="line">                <span class="comment">//根据key获取value</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">beanPath</span> <span class="operator">=</span> props.getProperty(key);</span><br><span class="line">                <span class="comment">//反射创建对象</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">//把key和value存入容器中</span></span><br><span class="line">                beans.put(key, value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExceptionInInitializerError</span>(<span class="string">&quot;初始化properties失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">///**</span></span><br><span class="line">    <span class="comment">// * 根据bean的名称获取bean对象(反射创建bean)即多例</span></span><br><span class="line">    <span class="comment">// * @param beanName</span></span><br><span class="line">    <span class="comment">// * @return</span></span><br><span class="line">    <span class="comment">// */</span></span><br><span class="line">    <span class="comment">//public static Object getBean(String beanName) &#123;</span></span><br><span class="line">    <span class="comment">//Object bean = null;</span></span><br><span class="line">    <span class="comment">//try &#123;</span></span><br><span class="line">    <span class="comment">//String beanPath = props.getProperty(beanName);</span></span><br><span class="line">    <span class="comment">//bean = Class.forName(beanPath).newInstance();</span></span><br><span class="line">    <span class="comment">//&#125; catch (Exception e) &#123;</span></span><br><span class="line">    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//return bean;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据bean的名称获取bean对象(工厂(容器)获取bean)即每次获取的都是同一对象，单例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ioc（控制反转）"><a href="#ioc（控制反转）" class="headerlink" title="ioc（控制反转）"></a>ioc（控制反转）</h2><p>Inversion of Control 把创建对象的权利交给框架或交给工厂    </p><ul><li>作用：降低程序间的依赖关系也叫削减计算机程序的耦合</li></ul><p>通过new 来创建对象即本身创建具有独立自主控制权，而通过工厂创建（即不通过new创建）对象，工厂是通过所给予的key所对应全限定类名控制，无法独立自主控制，控制权发生了转移则成为控制反转（ioc），把控制权交个了工厂来帮忙创建对象，带来好处：降低程序间的依赖关系也叫削减计算机程序的耦合</p><h3 id="spring中Ioc入门"><a href="#spring中Ioc入门" class="headerlink" title="spring中Ioc入门"></a>spring中Ioc入门</h3><p><strong>基于XML的ioc配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建spring的xmp配置文件引入依赖--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><ul><li>配置bean的id（即key）class（即value==全限定类名）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把对象的创建交给spring来管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t3spring1.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t3spring1.dao.impl.AccountDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加载配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取核心容器对象</span></span><br><span class="line"><span class="comment">ApplicationContext三个常用实现类：</span></span><br><span class="line"><span class="comment">【ClassPathXmlApplicationContext()】可加载类路径下配置文件，要求配置文件必须在类路径下，不在则无法加载</span></span><br><span class="line"><span class="comment">【FileSystemXmlApplicationContext()】 可加载磁盘任意路径下的配置文件(必须有访问权限)</span></span><br><span class="line"><span class="comment">【AnnotationConfigApplicationContext()】用于读取注解创建容器的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过bean的id获取对象</span></span><br><span class="line"><span class="type">IAccountService</span> <span class="variable">as</span> <span class="operator">=</span> (AccountServiceImpl) ac.getBean(<span class="string">&quot;accountService&quot;</span>);<span class="comment">//获取对象方法一</span></span><br><span class="line"><span class="type">IAccountDao</span> <span class="variable">adao</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;accountDao&quot;</span>,IAccountDao.class);<span class="comment">//获取对象方法二</span></span><br></pre></td></tr></table></figure><h3 id="配置文件扫描"><a href="#配置文件扫描" class="headerlink" title="配置文件扫描"></a>配置文件扫描</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、spring的xml配置文件中添加标签    </span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">ignore-unresolvable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbcConfig.properties&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line">2、通过 util:properties 标签实现配置文件加载</span><br><span class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">&quot;util_Spring&quot;</span>  <span class="attr">local-override</span>=<span class="string">&quot;true&quot;</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbcConfig.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">3、通过注解 @PropertySource 注解实现配置文件加载</span><br><span class="line">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span><br><span class="line">....等等</span><br></pre></td></tr></table></figure><h3 id="基于注解的ioc配置"><a href="#基于注解的ioc配置" class="headerlink" title="基于注解的ioc配置"></a>基于注解的ioc配置</h3><p>为需要管理的类加上相应的注解</p><blockquote><p>例如：@Component</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在spring配置文件中扫描对应的包</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   告知spring在创建容器时要扫描的包，即扫描注解。</span></span><br><span class="line"><span class="comment">   配置所需要的标签不是在beans的约束中，而是一个 名称为context名称控件和约束中，</span></span><br><span class="line"><span class="comment">   所以需要先添加对应约束，然后在扫描。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">如：<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiaoai.t4annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">加载配置文件</span><br><span class="line">ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span><br><span class="line"></span><br><span class="line">通过bean的id获取对象</span><br><span class="line">IAccountService as = (AccountServiceImpl) ac.getBean(&quot;accountService&quot;);</span><br></pre></td></tr></table></figure><blockquote><p>如果注解value配置相应的值（即相当于id）则要通过其来获取，没有配置默认为类名首字母小写</p></blockquote><h3 id="核心容器两个接口引发的问题"><a href="#核心容器两个接口引发的问题" class="headerlink" title="核心容器两个接口引发的问题"></a>核心容器两个接口引发的问题</h3><p><strong>ApplicationContext</strong>：构建核心容器时，创建对象采取策略时采用立即加载的方式，也就是说，只要一读取完配置文件马上就创建配置文件中配置的bean</p><ul><li>单例对象适用        开发中更多是采用此接口</li></ul><p><strong>BeanFactory</strong>：构建核心容器时，创建对象采取的策略时采用延迟加载的方式。也就是说，什么时候根据id获取对象时才真正创建对象</p><ul><li>多例对象适用</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="创建bean的三种方法"><a href="#创建bean的三种方法" class="headerlink" title="创建bean的三种方法"></a>创建bean的三种方法</h3><p>【<strong>类默认构造函数创建对象</strong>】 </p><p>spring配置文件中用bean标签配以id和class属性且没有其他属性和标签时。采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例子：<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t3spring1.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【<strong>工厂中普通方法创建对象</strong>】</p><p>即使用某类中方法创建对象，并存入spring容器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFacroty&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xioaai.factory.InstanceFacroty&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFacroty&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【<strong>工厂中静态方法创建对象</strong>】</p><p>使用某个类中的静态方法创建对象并存入srping容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.xioaai.factory.StaticFacroty&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean的作用范围"><a href="#bean的作用范围" class="headerlink" title="bean的作用范围"></a>bean的作用范围</h3><p>bean标签scope属性：用于指定bean的作用范围，scope属性取值</p><table><thead><tr><th align="left">属性值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">singleton</td><td align="left">单例的（默认值）</td></tr><tr><td align="left">prototype</td><td align="left">多例的（创建多个对象）</td></tr><tr><td align="left">request</td><td align="left">作用于web应用的请求范围</td></tr><tr><td align="left">session</td><td align="left">作用于web应用的会话范围</td></tr><tr><td align="left">global-session</td><td align="left">作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</td></tr></tbody></table><h3 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h3><p><strong>单例对象</strong>：</p><ul><li>出生==当容器创建时</li><li>活着==重要容器还活着，对象一直活着</li><li>死亡==容器销毁，对象死亡</li></ul><p><strong>多例对象</strong>：</p><ul><li>出生==当我们使用对象时spring创建对象    </li><li>活着==对象只要是在使用过程中就一直活着</li><li>死亡==当对象长时间不用且没有别的对象引用时，由java垃圾回收机制销毁</li></ul><h3 id="spring依赖注入"><a href="#spring依赖注入" class="headerlink" title="spring依赖注入"></a>spring依赖注入</h3><p>(Dependency Injection)。依赖关系(在当前类需要用到其他类对象)的管理都交给spring来维护，由spring为我们提供，我们只需在配置文件中说明。依赖关系的维护即称为依赖注入，</p><h4 id="三类能注入的数据"><a href="#三类能注入的数据" class="headerlink" title="三类能注入的数据"></a><strong>三类能注入的数据</strong></h4><ul><li>1-基本类型和String</li><li>2-其他bean类型（在配置文件中或者注解配置过的bean）</li><li>3-复杂类型/集合类型</li></ul><p>复杂类型/集合类型例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set方法 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyStrs</span><span class="params">(String[] myStrs)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.myStrs = myStrs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.myList = myList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.mySet = mySet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.myMap = myMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyProps</span><span class="params">(Properties myProps)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.myProps = myProps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring配置文件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    复杂数据类型(数组/集合)的注入</span></span><br><span class="line"><span class="comment">    用于给lis结构集合注入的标签：list array set</span></span><br><span class="line"><span class="comment">    用于给map结构集合注入的标签：map props</span></span><br><span class="line"><span class="comment">    结论：结构相同，标签可互换。</span></span><br><span class="line"><span class="comment">即：</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span><span class="comment">&lt;!--list标签给set类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>setAAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>setBBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>setCCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span> <span class="comment">&lt;!--map标签可以给Properties类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;prop1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>propAAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;prop2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>propBBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t3spring1.service.impl.AccountServiceImpl3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数组数据注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 集合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>listAAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>listBBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>listCCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>setAAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>setBBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>setCCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;map1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mapAAA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;map2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mapBBB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;map3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mapCCC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;prop1&quot;</span>&gt;</span>propAAA<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;prop2&quot;</span>&gt;</span>propBBB<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三种注入方式"><a href="#三种注入方式" class="headerlink" title="三种注入方式"></a>三种注入方式</h4><ul><li><strong>1-使用构造函数提供</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//提供构造方法</span><br><span class="line">public AccountServiceImpl(String name, Integer age, Date birthday) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--一、 构造函数注入</span></span><br><span class="line"><span class="comment">使用标签：bonstructor-arg属性如下：</span></span><br><span class="line"><span class="comment">type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型</span></span><br><span class="line"><span class="comment">index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引从0开始</span></span><br><span class="line"><span class="comment">name：用于指定给构造函数中指定名称的参数赋值常用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">===========以上三个用于指定给构造中那个参数赋值============================</span></span><br><span class="line"><span class="comment">value：用于提供基本类型和string类型的数据</span></span><br><span class="line"><span class="comment">ref：用于指定其他的bean类型数据，它指的就是在spring的Ioc核心容器中出现过的bean对象</span></span><br><span class="line"><span class="comment">标签出现位置：bean标签内</span></span><br><span class="line"><span class="comment">优势：在获取bean对象时，注入数据时必须的操作，否则对象无法创建成功</span></span><br><span class="line"><span class="comment">弊端：改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t3spring1.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;泰斯特&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置一个日期对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>2-使用set方法提供</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//对象中的set方法</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(Integer age) &#123;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">public void setBirthday(Date birthday) &#123;</span><br><span class="line">this.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">二、set方法注入更常用该方式注入数据</span></span><br><span class="line"><span class="comment">使用标签：property属性如下：</span></span><br><span class="line"><span class="comment">name：用于指定注入数据时所调用的set方法名称</span></span><br><span class="line"><span class="comment">value：用于提供基本类型和String类型数据</span></span><br><span class="line"><span class="comment">ref：用于指定其他bean类型数据。它指的是在spring的Ioc核心容器中出现过的bean对象</span></span><br><span class="line"><span class="comment">出现位置：bean标签内部</span></span><br><span class="line"><span class="comment">优势：创建对象时没有明确的限制，可以直接使用默认的构造函数</span></span><br><span class="line"><span class="comment">弊端：如果有某个成员必须有值，则获取对象时有可能set方法没有执行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t3spring1.service.impl.AccountServiceImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;TEST&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置一个日期对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>3-使用注解提供</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注解：@Value</span><br></pre></td></tr></table></figure><h3 id="spring中Ioc常用注解"><a href="#spring中Ioc常用注解" class="headerlink" title="spring中Ioc常用注解"></a>spring中Ioc常用注解</h3><p>ioc容器中保存类型：map类型。key==id，value=全限定类名(即对象)</p><p>曾经xml配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t3spring1.dao.impl.AccountDaoImpl&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1-创建对象"></a><strong>1-创建对象</strong></h4><p>作用和xml配置文件中编写一个<bean>标签实现功能一样</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>用于把当前类对象存入spring容器中。</td></tr><tr><td>@Controller</td><td>一般用于表现层</td></tr><tr><td>@Service</td><td>一般用于服务层</td></tr><tr><td>@Repository</td><td>一般用于持久层</td></tr></tbody></table><ul><li>以上三个注解作用和属性与Component一摸一样。</li><li>它们三个时spring框架为我们提供明确的三层使用的注解。</li><li>使我们的三层对象更加清晰</li></ul><h4 id="2-注入数据"><a href="#2-注入数据" class="headerlink" title="2-注入数据"></a>2-注入数据</h4><p>作用和<bean>标签内写一个<property>标签作用一样</p><p>【**@Autowired**】</p><p>自动按照类型注入。只要容器中有唯一的bean对象类型和要注入的变量类型匹配，就可以注入成功。</p><ul><li>出现位置：可以是成员变量，也可以是方法上。</li><li>多匹配问题：如果ioc容器中有多个匹配的bean类型时，先按照类型圈定出匹配的bean对象，然后根据变量名称在圈定出的bean对象查找，如果找到也能注入，如果找不到则报错。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解将类交个ioc管理</span></span><br><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IAccountDao</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过注解注入对象</span></span><br><span class="line"><span class="comment">//当有多个bean匹配时，由于上面有bean名称叫accountDao，变量名也叫accountDao，所以可以注入</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao;</span><br></pre></td></tr></table></figure><p>【**@Qualifier**】</p><p>作用为按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用，要和@Autowired一起用。但是在给方法参数注入时可以（给方法参数注入相当于@Resource一样可通过名称直接）</p><ul><li>属性value：指定注入bean对象的id</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;accountDao2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;runner&quot;)</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> QueryRunner <span class="title function_">createQueryRunner</span><span class="params">(<span class="meta">@Qualifier(&quot;ds2&quot;)</span>DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【**@Resource**】</p><p>直接按照bean的id给某对象注入数据，它可独立使用。</p><ul><li>属性name：用于指定注入bean对象的id</li></ul><blockquote><p>以上三个注解都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。</p><p>另外集合类型的注入只能通过xml来实现。        </p></blockquote><p>【**@value**】</p><p>用于注入基本类型和string类型的数据</p><ul><li>属性value：用于指定数据的值。它可以使用spring中SpEl(也就是spring的el表达式)<ul><li>使用SpEl时可以先把配置文件加入容器：如在配置类上加注解@PropertySource(“classpath:jdbcConfig.properties”)</li><li>SpEl的写法：${表达式}    </li></ul></li></ul><h4 id="3-改变作用范围"><a href="#3-改变作用范围" class="headerlink" title="3-改变作用范围"></a>3-改变作用范围</h4><p>作用和在<bean>标签中写一个scope属性实现功能一样</p><p>【**@Scope**】:用于指定的bean的作用范围</p><ul><li>位置：可写在类上面、配置类方法上</li><li>属性value：指定范围的取值。常用取值：singleton（默认）、prototype</li></ul><h4 id="4-生命周期有关"><a href="#4-生命周期有关" class="headerlink" title="4-生命周期有关"></a>4-生命周期有关</h4><p>作用和在<bean>标签中使用 init-method和destroy-method属性一样</p><ul><li>位置：写在方法上</li></ul><p>【**@PostConstruct<strong>】：用于指定初始化方法<br>【</strong>@ProDestroy**】：用于指定销毁方法</p><h3 id="Spring中的新注解"><a href="#Spring中的新注解" class="headerlink" title="Spring中的新注解"></a>Spring中的新注解</h3><p>【**@Configuration**】 </p><p>指定当前类为一个配置类</p><ul><li>细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时SpringConfiguration类上的@Configuration可省略不写</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfiguration.class);</span><br></pre></td></tr></table></figure><p>【**@ComponentScan**】 </p><p>用于通过注解指定spring在创建容器时要扫描的包</p><ul><li>属性basePackages：它和配置文件扫描包中属性basePackages的作用一样，都是用于指定创建容器时要扫描的包。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用此注解就等同于在xml中配置了：</span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiaoai.t5dbutils&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【**@Bean**】 用于把当前方法的返回值作为bean对象存入spring的ioc容器中</p><ul><li><p>属性name：用于指定bean的id，当不指定时默认值为当前方法名称</p></li><li><p>细节：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象</p><ul><li>查找方式和@Autowired注解一样    </li></ul></li></ul><p>【**@Import**】 导入其他配置类<br>即在主配置类上面通过该注解导入其他小块配置类，这样在创建AnnotationConfigApplicationContext对象时，既不用把其他小块配置类当参数传入，也不需要在其他小块配置类上添加@Configuration注解</p><ul><li>使用@Import注解后，有@Import注解的类就是父类，导入的都是子配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他小块配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;runner&quot;)</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> QueryRunner <span class="title function_">createQueryRunner</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;dataSource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">()</span> &#123; </span><br><span class="line">        ComboPooledDataSource ds;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ds = <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">            ds.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            ds.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/jfs_mybatis&quot;</span>);</span><br><span class="line">            ds.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.xiaoai.t5dbutils&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfiguration</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfiguration.class);</span><br></pre></td></tr></table></figure><p>【**@PropertySource**】  用于指定properties文件的位置</p><ul><li>属性value：指定文件的名称和路径</li><li>关键字classpath：表示类路径下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有其他包路径可以这样写：classpath:conf/spring/jdbcConfig.properties</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="spring整合junit"><a href="#spring整合junit" class="headerlink" title="spring整合junit"></a>spring整合junit</h2><p>1-导入spring整合junit的jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2-使用junit提供的一个注解把junit原有的main方法替换了，替换成spring提供的</p><p>【@RunWith】把junit原有的main方法替换了，替换成spring提供的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：<span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br></pre></td></tr></table></figure><p>3-告知spring的运行器，spring和ioc创建是基于xml还是注解的，并说明位置。<br>【@ContextConfiguration】</p><ul><li>属性locations:指定xml文件位置，加上classpath关键字，表示在类路径下</li><li>属性classes：指定注解类所在地位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：<span class="meta">@ContextConfiguration(classes = SpringConfiguration.class)</span></span><br></pre></td></tr></table></figure><blockquote><p>当使用spring5.x版本的时候，要求junit的jar必须是4.12及以上        </p></blockquote><h2 id="aop-面向对象编程"><a href="#aop-面向对象编程" class="headerlink" title="aop( 面向对象编程)"></a>aop( 面向对象编程)</h2><p>(Aspect Oriented Programming) 面向对象编程，类似使用动态代理增强方法</p><ul><li>实现方式：动态代理</li></ul><p>spring配置中可以手动控制是通过基于接口还是基于子类的动态代理</p><p>词：</p><ul><li>**连接点(Joinpoint)**：指那些被拦截到的点。指方法，因为spring只支持方法类型的连接点</li><li>**切入点(Pointcut)**：被动态代理增强的方法(所有的切入点都是连接点，但不是所有连接点都是切入点)</li><li>**通知/增强(Advice)**：指拦截到Joinpoint之后要做的事情就是通知</li></ul><p>通知类型：</p><ul><li>前置通知</li><li>后置通知</li><li>异常通知</li><li>最终通知</li><li>环绕通知</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IAccountService <span class="title function_">getAccountService</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">IAccountService</span> <span class="variable">proxyAccountService</span> <span class="operator">=</span> (IAccountService) Proxy.newProxyInstance(</span><br><span class="line">        accountService.getClass().getClassLoader(),</span><br><span class="line">        accountService.getClass().getInterfaces(), <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span><span class="comment">//整个invoke方法在执行就是环绕通知</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">rtValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//开启事务</span></span><br><span class="line">                    txManager.beginTransaction();<span class="comment">//即前置通知</span></span><br><span class="line">                   </span><br><span class="line">                    <span class="comment">//执行操作</span></span><br><span class="line">                    <span class="comment">//切入点方法具体执行：环绕通知中有明确的切入点方法调用</span></span><br><span class="line">                    rtValue = method.invoke(accountService,args);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//提交事务</span></span><br><span class="line">                    txManager.commit();<span class="comment">//后置通知</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//返回结果</span></span><br><span class="line">                    <span class="keyword">return</span> rtValue;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//回滚事务</span></span><br><span class="line">                    txManager.rollback();<span class="comment">//异常通知</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//关闭连接</span></span><br><span class="line">                    txManager.close();<span class="comment">//最终通知</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">return</span> proxyAccountService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后置通知和异常通知永远只能执行一个</p></blockquote><p><strong>引介(Introduction</strong>)：特殊的通知，在不修改代码前提下，引介可以在运行期为类动态地添加一些方法Field。<br>**目标对象(Target)**：代理的目标对象<br>**织入(Weaving)**：指把增强应用到目标对象来创建新的代理对象的过程<br>**代理(Proxy)**：一个类被aop织入增强后，就产生一个结果代理类。<br>**切面(Asect)**：切入点和通知(引介)的结合</p><p>明确：</p><pre><code>- 开发阶段    我们    编写核心业务代码(开发主线)    公用代码抽取，制作成通知    配置文件中，声明切入点与通知关系，即切面- 运行阶段    spring框架监控切入点方法执行，一执行代理机制创建对象，根据通知类别，在代理对象对应位置将通知织入，完成完整代码逻辑</code></pre><h3 id="基于xml配置aop"><a href="#基于xml配置aop" class="headerlink" title="基于xml配置aop"></a>基于xml配置aop</h3><p>spring中基于xml的aop配置步骤：</p><ul><li>把通知的Bean交给spring来管理</li><li>使用<a href="aop:config">aop:config</a>标签名开始aop配置</li><li>使用<a href="aop:aspect">aop:aspect</a>标签名配置切面<ul><li>属性id：是给切面提供一个唯一标识</li><li>属性ref：指定通知类bean的id</li></ul></li><li><a href="aop:aspect">aop:aspect</a>标签内部使用对应标签配置通知类型并绑定切入点方法<ul><li>属性method：用于指定通知bean那个方法时相应的通知</li><li>属性pointcut：用于指定切入点表达式，该表达式含义指的是对代理对象中那些方法增强</li><li>jar包：org.aspectj可以用来帮我们解析切入点表达式</li></ul></li></ul><p><strong>切入点表达式写法：</strong></p><ul><li>格式：execution(表达式[写法：访问修饰符 返回值 包名.包名…类名.方法名(参数列表)])<ul><li>如表达式：public void com.xiaoai.t8aop.service.impl.AccountServiceImpl.saveAccount()</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- 访问修饰符可省</span><br><span class="line">void com.xiaoai.t8aop.service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line"></span><br><span class="line">- 返回值可以使用通配符*，表示任意返回值 </span><br><span class="line">com.xiaoai.t8aop.service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line"></span><br><span class="line">- 包名可以使用通配符*，但有几级包就需要.几个*</span><br><span class="line">* *.*.*.*.*.AccountServiceImpl.saveAccount()</span><br><span class="line"></span><br><span class="line">- 包名可以使用..表示当前包及其子包</span><br><span class="line">* *..AccountServiceImpl.saveAccount()</span><br><span class="line"></span><br><span class="line">- 类名和方法名都可以使用通配符*来表示</span><br><span class="line">* *..*.*()</span><br><span class="line"></span><br><span class="line">- 参数列表可以直接写类型：基本类型直接写名称(如：int)引用类型写包名.类名(如：java.lang.String)</span><br><span class="line">* *..*.*(int)或* *..*.*(java.lang.String)</span><br><span class="line"></span><br><span class="line">- 可以使用通配符表示任意类型参数,但必须有参数(即*无法匹配没有参数的方法)</span><br><span class="line">* *..*.*(int)或* *..*.*(*)</span><br><span class="line"></span><br><span class="line">- 可以使用..表示有无参数都可以</span><br><span class="line">* *..*.*(int)或* *..*.*(..)</span><br><span class="line"></span><br><span class="line">- 全通配写法</span><br><span class="line">* *..*.*(..)</span><br></pre></td></tr></table></figure><blockquote><p>实际开发中切入点表达式的通常写法：切到代理对象类下的所有方法</p><p>如：* com.xiaoai.t8aop.service.impl.<em>.</em>(..)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置spirng的ioc，把service对象配置进来--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t8aop.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置Logger类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiaoai.t8aop.utils.Logger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;logger&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--配置前置通知,并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLog&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.xiaoai.t8aop.service.impl.AccountServiceImpl.saveAccount())&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以在切面内配置切入点表达式并通过<strong>pointcut-ref</strong>属性引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置切入点表达式</span></span><br><span class="line"><span class="comment">         属性id：用于指定表达式唯一标识</span></span><br><span class="line"><span class="comment">         属性expression：用于指定表达式内容</span></span><br><span class="line"><span class="comment">    此标签写在 &lt;aop:aspect&gt;标签内部只能当前切面使用。</span></span><br><span class="line"><span class="comment">    它还可以写在&lt;aop:aspect&gt;标签外面，此时变成了所有切面都可使用，但必须放置在切面前面</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xiaoai.t8aop.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;logger&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过pointcut—ref属性引用切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后置通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--异常通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最终通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xiaoai.t8aop.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;logger&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--环绕通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题：配置了环绕通知后，切入点方法没有执行，而通知方法执行了<br>分析：通过对比动态代理中的环绕通知，发现动态代理的环绕通知有明确的切入点方法调用，而环绕通知方法没有<br>解决：</p><ul><li>spring框架提供了一个接口，ProceedingJoinPoint。</li><li>该接口有一个方法proceed()，此方法就相当于明确调用切入点方法。</li><li>该接口可以作为环绕通知的方法参数，在程序执行时，spirng框架会为我们提供该接口的实现类供我们使用</li></ul><p>spring中环绕通知：是spring框架为我们提供一种可以在代码中手动控制增强方法如何执行的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 环绕通知</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;环绕通知开始。。。。。。。。。。。。&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">rtValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知。。。。。。。。。。。。&quot;</span>);<span class="comment">//写这里表示前置通知</span></span><br><span class="line">        Object[] args = pjp.getArgs();<span class="comment">//得到方法运行时所需的参数</span></span><br><span class="line">        rtValue = pjp.proceed();  <span class="comment">//明确调用代理方法(切入点方法) </span></span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知。。。。。。。。。。。。&quot;</span>);<span class="comment">//写这里表示后置通知</span></span><br><span class="line">        <span class="keyword">return</span> rtValue;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知。。。。。。。。。。。。&quot;</span>);<span class="comment">//写这里表示异常通知</span></span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知。。。。。。。。。。。。&quot;</span>);<span class="comment">//写这里表示最终通知</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于注解配置aop"><a href="#基于注解配置aop" class="headerlink" title="基于注解配置aop"></a>基于注解配置aop</h3><p>spring配置中配置扫描注解的包以及开启注解支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiaoai.t9aopAnnotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置spring开启注解aop的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把相应Bean配置进ioc容器，</p><ul><li>@Aspect注解配置aop切面类，定义切入点表达式以及相应通知方法配置相应注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;logger&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表示当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.xiaoai.t9aopAnnotation.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pt1()&quot;)</span><span class="comment">//前置通知引用切入点表达式时必须带有括号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;前置通知。。。。。。。。。。。&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt1()&quot;)</span><span class="comment">//后置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;后置通知。。。。。。。。。。。&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pt1()&quot;)</span><span class="comment">//异常通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;异常通知。。。。。。。。。。。&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pt1()&quot;)</span><span class="comment">//最终通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;System.out.println(<span class="string">&quot;最终通知。。。。。。。。。。。&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Around(&quot;pt1()&quot;)//环绕通知</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知开始。。。。。。。。。。。。&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">rtValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;前置通知。。。。。。。。。。。。&quot;</span>);</span><br><span class="line">            Object[] args = pjp.getArgs();<span class="comment">//得到方法运行时所需的参数</span></span><br><span class="line">            rtValue = pjp.proceed();<span class="comment">//明确调用代理方法(切入点方法)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;后置通知。。。。。。。。。。。。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异常通知。。。。。。。。。。。。&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;最终通知。。。。。。。。。。。。&quot;</span>);<span class="comment">//写这里表示最终通知</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：基于注解配置的前置通知、后置通知、异常通知、最终通知调用顺序有点问题，需要慎重考虑是否直接注解配置。而基于注解配置的环绕通知是没有该问题的。</p><h3 id="纯注解配置"><a href="#纯注解配置" class="headerlink" title="纯注解配置"></a>纯注解配置</h3><p>即扫描包和开启aop支持也用注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扫描包：</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.xiaoai.t9aopAnnotation&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启aop支持：</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br></pre></td></tr></table></figure><h3 id="spring中的JdbcTemplate"><a href="#spring中的JdbcTemplate" class="headerlink" title="spring中的JdbcTemplate"></a>spring中的JdbcTemplate</h3><p>当有多个dao，代码重复部分很多时可以继承一个类，该类中把dao中公共代码提取出来。</p><p>例如：</p><ul><li><p>dao类获取template对象：可以在dao类中继承相关获取template的类，在相关类中创建template对象</p></li><li><p>template对象在spring配置中dao类的Bean可以不再注入template而是直接注入DataSource</p></li><li><p>比如dao实现类继承JdbcDaoSupper类，通过该类获取jdbctempte对象，</p></li><li><p>继承和xml配置两者区别：通过继承，由于该类为jar包中的类，再想通注解进行则变得麻烦了</p></li></ul><h3 id="spring自带事务管理"><a href="#spring自带事务管理" class="headerlink" title="spring自带事务管理"></a><strong>spring自带事务管理</strong></h3><p><strong>spring中基于xml的声明式事务控制配置步骤</strong></p><ul><li><p>1-配置事务管理器（自己写或spring提供的）</p></li><li><p>2-配置事务通知<br>导入事务约束 tx名称空间和约束，<br>使用<a href="tx:advice标签配置事务通知">tx:advice标签配置事务通知</a></p></li><li><p>属性id：事务通知起唯一的标识</p></li><li><p>属性transaction-manager：给事务通知提供一个事务管理器引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>3-配置AOP中的通用切入点表达式</p></li><li><p>4-建立事务通知和切入点表达式的对应关系</p></li><li><p>5-配置事务属性</p><ul><li>是在事务的通知<a href="tx:advice">tx:advice</a>标签的内部</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1-配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2-配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--5-配置事务属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      &lt;tx:method&gt;标签属性</span></span><br><span class="line"><span class="comment">       name        表示服务层的方法即切入点</span></span><br><span class="line"><span class="comment">       isolation=&quot;&quot;        用于指定事务的隔离级别，默认值为DEFAULT，表示数据库的默认隔离级别</span></span><br><span class="line"><span class="comment">       propagation=&quot;&quot;      用于指定事务的传播行为。默认值为REQUIRED，表示一定会有事务，增删改的选择，查询方法可以选择SUPPORTS.</span></span><br><span class="line"><span class="comment">       read-only=&quot;&quot;        用于指定事务是否只读，只有查询方法才能设置为true，默认值为false，表示读写</span></span><br><span class="line"><span class="comment">       timeout=&quot;&quot;          用于指定事务的超时时间，默认值时-1，表示永不超时。如果指定了数值，以秒为单位</span></span><br><span class="line"><span class="comment">       rollback-for=&quot;&quot;     用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。无默认值，表示任何异常都回滚</span></span><br><span class="line"><span class="comment">       no-rollback-for=&quot;&quot;  用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚。无默认值，表示任何异常都回滚</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span>  <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span>  <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3-配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3-1-配置切入点表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xiaoai.t2tx.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--4-建立切入点表达式和事务通知的对应关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring中基于注解的声明式事务控制配置步骤</strong></p><ul><li>1-配置事务管理器</li><li>2-开启spring对注解事务的支持</li><li>3-在需要事务支持的地方使用@Transactional注解（比如服务层类上面，配置在方法上也行）<ul><li>如果要配置事务属性可以在@Transactional注解后面跟上参数即可</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置spring创建容器时扫描的包，以便把注解bean放入容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiaoai.t3txAnnotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1-配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span>  <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启spring对注解事务的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAccountService</span> &#123;.....&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置事务属性例子</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.SUPPORTS,readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findAccountById</span><span class="params">(Integer accoountId)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountDao.findAccountById(accoountId);</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//由于该方法的属性与类上配置的属性不同，所以要单独配置，其他不一致的方法也一样要单独配</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED,readOnly = false)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> &#123;</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        <span class="comment">//根据名称查询转出账户</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">source</span> <span class="operator">=</span> accountDao.findAccountByName(sourceName);</span><br><span class="line">        <span class="comment">//根据名称查询转入账户</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">target</span> <span class="operator">=</span> accountDao.findAccountByName(targetName);</span><br><span class="line">        <span class="comment">//转出账户减钱</span></span><br><span class="line">        source.setMoney(source.getMoney()-money);</span><br><span class="line">        <span class="comment">//转入账户加钱</span></span><br><span class="line">        target.setMoney(target.getMoney()+money);</span><br><span class="line">        <span class="comment">//更新转出账户</span></span><br><span class="line">        accountDao.updateAccount(source);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>/<span class="number">0</span>; <span class="comment">//出现错误，由于每次连接不同所以下面的操作会失败</span></span><br><span class="line">        <span class="comment">//更新转入账户</span></span><br><span class="line">        accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果需要通过注解开启注解事务的支持，注解为：@EnableTransactionManagement  //开启事务注解的支持</p></blockquote><h3 id="spring基于编程式事务控制"><a href="#spring基于编程式事务控制" class="headerlink" title="spring基于编程式事务控制"></a>spring基于编程式事务控制</h3><p>在实际开发过程中，使用非常少</p><h2 id="spring5新特性"><a href="#spring5新特性" class="headerlink" title="spring5新特性"></a>spring5新特性</h2><p>……</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springDataJpa初识</title>
      <link href="/aiyblog/2020/01/26/spring/springDataJpa%E5%88%9D%E8%AF%86/"/>
      <url>/aiyblog/2020/01/26/spring/springDataJpa%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>jpa:java persistence api java持久化api</p><h2 id="orm思想"><a href="#orm思想" class="headerlink" title="orm思想"></a>orm思想</h2><ul><li>操作实体类相当于操作数据库表，不在重点关注sql语句</li><li>两个映射：1-实体类和表  2-属性和字段</li><li>实现orm思想的框架如：mybatis、hibernate</li></ul><h2 id="jpa规范"><a href="#jpa规范" class="headerlink" title="jpa规范"></a>jpa规范</h2><ul><li>jdbc规范：封装好具体操作数据库接口、方法，只需修改对应驱动</li><li>内部由接口和抽象类组成</li><li>jpa规范不干活，依托实现方式（如：hibernate）来操作。</li></ul><h2 id="jpa使用操作"><a href="#jpa使用操作" class="headerlink" title="jpa使用操作"></a>jpa使用操作</h2><p>1-jar依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.hibernate.version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">project.hibernate.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- hibernate对jpa的支持包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- c3p0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- log日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mysql and MariaDB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2-配置文件  需在class目录下的META-INF目录及名称为persistence.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/persistence&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--需配置persistence-unit节点</span></span><br><span class="line"><span class="comment">        持久化单元：</span></span><br><span class="line"><span class="comment">            name：持久化单元名称</span></span><br><span class="line"><span class="comment">            transaction-type:事务管理方式   JTA=分布式事务管理   RESOURCE_LOCAL=本地事务管理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">&quot;myJpa&quot;</span> <span class="attr">transaction-type</span>=<span class="string">&quot;RESOURCE_LOCAL&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jpa实现方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库信息：</span></span><br><span class="line"><span class="comment">                用户名 javax.persistence.jdbc.user</span></span><br><span class="line"><span class="comment">                密码 javax.persistence.jdbc.password</span></span><br><span class="line"><span class="comment">                驱动 javax.persistence.jdbc.driver</span></span><br><span class="line"><span class="comment">                地址 javax.persistence.jdbc.url</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mydb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--可选配置：配置jpa实现方式的配置信息</span></span><br><span class="line"><span class="comment">                显示sql    true=显示  false=不显示</span></span><br><span class="line"><span class="comment">                自动创建数据库表 :</span></span><br><span class="line"><span class="comment">                    create=程序运行时创建数据库表，有表先删再创建</span></span><br><span class="line"><span class="comment">                    update=程序运行时创建数据库表  有表不会创建</span></span><br><span class="line"><span class="comment">                    none=不会创建数据库表</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3-实体类与表映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户实体类   需要配置映射关系</span></span><br><span class="line"><span class="comment"> *      1-实体类和表映射</span></span><br><span class="line"><span class="comment"> *      2-属性和字段映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  主键生成策略</span></span><br><span class="line"><span class="comment"> *      IDENTITY=自增   底层必须支持自增      mysql</span></span><br><span class="line"><span class="comment"> *      SEQUENCE=序列   底层必须支持序列      oracle</span></span><br><span class="line"><span class="comment"> *      TABLE=jpa提供的一种机制，通过一张数据库表的形式帮助我们完成主键自增</span></span><br><span class="line"><span class="comment"> *      AUTO=由程序自动帮助我们选择主键生成策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span>   <span class="comment">//1-1声明此类为实体类</span></span><br><span class="line"><span class="meta">@Table(name = &quot;mjfs14_customer&quot;)</span>   <span class="comment">//1-2配置实体类和表映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2-1配置属性字段映射</span></span><br><span class="line">    <span class="meta">@Id</span>  <span class="comment">//声明主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  <span class="comment">//配置主键生成策略  IDENTITY=自增 (要求：底层数据库必须支持自动增长)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_id&quot;)</span>  <span class="comment">//对应数据库字段名称</span></span><br><span class="line">    <span class="keyword">private</span> Long custId; <span class="comment">//客户主键</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String custName;<span class="comment">//客户名称</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_source&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String custSource;<span class="comment">//客户来源</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_level&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String custLevel;<span class="comment">//客户级别</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_industry&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String custIndustry;<span class="comment">//客户所属行业</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_phone&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String custPhone;<span class="comment">//客户联系方式</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;cust_address&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String custAddress;<span class="comment">//客户地址</span></span><br><span class="line"></span><br><span class="line">    ......对应属性get和set方法以及toString方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4-具体CRUD操作</p><p>EntityManager相关方法</p><ul><li>presist(对象)  保存</li><li>merge(对象)  更新  先查询得到对象，修改对象然后执行修改</li><li>remove(对象)  删除  先查询得到对象，传入对象进行删除</li><li>find(待封装对象class，id)/getRefrence(待封装对象class，id)  根据id查询 find立即加载，getRefrence延时加载（懒加载）  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.txw2.TXW;</span><br><span class="line"><span class="keyword">import</span> com.xiaoai.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> com.xiaoai.utils.JpaUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jpa相应操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * jpa操作步骤：</span></span><br><span class="line"><span class="comment"> *      1-加载配置文件创建工厂（实体管理器工厂）对象</span></span><br><span class="line"><span class="comment"> *          EntityManagerFactory创建过程比较浪费资源</span></span><br><span class="line"><span class="comment"> *          特点：线程安全对象：多个线程访问同一个EntityManagerFactory不会有线程安全问题</span></span><br><span class="line"><span class="comment"> *          ---解决EntityManagerFactory创建过程浪费资源（耗时）问题？</span></span><br><span class="line"><span class="comment"> *          思路：创建公共EntityManagerFactory对象   解决：java中可以使用静态代码块形式创建EntityManagerFactory</span></span><br><span class="line"><span class="comment"> *      2-通过实体管理类工厂获取实体管理器</span></span><br><span class="line"><span class="comment"> *          方法：createEntityManager</span></span><br><span class="line"><span class="comment"> *          内部维护很多内容：数据库信息、缓存信息、所有实体类管理器对象等</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *          createEntityManager对象：实体类管理器   方法：</span></span><br><span class="line"><span class="comment"> *              beginTransaction=创建事务对象</span></span><br><span class="line"><span class="comment"> *              presist=保存</span></span><br><span class="line"><span class="comment"> *              merge=更新</span></span><br><span class="line"><span class="comment"> *              remove=删除</span></span><br><span class="line"><span class="comment"> *              find/getRefrence=根据id查询</span></span><br><span class="line"><span class="comment"> *      3-获取事务对象，开启事务</span></span><br><span class="line"><span class="comment"> *          EntityTransaction 事务对象</span></span><br><span class="line"><span class="comment"> *              begin=开启事务</span></span><br><span class="line"><span class="comment"> *              commit=提交事务</span></span><br><span class="line"><span class="comment"> *              rellback=回滚</span></span><br><span class="line"><span class="comment"> *      4-完成相关增删改查操作</span></span><br><span class="line"><span class="comment"> *      5-提交事务（回滚事务）</span></span><br><span class="line"><span class="comment"> *      6-释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  -----测试jpa的增加 presist</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1-加载配置文件创建工厂（实体管理器工厂）  根据持久化单元名称创建实体类工厂</span></span><br><span class="line">        <span class="type">EntityManagerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> Persistence.createEntityManagerFactory(<span class="string">&quot;myJpa&quot;</span>);</span><br><span class="line">        <span class="comment">//2-获取实体类管理器</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">em</span> <span class="operator">=</span> factory.createEntityManager();</span><br><span class="line">        <span class="comment">//3-获取事务管理    打开事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> em.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//4-执行操作  增加 presist</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        customer.setCustName(<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line">        customer.setCustIndustry(<span class="string">&quot;it&quot;</span>);</span><br><span class="line">        em.persist(customer);</span><br><span class="line">        <span class="comment">//5-提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//6-释放资源</span></span><br><span class="line">        em.close();</span><br><span class="line">        factory.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----根据id查询  使用find方法</span></span><br><span class="line"><span class="comment">     *  1-查询对象就是当前待查询对象本身</span></span><br><span class="line"><span class="comment">     *  2-调用find方法时，就会发送sql语句查询数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  立即加载：得到的即对象本身，调用方法就完成加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFind</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取管理器</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();  <span class="comment">//通过JpaUtils封装生成同一EntityManagerFactory对象，减少资源耗费及耗时</span></span><br><span class="line">        <span class="comment">//获取事务 打开事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> entityManager.find(Customer.class, <span class="number">1l</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//关闭  由于使用同一个EntityManagerFactory对象，所以其暂时不能关闭</span></span><br><span class="line">        entityManager.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----根据id查询  使用getReference方法</span></span><br><span class="line"><span class="comment">     *  1-查询对象是一个动态代理对象</span></span><br><span class="line"><span class="comment">     *  2-不会即时发送sql语句查询数据库，当调用查询结果对象的时候，才会发送查询的sql语句（即什么时候用什么时候发送）</span></span><br><span class="line"><span class="comment">     *  延时加载（懒加载）：得到的是一个动态代理对象  什么时候用什么时候加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  一般使用延时加载，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetReference</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取管理器</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//获取事务 打开事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> entityManager.getReference(Customer.class, <span class="number">1l</span>);<span class="comment">//getReference</span></span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//关闭  由于使用同一个EntityManagerFactory对象，所以其暂时不能关闭</span></span><br><span class="line">        entityManager.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----删除   remove</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRemove</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取管理器</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//获取事务 打开事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作  删除 先查后删</span></span><br><span class="line">        <span class="comment">//--1-根据id查询客户</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> entityManager.find(Customer.class, <span class="number">1l</span>);<span class="comment">//getReference</span></span><br><span class="line">        <span class="comment">//--2-传入所查询结果删除</span></span><br><span class="line">        entityManager.remove(customer);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//关闭  由于使用同一个EntityManagerFactory对象，所以其暂时不能关闭</span></span><br><span class="line">        entityManager.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----更新   merge</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取管理器</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//获取事务 打开事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作  更新  先查询获取对象，修改对象后更新对象</span></span><br><span class="line">        <span class="comment">//--1-根据id查询客户</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> entityManager.find(Customer.class, <span class="number">2l</span>);<span class="comment">//getReference</span></span><br><span class="line">        <span class="comment">//--2-修改对象信息</span></span><br><span class="line">        customer.setCustIndustry(<span class="string">&quot;net&quot;</span>);</span><br><span class="line">        <span class="comment">//--2-传入所查询结果删除</span></span><br><span class="line">        entityManager.merge(customer);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//关闭  由于使用同一个EntityManagerFactory对象，所以其暂时不能关闭</span></span><br><span class="line">        entityManager.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>EntityManagerFactory封装<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决实体管理器工厂的浪费资源和耗时问题</span></span><br><span class="line"><span class="comment"> *  通过静态代码块的形式，当程序第一次访问此工具类是，创建一个公共的实体管理器工厂对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  1-第一次访问getEntityManager方法，经静态代码块创建factory对象，再调用方法创建一个EntityManager对象</span></span><br><span class="line"><span class="comment"> *  2-第二次访问getEntityManager方法，直接通过一个已经创建好的factory对象创建EntityManager对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EntityManagerFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//加载配置文件，创建EntityManagerFactory</span></span><br><span class="line">        factory  = Persistence.createEntityManagerFactory(<span class="string">&quot;myJpa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来获取EntityManager对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EntityManager <span class="title function_">getEntityManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="jpql查询"><a href="#jpql查询" class="headerlink" title="jpql查询"></a>jpql查询</h2><p>java persistence query language   jpa提供的一种查询语句  和sql差不多</p><p><strong>sql</strong>：查询的是表和表中的字段<br><strong>jpql</strong>：查询的是实体类和类中属性</p><p>步骤：</p><ul><li>1-EntityManagerFactory 工厂</li><li>2-EntityManager 实体类管理器</li><li>3-EntityTransaction 打开事务</li><li>4-Query：jpql具体查询语句获取query对象，query对象执行查询  （jpa直接通过EntityManager对象进行操作）</li><li>5-提交事务</li><li>6-释放资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.utils.JpaUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityTransaction;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Query;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jpql查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpqlTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----查询全部</span></span><br><span class="line"><span class="comment">     *      sql：select * from mjfs14_customer</span></span><br><span class="line"><span class="comment">     *      jqpl：from com.xiaoai.domain.Customer(可以使用全限定类名也可以简写： from Customer)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取entityManager对象</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">            <span class="comment">//--1获取query对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jpql</span> <span class="operator">=</span> <span class="string">&quot;from com.xiaoai.domain.Customer&quot;</span>;</span><br><span class="line">            <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> entityManager.createQuery(jpql);</span><br><span class="line">            <span class="comment">//--2具体操作，封装结果集</span></span><br><span class="line">            <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> query.getResultList();</span><br><span class="line">            <span class="keyword">for</span> (Object obj:list ) &#123;</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        entityManager.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*结果如下：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=1, custName=&#x27;xiaoai2&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=3, custName=&#x27;xiaoai3&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;无业游民&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=4, custName=&#x27;小艾&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;教育&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----倒叙查询</span></span><br><span class="line"><span class="comment">     *      sql: select * from mjfs14_customer order by cust_id DESC</span></span><br><span class="line"><span class="comment">     *      jpql: from Customer order by custId desc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrders</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取entityManager对象</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">            <span class="comment">//--1获取query对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jpql</span> <span class="operator">=</span> <span class="string">&quot;from Customer order by custId desc&quot;</span>;</span><br><span class="line">            <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> entityManager.createQuery(jpql);</span><br><span class="line">            <span class="comment">//--2具体操作，封装结果集</span></span><br><span class="line">            <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> query.getResultList();</span><br><span class="line">            <span class="keyword">for</span> (Object obj:list ) &#123;</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        entityManager.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*结果如下：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ order by customer0_.cust_id desc</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=4, custName=&#x27;小艾&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;教育&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=3, custName=&#x27;xiaoai3&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;无业游民&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=1, custName=&#x27;xiaoai2&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----统计查询</span></span><br><span class="line"><span class="comment">     *      sql: select count(cust_id) from mjfs14_customer</span></span><br><span class="line"><span class="comment">     *      jpql: select count(custId) from Customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取entityManager对象</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">            <span class="comment">//--1获取query对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jpql</span> <span class="operator">=</span> <span class="string">&quot;select count(custId) from Customer&quot;</span>;</span><br><span class="line">            <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> entityManager.createQuery(jpql);</span><br><span class="line">            <span class="comment">//--2具体操作，封装结果集</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> query.getSingleResult();<span class="comment">//得到唯一的结果集</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        entityManager.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*结果如下：</span></span><br><span class="line"><span class="comment">        Hibernate: select count(customer0_.cust_id) as col_0_0_ from mjfs14_customer customer0_</span></span><br><span class="line"><span class="comment">        4</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----分页查询</span></span><br><span class="line"><span class="comment">     *      sql: select * from mjfs14_customer limit ?,?</span></span><br><span class="line"><span class="comment">     *      jpql: from Customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPaged</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取entityManager对象</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">            <span class="comment">//--1获取query对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jpql</span> <span class="operator">=</span> <span class="string">&quot;from Customer&quot;</span>;</span><br><span class="line">            <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> entityManager.createQuery(jpql);</span><br><span class="line">            <span class="comment">//--2具体操作，封装结果集</span></span><br><span class="line">            <span class="comment">//----设置参数（分页参数）</span></span><br><span class="line">            query.setFirstResult(<span class="number">0</span>);<span class="comment">//从下标0开始查</span></span><br><span class="line">            query.setMaxResults(<span class="number">2</span>);<span class="comment">//每次查询两条</span></span><br><span class="line">            <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> query.getResultList();</span><br><span class="line">            <span class="keyword">for</span> (Object obj:list ) &#123;</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        entityManager.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*结果如下：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ limit ?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=1, custName=&#x27;xiaoai2&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----条件查询</span></span><br><span class="line"><span class="comment">     *      sql: select * from mjfs14_customer where cust_name like ?</span></span><br><span class="line"><span class="comment">     *      jpql: from Customer where custName like ?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCondition</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取entityManager对象</span></span><br><span class="line">        <span class="type">EntityManager</span> <span class="variable">entityManager</span> <span class="operator">=</span> JpaUtils.getEntityManager();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">EntityTransaction</span> <span class="variable">tx</span> <span class="operator">=</span> entityManager.getTransaction();</span><br><span class="line">        tx.begin();</span><br><span class="line">        <span class="comment">//操作</span></span><br><span class="line">            <span class="comment">//--1获取query对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jpql</span> <span class="operator">=</span> <span class="string">&quot;from Customer where custName like ?&quot;</span>;</span><br><span class="line">            <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> entityManager.createQuery(jpql);</span><br><span class="line">            <span class="comment">//--2具体操作，封装结果集</span></span><br><span class="line">            <span class="comment">//----设置参数（占位符参数）</span></span><br><span class="line">            query.setParameter(<span class="number">1</span>,<span class="string">&quot;xiaoai%&quot;</span>);<span class="comment">//参数：1=第几个占位符  2=代替值</span></span><br><span class="line">            <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> query.getResultList();</span><br><span class="line">            <span class="keyword">for</span> (Object obj:list ) &#123;</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        tx.commit();</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        entityManager.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*结果如下：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ where customer0_.cust_name like ?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=1, custName=&#x27;xiaoai2&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=3, custName=&#x27;xiaoai3&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;无业游民&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="spring-data-jpa"><a href="#spring-data-jpa" class="headerlink" title="spring data jpa"></a>spring data jpa</h2><p>相互关系：我们写的java代码——》spring data jpa——》jpa规范——》hibernate（封装jdbc）——》数据库</p><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><ul><li>导入jar<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c3p0.version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">c3p0.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring beg --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- hibernate beg --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-entitymanager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hibernate end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- c3p0 beg --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;c3p0.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- c3p0 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- el beg 使用spring data jpa 必须引入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- el end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置spring配置文件（配置spring data jpa整合）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">&quot;http://www.springframework.org/schema/data/jpa&quot;</span> <span class="attr">xmlns:task</span>=<span class="string">&quot;http://www.springframework.org/schema/task&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/data/jpa</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/data/jpa/spring-jpa.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring 和 spring data jpa的配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1==创建entityManagerFactory对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;packagesToScan&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.xiaoai.domain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--扫描实体类所在包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;persistenceProvider&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.hibernate.jpa.HibernatePersistenceProvider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="comment">&lt;!--配置jpa的实现厂家--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JPA的供应商适配器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jpaVendorAdapter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置是否自动创建数据库表--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;generateDdl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span><span class="comment">&lt;!--是否自动创建表--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;database&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MYSQL&quot;</span> /&gt;</span> <span class="comment">&lt;!--数据库类型--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databasePlatform&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.dialect.MySQLDialect&quot;</span> /&gt;</span><span class="comment">&lt;!--数据库方言：数据库支持的特有语法--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;showSql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span><span class="comment">&lt;!--是否显示sql语句：即是否打印到控制台--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jpa方言，高级特性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jpaDialect&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.vendor.HibernateJpaDialect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2=创建数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mydb?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3=整合spring dataJpa--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiaoai.dao&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">transaction-manager-ref</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">entity-manager-factory-ref</span>=<span class="string">&quot;entityManagerFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jpa:repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4=配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;entityManagerFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;entityManagerFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--5=spring声明式事务--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--6=配置包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiaoai&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写实体类及映射   同jpa一致</li><li>编写dao层<ul><li>只要编写dao接口，不需编写实现类</li><li>接口需继承两接口：JpaRepository, JpaSpecificationExecutor   接口需提供响应泛型<ul><li>JpaRepository&lt;操作的实体类类型,实体类类型主键属性的类型&gt;  封装了基本curd操作</li><li>JpaSpecificationExecutor&lt;操作的实体类类型&gt;   封装了复杂查询（分页等）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerDao</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Customer,Long&gt;,JpaSpecificationExecutor&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>注入接口对象，直接使用<h3 id="接口相关方法"><a href="#接口相关方法" class="headerlink" title="接口相关方法"></a>接口相关方法</h3></li><li>findOne(id)  根据id查询</li><li>save(对象)  对象标识主键 不存在=新增   存在=修改（修改需要先查询然后修改，不要直接创建相同id的对象然后直接执行修改）</li><li>delete(id)  根据id删除 </li><li>findAll()  查询所有</li><li>count（）  统计总数量</li><li>exists(id)  查询id为xx的数据是否存在 <ul><li>思路1：查询id为xx数据，判断值是否为空</li><li>思路2：判断id为xx的数据数量，数量为0即不存在  JPA即是该种思路</li></ul></li><li>getOne(id)  根据id查询  测试方法上需要 @Transactional支持<ul><li>与findOne区别：findOne底层调用entityManager的find()方法即立即加载，GetOne底层调用entityManager的getRefrence()方法即延时加载。为了延时加载正常执行需要加上事务支持</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.dao.CustomerDao;</span><br><span class="line"><span class="keyword">import</span> com.xiaoai.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerDaoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----根据id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">one</span> <span class="operator">=</span> customerDao.findOne(<span class="number">3l</span>);</span><br><span class="line">        System.out.println(one);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*结果</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_0_, customer0_.cust_address as cust_add2_0_0_, customer0_.cust_industry as cust_ind3_0_0_, customer0_.cust_level as cust_lev4_0_0_, customer0_.cust_name as cust_nam5_0_0_, customer0_.cust_phone as cust_pho6_0_0_, customer0_.cust_source as cust_sou7_0_0_ from mjfs14_customer customer0_ where customer0_.cust_id=?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=3, custName=&#x27;xiaoai3&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;无业游民&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----save：保存或者更新，根据传入的对象主键id是否存在判断新增或更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//新增</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        customer.setCustName(<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line">        customer.setCustLevel(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        customer.setCustIndustry(<span class="string">&quot;it&quot;</span>);</span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----save：保存或者更新，根据传入的对象主键id是否存在判断新增或更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        Customer customer = new Customer();</span></span><br><span class="line"><span class="comment">//        customer.setCustId(5l); //id为5的数据已经存在，</span></span><br><span class="line"><span class="comment">//        customer.setCustName(&quot;程序员&quot;);</span></span><br><span class="line"><span class="comment">//        customerDao.save(customer);</span></span><br><span class="line">        <span class="comment">//如果像上面那样修改，则id为5的数据名称改为了程序员，但其他属性将变为空。</span></span><br><span class="line">        <span class="comment">// 因为修改是查询然后修改，这里直接定义了新对象设置了名称其他属性都为空，即用其替换了原来的5号数据</span></span><br><span class="line">        <span class="comment">//应该先查询获得对象，然后修改对象再执行修改。</span></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerDao.findOne(<span class="number">5l</span>);</span><br><span class="line">        customer.setCustName(<span class="string">&quot;程序员&quot;</span>);<span class="comment">//修改编号5数据的名称为程序员</span></span><br><span class="line">        customerDao.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        customerDao.delete(<span class="number">6l</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Customer&gt; all = customerDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Customer c : all) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 测试结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=1, custName=&#x27;xiaoai2&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=3, custName=&#x27;xiaoai3&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;无业游民&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=4, custName=&#x27;小艾&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;教育&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=5, custName=&#x27;程序员&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;3&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *-----统计查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> customerDao.count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">/*测试结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select count(*) as col_0_0_ from mjfs14_customer customer0_</span></span><br><span class="line"><span class="comment">        5</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----判断数据是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExists</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> customerDao.exists(<span class="number">4l</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否存在：&quot;</span>+exists);</span><br><span class="line">        <span class="comment">/*测试结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select count(*) as col_0_0_ from mjfs14_customer customer0_ where customer0_.cust_id=? and 1=1</span></span><br><span class="line"><span class="comment">        是否存在：true</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -----根据id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span>  <span class="comment">//保证getOne正常运行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">one</span> <span class="operator">=</span> customerDao.getOne(<span class="number">4l</span>);</span><br><span class="line">        System.out.println(one);</span><br><span class="line">        <span class="comment">/*测试结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_0_, customer0_.cust_address as cust_add2_0_0_, customer0_.cust_industry as cust_ind3_0_0_, customer0_.cust_level as cust_lev4_0_0_, customer0_.cust_name as cust_nam5_0_0_, customer0_.cust_phone as cust_pho6_0_0_, customer0_.cust_source as cust_sou7_0_0_ from mjfs14_customer customer0_ where customer0_.cust_id=?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=4, custName=&#x27;小艾&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;教育&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义jpql-sql语句查询"><a href="#定义jpql-sql语句查询" class="headerlink" title="定义jpql/sql语句查询"></a>定义jpql/sql语句查询</h3><ul><li>特有查询：需要在dao接口上配置方法</li><li>新添加的方法上使用注解形式配置jpql语句</li><li>注解：@query<ul><li>注解属性value=jpql语句或sql语句   </li><li>注解属性nativeQuery=false（使用jqpl查询）或true（使用本地查询：即sql查询）</li></ul></li><li>jpql更深层封装：只需要按照springDataJpa提供的方法名称规则定义方法，不需要去配置jpql语句，也可以完成查询<ul><li>findBy+属性名称() = 查询  如：findByCustName   根据方法名称(findBy)解析要查询 from 实体类 where 属性名称（如custName) = 参数</li><li>findBy+属性名称+查询方式（like、isnull） 如：findByCustNameLike</li><li>findBy+属性名+查询方式+多条件连接符(and、or)+属性名+查询方式(精准匹配可以省略查询方式)  如：findByCustNameLikeAndCustIndustry<br>接口定义的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Modifying;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义符合springdataJpa的dao层接口规范</span></span><br><span class="line"><span class="comment"> *      JpaRepository&lt;操作的实体类类型,实体类类型主键属性的类型&gt;</span></span><br><span class="line"><span class="comment"> *          封装了基本curd操作</span></span><br><span class="line"><span class="comment"> *     JpaSpecificationExecutor&lt;操作的实体类类型&gt;</span></span><br><span class="line"><span class="comment"> *         封装了复杂查询（分页）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerDao</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Customer,Long&gt;,JpaSpecificationExecutor&lt;Customer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//===============================================================自定义jpql执行方法</span></span><br><span class="line">    <span class="comment">//使用注解@Query</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----根据客户名称查询客户</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;from Customer where custName=?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">jpqlFindByName</span><span class="params">(String custName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----根据客户名称id查询客户</span></span><br><span class="line">    <span class="comment">// 需要注意多占位符的匹配关系问题</span></span><br><span class="line">    <span class="comment">// 默认情况下，占位符位置需要和方法参数中位置保持一致</span></span><br><span class="line">    <span class="comment">// 但也可以指定占位符参数位置：通过【?索引】的方式指定此占位符的取值来源 如?1 表示该占位符取方法第一个参数</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;from Customer where custName=?1 and custId=?2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">jpqlFindByNameAndId</span><span class="params">(String name,Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----根据id更新客户名称</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;update Customer set custName=?2 where custId=?1&quot;)</span></span><br><span class="line">    <span class="meta">@Modifying</span> <span class="comment">//声明此方法是用来进行更新操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jpqlUpdateNameById</span><span class="params">(Long custId,String custName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//===============================================================自定义sql语句执行方法</span></span><br><span class="line">    <span class="comment">// @Query  属性：value=jpql语句或sql语句   nativeQuery=false（使用jqpl查询）或true（使用本地查询：即使用sql查询）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----查询所有</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;select * from mjfs14_customer&quot;,nativeQuery = true)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object[]&gt; findSql();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----根据名称模糊查询</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;select * from mjfs14_customer where cust_name like ?1&quot;,nativeQuery = true)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object[]&gt; findSqlByName(String name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//===============================================================jpql的深层封装：根据springDataJpa提供的命名方法</span></span><br><span class="line">    <span class="comment">// findByXxx = 查询  Xxx即对象属性即查询条件  如：findByCustName   根据方法名称(findBy)解析要查询 from 实体类 where xxx(属性名称如custName) = 参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----根据名称查询</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">findByCustName</span><span class="params">(String custName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----根据名称模糊查询</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Customer&gt; <span class="title function_">findByCustNameLike</span><span class="params">(String custName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----查询客户名模糊匹配和客户所属行业精准匹配</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Customer&gt; <span class="title function_">findByCustNameLikeAndCustIndustry</span><span class="params">(String custName,String custIndustry)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>测试 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.dao.CustomerDao;</span><br><span class="line"><span class="keyword">import</span> com.xiaoai.domain.Customer;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.annotation.Rollback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.Query;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpqlTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CustomerDao customerDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----自定义jpql：根据名称查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJpqlFindByName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerDao.jpqlFindByName(<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        <span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ where customer0_.cust_name=?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-----自定义jpql：根据名称和id查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJpqlFindByNameAndId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerDao.jpqlFindByNameAndId(<span class="string">&quot;xiaoai&quot;</span>,<span class="number">2l</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        <span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ where customer0_.cust_name=? and customer0_.cust_id=?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-----自定义jpql：根据id更新客户名称</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">//spring data jpa 使用jpql完成更新、删除操作需要手动添加事务支持 执行结束后其会自动回滚事务</span></span><br><span class="line">    <span class="meta">@Rollback(value = false)</span> <span class="comment">//设置不自动回滚</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJpqlUpdateNameById</span><span class="params">()</span>&#123;</span><br><span class="line">       customerDao.jpqlUpdateNameById(<span class="number">3l</span>,<span class="string">&quot;程序员小艾&quot;</span>);</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerDao.findOne(<span class="number">3l</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        <span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">        Hibernate: update mjfs14_customer set cust_name=? where cust_id=?</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_0_, customer0_.cust_address as cust_add2_0_0_, customer0_.cust_industry as cust_ind3_0_0_, customer0_.cust_level as cust_lev4_0_0_, customer0_.cust_name as cust_nam5_0_0_, customer0_.cust_phone as cust_pho6_0_0_, customer0_.cust_source as cust_sou7_0_0_ from mjfs14_customer customer0_ where customer0_.cust_id=?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=3, custName=&#x27;程序员小艾&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;无业游民&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----自定义sql：查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindSql</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Object[]&gt; list = customerDao.findSql();</span><br><span class="line">        <span class="keyword">for</span> (Object[] obj : list) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(obj));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select * from mjfs14_customer</span></span><br><span class="line"><span class="comment">        [1, xiaoai2, null, it, null, null, null]</span></span><br><span class="line"><span class="comment">        [2, xiaoai, null, net, null, null, null]</span></span><br><span class="line"><span class="comment">        [3, 程序员小艾, null, 无业游民, null, null, null]</span></span><br><span class="line"><span class="comment">        [4, 小艾, null, 教育, null, null, null]</span></span><br><span class="line"><span class="comment">        [5, 程序员, null, it, 3, null, null]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//-----自定义sql：根据名称模糊查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindSqlByName</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Object[]&gt; list = customerDao.findSqlByName(<span class="string">&quot;xiaoai%&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object[] obj : list) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(obj));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select * from mjfs14_customer where cust_name like ?</span></span><br><span class="line"><span class="comment">        [1, xiaoai2, null, it, null, null, null]</span></span><br><span class="line"><span class="comment">        [2, xiaoai, null, net, null, null, null]</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----jpql进一步封装：根据名称查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerDao.findByCustName(<span class="string">&quot;小艾&quot;</span>);</span><br><span class="line">        System.out.println(customer);</span><br><span class="line">        <span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ where customer0_.cust_name=?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=4, custName=&#x27;小艾&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;教育&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-----jpql进一步封装：根据名称模糊查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByNameLike</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Customer&gt; customers = customerDao.findByCustNameLike(<span class="string">&quot;xiaoai%&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Customer c : customers) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ where customer0_.cust_name like ?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=1, custName=&#x27;xiaoai2&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-----jpql进一步封装：客户名模糊匹配和客户所属行业精准匹配</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByNAndI</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Customer&gt; customers = customerDao.findByCustNameLikeAndCustIndustry(<span class="string">&quot;xiaoai%&quot;</span>,<span class="string">&quot;it&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Customer c : customers) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 执行结果：</span></span><br><span class="line"><span class="comment">        Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ where (customer0_.cust_name like ?) and customer0_.cust_industry=?</span></span><br><span class="line"><span class="comment">        Customer&#123;custId=1, custName=&#x27;xiaoai2&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="specifications动态查询"><a href="#specifications动态查询" class="headerlink" title="specifications动态查询"></a>specifications动态查询</h3><p>Specification即查询条件<br>即接口继承的JpaSpecificationExecutor类所提供的方法列表：</p><ul><li>T findOne(Specification<T> var1);  单个查询</li><li>List<T> findAll(Specification<T> var1); 查询列表</li><li>Page<T> findAll(Specification<T> var1, Pageable var2); 分页查询 pageable=分页参数</li><li>List<T> findAll(Specification<T> var1, Sort var2); 查询列表  sort=排序参数</li><li>long count(Specification<T> var1);  统计查询</li></ul><p><code>**使用**</code></p><ul><li><p>创建Specification对象，通过匿名内部类构建查询条件，再把对象传入JpaSpecificationExecutor提供的方法中完成查询</p><ul><li>匿名内部类方法参数：Root<Customer>  获取查询的对象属性  get()=获取属性</li><li>匿名内部类方法参数：CriteriaBuilder  用于构建条件   .equal()=精准查询  .like()=模糊查询  .and()=连接属性</li></ul></li><li><p>equal:直接得到path对象，然后进行比较</p></li><li><p>gt，lt，ge，le，like：得到path对象，根据path指定比较的参数类型，再去进行比较  指定参数类型格式：path对象.as(类型字节码对象) 如： Predicate like = criteriaBuilder.like(custName.as(String.class), “xiaoai%”);</p></li><li><p>排序：创建排序对象做参数传入对应方法   Sort sort = new Sort(Sort.Direction.DESC,”custId”);//倒序</p></li><li><p>分页：创建分页对象做参数传入对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSpec5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//添加分页</span></span><br><span class="line">    <span class="type">Pageable</span> <span class="variable">pageable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageRequest</span>(<span class="number">0</span>,<span class="number">3</span>); <span class="comment">//创建分页对象 参数：1=当前查询的页数（从0开始） 2=每页查询数量</span></span><br><span class="line">    Page&lt;Customer&gt; pageCustomer = customerDao.findAll(<span class="literal">null</span>, pageable);<span class="comment">//Specification传入空，表示查询全部</span></span><br><span class="line">    System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageCustomer.getTotalElements());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageCustomer.getTotalPages());</span><br><span class="line">    List&lt;Customer&gt; content = pageCustomer.getContent();<span class="comment">//获取当前页数据列表</span></span><br><span class="line">    <span class="keyword">for</span> (Customer c : content) &#123;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*执行结果：</span></span><br><span class="line"><span class="comment">    Hibernate: select count(customer0_.cust_id) as col_0_0_ from mjfs14_customer customer0_</span></span><br><span class="line"><span class="comment">    Hibernate: select customer0_.cust_id as cust_id1_0_, customer0_.cust_address as cust_add2_0_, customer0_.cust_industry as cust_ind3_0_, customer0_.cust_level as cust_lev4_0_, customer0_.cust_name as cust_nam5_0_, customer0_.cust_phone as cust_pho6_0_, customer0_.cust_source as cust_sou7_0_ from mjfs14_customer customer0_ limit ?</span></span><br><span class="line"><span class="comment">    总条数：5</span></span><br><span class="line"><span class="comment">    总页数：2</span></span><br><span class="line"><span class="comment">    Customer&#123;custId=1, custName=&#x27;xiaoai2&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;it&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">    Customer&#123;custId=2, custName=&#x27;xiaoai&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;net&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">    Customer&#123;custId=3, custName=&#x27;程序员小艾&#x27;, custSource=&#x27;null&#x27;, custIndustry=&#x27;无业游民&#x27;, custLevel=&#x27;null&#x27;, custAddress=&#x27;null&#x27;, custPhone=&#x27;null&#x27;&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a><strong>一对多</strong></h3></li><li><p>主要是配置实体类映射时和其他实体类的关系</p><ul><li>一对一</li><li>一对多、多对一   注：在一的一方维护外键即可，不需要一和多都维护外键</li><li>多对多</li></ul></li><li><p>可以添加实体类属性并配置其关系映射可完成多表操作</p><ul><li>配置相互关系可用实体类间的包含关系，即在实体类中添加另一个实体类作为属性。并需要配置其关系：1-声明表关系  2-配置外键<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">多的一方：</span><br><span class="line"><span class="meta">@OneToMany(targetEntity = LinkMan.class)</span>  <span class="comment">//配置一对多关系  需对方字节码对象</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;lkm_cust_id&quot;,referencedColumnName = &quot;cust_id&quot;)</span>  <span class="comment">//name=从表的外键字段，referencedColumnName=主表的主键字段</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt; linkmans = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">一的一方：</span><br><span class="line"><span class="comment">//配置联系人到客户多对一关系   1-声明表关系  2-配置外键</span></span><br><span class="line"><span class="meta">@ManyToOne(targetEntity = Customer.class)</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;lkm_cust_id&quot;,referencedColumnName = &quot;cust_id&quot;)</span> <span class="comment">//name=从表的外键字段，referencedColumnName=本表的主键字段</span></span><br><span class="line"><span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line">多的一方放弃维护外键：mappedBy=<span class="string">&quot;对方配置关系的属性名&quot;</span> </span><br><span class="line"><span class="meta">@OneToMany(mappedBy=&quot;customer&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt; linkmans = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();  <span class="comment">//放弃外键维护权，表关系交给一的一方维护</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>一对多删除：删除【一一方】需要考虑，因为有可能【多一方】引入了【一一方】   在【一一方】删除时则需要使用级联删除</p><ul><li>级联：操作一个对象的同时操作他的关联对象</li><li>级联删除：删除【一一方】的同时删除关联其的【多一方】的所有数据。想级联删除需要在操作的主体即【一一方】的实体类上添加级联属性（配置级联：cascade）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">配置级联：</span><br><span class="line"><span class="meta">@OneToMany(mappedBy=&quot;customer&quot;,cascade = CascadeType.ALL)</span> <span class="comment">//CascadeType.ALL=所有操作（insert、delete等）都可级联</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt; linkmans = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a><strong>多对多</strong></h3><ul><li>创建实体类配置映射，通过包含关系加入另一实体类做属性，配置实体类间多对多关系<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立关联   1-声明表关系   2-配置中间表（包含两个外键）</span></span><br><span class="line"><span class="meta">@ManyToMany(targetEntity = Role.class)</span></span><br><span class="line"><span class="meta">@JoinTable(name = &quot;mjfs14_user_role&quot;, //中间表名称     @JoinColumn和@inverseJoinColumns参数：name=对应外键字段  referencedColumnName=对应主键字段</span></span><br><span class="line"><span class="meta">        joinColumns = &#123;@JoinColumn(name = &quot;center_user_id&quot;,referencedColumnName = &quot;user_id&quot;)&#125;, // 当前对象在中间表中对应外键配置</span></span><br><span class="line"><span class="meta">        inverseJoinColumns = &#123;@JoinColumn(name = &quot;center_role_id&quot;,referencedColumnName = &quot;role_id&quot;)&#125; //对方对象在中间表中对应外键配置</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li><li>放弃外键维护权：两方都是多，随便一方都可以放弃外键维护权  但是一般被选择一方放弃  放弃维护权和【一对多】一致</li><li>级联操作：删除对象以及对象关联的对象以及中间表中关联的数据  操作和一对多一致</li></ul><p><strong>对象导航查询</strong></p><ul><li>查询一个对象时，通过此对象查询其关联对象  操作即：直接通过对象.getxxx()方法即之前创建关联的对象属性时的get方法获取即可  内部自动查询好了</li><li>一方查询多方：默认使用延迟加载（因为在一方查询多方，有可能多方有太多数据，立即加载后不用则极大浪费内存）   多方查询一方：默认使用立即加载（多方查询一方时由于只多一条数据，影响不大，所以立即查询了）</li><li>延迟加载： 默认即使用延迟加载的形式查询的   可以修改延迟加载为立即加载 即在实体类映射中通过@OneToMany属性fetch配置 EAGER=立即加载 LAZY=延迟加载<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置立即加载：</span><br><span class="line"><span class="comment">//使用注解形式配置多表关系  1-声明关系  2-配置外键</span></span><br><span class="line"><span class="meta">@OneToMany(mappedBy=&quot;customer&quot;,cascade = CascadeType.ALL,fetch = FetchType.EAGER )</span> <span class="comment">//CascadeType.ALL=所有操作（insert、delete等）都可级联  FetchType.EAGER</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;LinkMan&gt; linkmans = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springCloud初识</title>
      <link href="/aiyblog/2020/01/26/spring/springCloud%E5%88%9D%E8%AF%86/"/>
      <url>/aiyblog/2020/01/26/spring/springCloud%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p> 1–架构演变</p><blockquote><p>传统架构 –》 水平拆分（分层） –》 垂直拆分（功能拆分 最早的分布式） –》 soa（dubbo 提供服务 发现服务） –》 微服务（springCloud）</p></blockquote><p>2–远程调用技术</p><blockquote><p>rpc协议：自定义数据格式，限定技术，传输速度比较快 效率高 tcp 代表：dubbo<br>http协议：统一的数据格式，不限定技术，rest接口 tcp 代表:springCloud</p></blockquote><p>3–springCloud</p><blockquote><p>微服务架构的解决方案，是很多组件的集合<br>eureka：注册中心，服务的注册与发现<br>ribbon：负载均衡组件<br>hystrix：熔断组件<br>feign：远程调用组件（会去集成ribbon、hystrix）<br>zuul：网关组件，路由请求，过滤器（会去集成ribbon、hystrix）</p></blockquote><h2 id="eureka注册中心"><a href="#eureka注册中心" class="headerlink" title="eureka注册中心"></a>eureka注册中心</h2><h3 id="搭建eureka注册中心"><a href="#搭建eureka注册中心" class="headerlink" title="搭建eureka注册中心"></a>搭建eureka注册中心</h3><p>1-引入组件的启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR6<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 统一管理依赖的版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2-覆盖默认配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai-eureka</span>  <span class="comment">#将来作为微服务名称注入到eureka容器</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:$&#123;server.port&#125;/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>  <span class="comment"># 服务提供方启动时，会检测该参数是否为ture，true==注册给eureka</span></span><br></pre></td></tr></table></figure><p>3-在引导类上添加注解，开启相关组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>  <span class="comment">//启用eureka服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoaiEurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          SpringApplication.run(XiaoaiEurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入其他客户端到注册中心"><a href="#引入其他客户端到注册中心" class="headerlink" title="引入其他客户端到注册中心"></a>引入其他客户端到注册中心</h3><p>1–引如客户端依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR6<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--eureka客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 统一管理依赖的版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2–application配置文件配置微服务信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span> <span class="comment">#添加注册信息</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-provider</span> <span class="comment">#将来会作为微服务的名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br></pre></td></tr></table></figure><p>3–引导类开启客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.xiaoai.service.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//启用eureka客户端，@EnableEurekaClient也可以</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoaiServiceProviderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(XiaoaiServiceProviderApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4–消费端调用提供端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @GetMapping</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line"><span class="comment">//    public User queryUserById(@RequestParam(&quot;id&quot;)Long id)&#123;</span></span><br><span class="line"><span class="comment">//        return this.restTemplate.getForObject(&quot;http://localhost:8081/user/&quot;+id,User.class);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//改造消费方，解决地址硬编码问题</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;service-provider&quot;</span>);</span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(instance.getHost()+<span class="string">&quot;---&quot;</span>+instance.getPort());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.restTemplate.getForObject(<span class="string">&quot;http://&quot;</span> + instance.getHost() + <span class="string">&quot;:&quot;</span> + instance.getPort() + <span class="string">&quot;/user/&quot;</span>+id,User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高可用eureka"><a href="#高可用eureka" class="headerlink" title="高可用eureka"></a>高可用eureka</h3><p><em><strong>高可用</strong></em>：一个eureka挂了不影响整体的使用   在多个服务器上运行eureka项目可实现  由于有多个eureka服务端，所以即使挂掉一个还有另外的可以使用</p><blockquote><p>以下为idea中代码演示：例如端口10086和10087</p></blockquote><p>1-直接在idea的Run Dashboard复制一个应用<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200803173444153-583638965.png"><br>2-相互注册，先启动第一个eureka<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200803173115508-2119547667.png"><br>3-修改端口启动第二个eureka<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200803173628962-1399522172.png"><br>4-访问<a href="http://localhost:10086和http://localhost:10087可见其已经同步以及可见两个服务端的eureka">http://localhost:10086和http://localhost:10087可见其已经同步以及可见两个服务端的eureka</a><br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200803174019365-484729270.png"></p><blockquote><p>*多个服务端eureka也是一样的操作，把一个注册到另一个中，即可同步，多个相互围成一圈注册，如：6-》7 -》8 -》9 -》6</p></blockquote><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>**<code>服务注册：</code>**服务提供者在启动时，会检测配置属性中的: <code>eureka.client.register-with-eureka=true</code>参数是否正确，事实上默认就是true。<br>如果值确实为true,则会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，Eureka Server会把这些信息保存到一个双层Map结构中。</p><blockquote><p>双层map：Map&lt;serviceId(注册时配置application.name的那个名称), Map&lt;服务实例名，实例对象( instance) </p></blockquote><p>**<code>服务续约：</code>**在注册服务完成以后，服务提供者会维持一个心跳(定时向EurekaServer发起Rest请求)，告诉EurekaServer:“我还活着”。 这个我们称为服务的续约(renew) ;<br>有两个重要参数可以修改服务续约的行为:</p><blockquote><p>eureka:<br>　　instance:<br>　　　　lease-expiration-duration-in-seconds: 90<br>　　　　lease-renewal-interval-in-seconds: 30<br>lease-renewal-interval-in-seconds:服务续约(renew)的间隔，默认为30秒  即30秒给一个反应证明还活着<br>lease-expiration-duration-in-seconds:服务失效时间，默认值90秒 即90秒没响应当其挂了</p></blockquote><p>也就是说，默认情况下每个30秒服务会向注册中心发送一-次心跳， 证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，会从服务列表中移除，这两个值在生产环境不要修改，默认即可。</p><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p><strong><code>获取服务列表：</code></strong> 当服务消费者启动时，会检测<code>eureka.client.fetch-registry=true</code>参数的值，如果为true,则会拉取EurekaServer服务的列表只读备份，然后缓存在本地。<br>并且每隔30秒会重新获取并更新数据。我们可以通过下面的参数来修改:</p><blockquote><p>eureka:<br>　　client :<br>　　　　registry-fetch-interval-seconds: 5</p></blockquote><p>生产环境中，我们不需要修改这个值。但是为了开发环境下，能够快速得到服务的最新状态，我们可以将其设置小- -点。</p><h3 id="失效剔除和自我保护"><a href="#失效剔除和自我保护" class="headerlink" title="失效剔除和自我保护"></a>失效剔除和自我保护</h3><p><strong><code>服务下线：</code></strong> 当服务进行正常关闭操作时，它会触发一个服务下线的REST请求给Eureka Server，告诉服务注册中心：“我要下线了”。服务中心接受到请求之后，将该服务置为下线状态。<br><strong><code>失效剔除：</code></strong></p><blockquote><p>有些时候，我们的服务提供方并不一定会正常下线，可能因为内存溢出、网络故障等原因导致服务无法正常工作。EurekaServer需要将这样的服务剔除出服务列表。<br>因此它会开启一个定时任务，每隔60秒对所有失效的服务（超过90秒未响应）进行剔除。可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改，单位是毫秒。<br>生产环境不要修改，这个会对我们开发带来极大的不变，你对服务重启，隔了60秒Eureka才反应过来。开发阶段可以适当调整，比如：10秒</p></blockquote><p><strong><code>自我保护：</code></strong> 我们关停一个服务，就会在Eureka面板看到一条警告：<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200803181837972-1766628380.png"><br>这是触发了Eureka的自我保护机制。当一个服务未按时进行心跳续约时，Eureka会统计最近15分钟心跳失败的服务实例的比例是否超过了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，<br>因为服务可能没有宕机。Eureka就会把当前实例的注册信息保护起来，不予剔除。生产环境下这很有效，保证了大多数服务依然可用。但是这给我们的开发带来了麻烦，因此开发阶段我们都会关闭自我保护模式：<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200803181906585-1211527897.png"></p><h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><p>Ribbon是Netflix 发布的负载均衡器，它有助于控制HTTP和TCP客户端的行为。为Ribbon配置服务提供者地址列表后，Ribbon 就可基于某种负载均衡算法，自动地帮助服务泌费者去请求。<br>Ribbon 默认为我们提供了很多的负载均衡算法，例如轮询(一个一个轮下去到结尾又从头开始)、随机等。当然，我们也可为Ribbon实现自定义的负载均衡算法。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>1–引入启动器（消费方引入）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka默认集成了ribbon，引入了eureka后可以不用再引入ribbon</span><br></pre></td></tr></table></figure><p>2–覆盖默认配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可不用覆盖任何配置也可以使用</span><br></pre></td></tr></table></figure><p>3–引导类启用组件（消费方开启）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//启用eureka客户端，@EnableEurekaClient也可以</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoaiServiceConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span>  <span class="comment">//开启ribbon负载均衡</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(XiaoaiServiceConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4–消费方控制器方法消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //--------------------------------------------消费方传统方式调用提供方</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private RestTemplate restTemplate;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @GetMapping</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line"><span class="comment">//    public User queryUserById(@RequestParam(&quot;id&quot;)Long id)&#123;</span></span><br><span class="line"><span class="comment">//        return this.restTemplate.getForObject(&quot;http://localhost:8081/user/&quot;+id,User.class);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    //--------------------------------------------改造消费方，解决地址硬编码问题</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private RestTemplate restTemplate;</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private DiscoveryClient discoveryClient;  //最早的时候服务发现注册都是通过DiscoveryClient来实现的，随着版本变迁把DiscoveryClient服务注册抽离出来变成了ServiceRegistry抽象，专门负责服务注册，DiscoveryClient专门负责服务发现</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @GetMapping</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line"><span class="comment">//    public User queryUserById(@RequestParam(&quot;id&quot;)Long id)&#123;</span></span><br><span class="line"><span class="comment">//        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;service-provider&quot;); //通过serviceId获取实例列表</span></span><br><span class="line"><span class="comment">//        ServiceInstance instance = instances.get(0); //获取一个服务实例，由于这里只运行了一个提供服务，直接获取列表第一个即可</span></span><br><span class="line"><span class="comment">//        return this.restTemplate.getForObject(&quot;http://&quot; + instance.getHost() + &quot;:&quot; + instance.getPort() + &quot;/user/&quot;+id,User.class); //通过实例拼接对应的url</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------------------改造消费方，解决地址硬编码问题    启用ribbon负载均衡后</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.restTemplate.getForObject(<span class="string">&quot;http://service-provider/user/&quot;</span>+id,User.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义负载均衡策略"><a href="#定义负载均衡策略" class="headerlink" title="定义负载均衡策略"></a>定义负载均衡策略</h3><p>可实现 Irule接口自定义策略<br>默认已经实现了好几种</p><blockquote><p>如何设置默认某一种策略？<br>可以在消费服务端application.yml配置文件加入配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service- provider:</span>  <span class="comment"># 这是服务提供方的服务id即之前自己注册服务时定义的名称</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span>  </span><br></pre></td></tr></table></figure><h2 id="Hystrix熔断"><a href="#Hystrix熔断" class="headerlink" title="Hystrix熔断"></a>Hystrix熔断</h2><p>Hystrix(豪猪)，全身是刺，是一种保护机制。Hystrix也是Netflix公司的一款组件。</p><blockquote><p><strong><code>雪崩问题</code></strong> 微服务中，服务间调用关系错综复杂，一个请求，可能需要调用多个微服务接口才能实现，会形成非常复杂的调用链路。</p></blockquote><p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，形成雪崩效应。<br>这就好比，一个汽车生产线，生产不同的汽车，需要使用不同的零件，如果某个零件因为种种原因无法使用，那么就会造成整台车无法装配，陷入等待零件的状态，直到零件到位，才能继续组装。<br>此时如果有很多个车型都需要这个零件，那么整个工厂都将陷入等待的状态，导致所有生产都陷入瘫痪。一个零件的波及范围不断扩大。</p><p>Hystix解决雪崩问题的手段有两个:</p><ul><li>线程隔离</li><li>服务熔断</li></ul><h3 id="线程隔离"><a href="#线程隔离" class="headerlink" title="线程隔离"></a>线程隔离</h3><p>Hystrix为每个依赖服务调用分配一个小的线程池， 如果线程池已满调用将被立即拒绝，默认不采用排队，加速失败判定时间。<br>用户的请求将不再直接访问服务，而是通过线程池中的空闲线程来访问服务，如果线程池已满，或者请求超时，则会进行降级处理，什么是服务降级?</p><blockquote><p><strong><code>服务降级:</code></strong> 优先保证核心服务，而非核心服务不可用或弱可用。</p></blockquote><p>用户的请求故障时，不会被阻塞，更不会无休止的等待或者看到系统崩溃，至少可以看到一个执行结果(例如返回友好的提示信息)。<br>服务降级虽然会导致请求失败，但是不会导致阻塞，而且最多会影响这个依赖服务对应的线程池中的资源，对其它服务没有影响。</p><p>触发Hystix服务降级的情况:</p><ul><li>线程池已满</li><li>请求超时</li></ul><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><h4 id="hystrix服务降级"><a href="#hystrix服务降级" class="headerlink" title="hystrix服务降级"></a>hystrix服务降级</h4><p><strong>实例</strong></p><p>1–引入依赖（消费端服务）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    groupId&gt;org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2–覆盖默认配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可不做任何配置，直接使用默认配置</span><br></pre></td></tr></table></figure><p>3–引导类启用组件（消费端服务）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//启用eureka客户端，@EnableEurekaClient也可以</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span>   <span class="comment">//开启熔断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoaiServiceConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span>  <span class="comment">//开启负载均衡</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;SpringApplication.run(XiaoaiServiceConsumerApplication.class, args);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4–控制类编写熔断方法并关联 如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------------------改造消费方，解决地址硬编码问题    启用ribbon负载均衡后</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;queryUserByIdFalback&quot;)</span> <span class="comment">//2--关联熔断方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.restTemplate.getForObject(<span class="string">&quot;http://service-provider/user/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1--定义熔断方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserByIdFalback</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;服务器正忙，请稍后再试!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭提供服务访问相应消费服务端url可见：<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804150054061-1042539107.png"></p><p><strong>定义全局熔断方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/user&quot;)</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;FalbackMethod&quot;)</span> <span class="comment">// 定义全局熔断方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------------------改造消费方，解决地址硬编码问题    启用ribbon负载均衡后</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">//声明熔断方法。使用全局默认方法，属性fallbackMethod = &quot;queryUserByIdFalback&quot;可以不用了，但注解还是要。</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.restTemplate.getForObject(<span class="string">&quot;http://service-provider/user/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义熔断方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserByIdFalback</span><span class="params">(Long id)</span>&#123; <span class="comment">//熔断方法返回值必须和控制方法返回值一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;queryUserByIdFalback熔断：服务器正忙，请稍后再试!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//熔断方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">FalbackMethod</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;全局熔断：服务器正忙，请稍后再试!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭提供服务访问相应消费服务端url可见：<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804151237534-22527148.png"></p><p><strong>小结</strong></p><ul><li>引入hystrix启动器</li><li>application配置文件配置熔断时间，默认1秒</li><li>引导类注解：@EnableCircuitBreaker、@SpringCloudApplication</li><li>定义熔断方法<ul><li>局部熔断方法：要和被熔断的控制器方法返回值及参数列表一致</li><li>全局熔断方法：返回值类型要和被熔断的控制器方法一致，参数列表必须为空</li></ul></li><li>方法上@HystrixCommand：通过属性fallbackMethod=”局部熔断方法名”声明被熔断的方法,不声明默认使用全局熔断方法</li><li>类上@DefaultProperties： 通过属性defalutFallback=”全局熔断方法名” 声明全局熔断方法</li></ul><p><strong>设置超时</strong></p><p>当发生熔断，请求在超过1秒后就会返回错误信息，这是因为Hystix的默认超时时长为1，我们可以通过配置消费端服务application.yml配置文件修改这个值:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span> <span class="comment">#设置hys trix的超时时间为6000ms</span></span><br></pre></td></tr></table></figure><p><strong>组合注解</strong></p><p>@SpringCloudApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@SpringBootApplication  //标注该类为springboot的引导类</span></span><br><span class="line"><span class="comment">//@EnableDiscoveryClient  //启用eureka客户端，@EnableEurekaClient也可以</span></span><br><span class="line"><span class="comment">//@EnableCircuitBreaker   //开启熔断</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span>   <span class="comment">//组合注解 相当于@SpringBootApplication、@EnableDiscoveryClient 、@EnableCircuitBreaker </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoaiServiceConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span>  <span class="comment">//开启负载均衡</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(XiaoaiServiceConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="hystrix熔断-连请求都不发"><a href="#hystrix熔断-连请求都不发" class="headerlink" title="hystrix熔断 连请求都不发"></a><strong>hystrix熔断 连请求都不发</strong></h4><p>熔断机制的原理很简单，像家里的电路熔断器，如果电路发生短路能立刻熔断电路，避免发生灾难。在分布式系统中应用这一模式之后， 服务调用方可以自己进行判断某些服务反应慢或者存在大量超时的情况时，能够主动熔断，防止整个系统被拖垮。<br>不同于电路熔断只能断不能自动重连，Hystrix 可以实现弹性容错，当情况好转之后，可以自动重连。通过断路的方式，可以将后续请求直接拒绝掉，一段时间之后允许部分请求通过，如果调用成功则回到电路闭合状态，否则继续断开。</p><p>熔断状态机3个状态</p><ul><li>Closed:关闭状态，所有请求都正常访问。</li><li>Open:打开状态，所有请求都会被降级。Hystix会对请求情况计数， 当一定时间内失败请求百分比达到阈值，则触发熔断，断路器会完全打开。默认失败比例的阈值是50%，请求次数最少不低于20次。</li><li>Half Open:半开状态，open状态不是永久的，打开后会进入休眠时间(默认是5S)。随后断路器会自动进入半开状态。此时会释放部分请求通过，若这些请求都是健康的，则会完全关闭断路器，否则继续保持打开，再次进行休眠计时</li></ul><p><strong>实例</strong></p><p>1–消费服务端控制器方法（人为制造异常）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/user&quot;)</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;FalbackMethod&quot;)</span> <span class="comment">// 定义全局熔断方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------------------改造消费方，解决地址硬编码问题    启用ribbon负载均衡后</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">//声明熔断方法。使用全局默认方法，属性fallbackMethod = &quot;queryUserByIdFalback&quot;可以不用了，但注解还是要。</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.restTemplate.getForObject(<span class="string">&quot;http://service-provider/user/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//熔断方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserByIdFalback</span><span class="params">(Long id)</span>&#123; <span class="comment">//熔断方法返回值必须和控制方法返回值一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;queryUserByIdFalback熔断：服务器正忙，请稍后再试!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//熔断方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">FalbackMethod</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;全局熔断：服务器正忙，请稍后再试!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即：上述代码默认情况下id=1访问会被熔断，id=2正常，当连续快速访问id=1后，马上访问id=2,此时id=2也会被熔断</p><p>默认的熔断触发要求较高，休眠时间窗较短，为了测试方便，我们可以通过在消费服务端application配置文件配置修改熔断策略:</p><ul><li>circuitBreaker.requestVolumeThreshold=10</li><li>circuitBreaker.sleepwindowInMillis econds=10000</li><li>circuitBreaker.errorThresholdPer centage=50<blockquote><p>requestVolumeThreshold: 触发熔断的最小请求次数，默认20<br>errorThresholdPercentage: 触发熔断的失败请求最小占比，默认50%<br>sleepWindowInMilliseconds: 休眠时长，默认是5000毫秒</p></blockquote></li></ul><h2 id="Feign远程调用"><a href="#Feign远程调用" class="headerlink" title="Feign远程调用"></a>Feign远程调用</h2><p>Feign是Netflix开发的声明式、模板化的HTTP客户端，其灵感来自Retrofit、 JAXRS-2.0以及WebSocket.Feign 可帮助我们更加便捷、优雅地调用HTTP API。<br>在SpringCloud中，使用Feign非常简单—-创建一个接口，并在接口上添加一些注解，代码就完成了。Feign 支持多种注解，例如Feign自带的注解或者JAX-RS注解等。<br>Spring Cloud对Feign进行了增强，使Feign支持了Spring MVC注解，并整合了Ribbon和Eureka,从而让Feign的使用更加方便。</p><p>1–引入启动器（消费服务端）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2–覆盖默认配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也可以不做任何配置</span><br></pre></td></tr></table></figure><p>3–引导类启用feign </p><p>4–内容已经封装好restTemplate了可以不再引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.SpringCloudApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@EnableDiscoveryClient  //启用eureka客户端，@EnableEurekaClient也可以</span></span><br><span class="line"><span class="comment">//@EnableCircuitBreaker   //开启熔断</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span>   <span class="comment">//组合注解 相当于@SpringBootApplication、@EnableDiscoveryClient 、@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>   <span class="comment">//启动feign组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoaiServiceConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Bean</span></span><br><span class="line"><span class="comment">//@LoadBalanced  //开启负载均衡</span></span><br><span class="line"><span class="comment">//public RestTemplate restTemplate()&#123;</span></span><br><span class="line"><span class="comment">//return new RestTemplate();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(XiaoaiServiceConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5–定义一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;service-provider&quot;)</span> <span class="comment">//声明一个接口是feign接口，参数为提供服务端的id，即注册时自己所取的名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/&#123;id&#125;&quot;)</span>  <span class="comment">//和提供服务端控制器里的方法一样 ，路径可以手动补，不建议使用@RequestMapping注解在接口上定义</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6–控制类方法内</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/user&quot;)</span></span><br><span class="line"><span class="comment">//@DefaultProperties(defaultFallback = &quot;FalbackMethod&quot;) // 定义全局熔断方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //-----------------------------------------------改造消费方，解决地址硬编码问题    启用ribbon负载均衡后</span></span><br><span class="line"><span class="comment">////    @Autowired</span></span><br><span class="line"><span class="comment">////    private RestTemplate restTemplate;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @GetMapping</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line"><span class="comment">//    @HystrixCommand //声明熔断方法。使用全局默认方法，属性fallbackMethod = &quot;queryUserByIdFalback&quot;可以不用了，但注解还是要。</span></span><br><span class="line"><span class="comment">//    public String queryUserById(@RequestParam(&quot;id&quot;)Long id)&#123;</span></span><br><span class="line"><span class="comment">//        return this.restTemplate.getForObject(&quot;http://service-provider/user/&quot;+id,String.class);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //熔断方法</span></span><br><span class="line"><span class="comment">//    public String queryUserByIdFalback(Long id)&#123; //熔断方法返回值必须和控制方法返回值一样</span></span><br><span class="line"><span class="comment">//        return &quot;queryUserByIdFalback熔断：服务器正忙，请稍后再试!&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //熔断方法</span></span><br><span class="line"><span class="comment">//    public String FalbackMethod()&#123;</span></span><br><span class="line"><span class="comment">//       return &quot;全局熔断：服务器正忙，请稍后再试!&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------------------feign的使用</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//@HystrixCommand //声明熔断方法。</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.userClient.queryUserById(id).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其底层是实例化自己集成的restTemlate，通过注解中的服务名称获取实例，通过路径远程调用提供服务端完成</p><p>feign自动集成ribbon负载均衡以及hystrix熔断。所以其也可以达到负载均衡的功能以及支持熔断。<br>feign默认关闭hystrix熔断，如果需要开启需要手动配置。如：在消费服务端的application配置文件中配置开启熔断。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启Feign的熔断功能</span></span><br></pre></td></tr></table></figure><h3 id="feign自定义熔断方法"><a href="#feign自定义熔断方法" class="headerlink" title="feign自定义熔断方法"></a>feign自定义熔断方法</h3><p>1–定义一个类实现feign接口,实现方法，方法即是熔断方法   缺点：当接口有多个方法时需要实现多个方法了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClientFallback</span> <span class="keyword">implements</span> <span class="title class_">UserClient</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserName(<span class="string">&quot;服务器正忙，请稍后访问！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2–feign接口注解引入实现类即熔断类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;service-provider&quot;,fallback = UserClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;user/&#123;id&#125;&quot;)</span>  <span class="comment">//和提供服务端控制器里的方法一样 ，路径可以手动补，不建议使用@RequestMapping注解在接口上定义</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3–控制器方法一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.client.UserClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------------------------------------------feign的使用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.userClient.queryUserById(id).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关闭提供服务端访问相应url 如下：<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804172648748-1375454798.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>引入openFeign启动器</li><li>覆盖默认配置 （feign.hystrix.enable=true可以开启feign的熔断功能）</li><li>引导类上@EnableFeignClients启用</li><li>创建一个接口 ，使用注解@FeignClient  value属性标识提供服务端名称 fallback=”熔断方法.class”</li><li>在接口中定义一些方法，这些方法的书写方式跟之前服务提供端controller中方法类似。</li><li>可以创建熔断类实现feign接口，实现对应的方法，这些方法就是熔断方法</li></ul><h2 id="Zuul网关"><a href="#Zuul网关" class="headerlink" title="Zuul网关"></a>Zuul网关</h2><p>Zuul是Netlix开源的微服务网关，它可以和Eureka、Ribbon、 Hystrix 等组件配合使用。<br>Zuul的核心是一系列的过滤器，这些过滤器可以完成以下功能。</p><ul><li>身份认证与安全:识别每个资源的验证要求，并拒绝那些与要求不符的请求。</li><li>审查与监控:在边缘位置追踪有意义的数据和统计结果，从而带来精确的生产视图。</li><li>动态路由:动态地将请求路由到不同的后端集群。</li><li>压力测试:逐渐增加指向集群的流量，以了解性能。</li><li>负载分配:为每一种负载类型分配对应容量，并弃用超出限定值的请求。</li><li>静态响应处理:在边缘位置直接建立部分响应，从而避免其转发到内部集群。</li><li>多区域弹性:跨越AWS Region进行请求路由，旨在实现ELB ( Elastic Load Balancing)使用的多样化，以及让系统的边缘更贴近系统的使用者。</li></ul><p>Spring Cloud对Zuul进行了整合与增强。目前，Zuul使用的默认HTTP客户端是Apache HTTP Client,也可以使用RestClient或者okhttp3.0kHttpClient。<br>如果想要使用RestClient,可以设置ribbon.restclient.enabled=true;想要使用okhttp3.0kHttpClient,可以设置ribbon.okhttp.enabled=true。</p><p>**<code>路由：</code>**分发给不同的微服务（通过服务名）<br>**<code>负载均衡：</code>**分发同一个微服务的不同实例，减少单个压力</p><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804200420600-1481742674.png"></p><h3 id="zuul4种配置方式"><a href="#zuul4种配置方式" class="headerlink" title="zuul4种配置方式"></a>zuul4种配置方式</h3><p><strong>配置方式1</strong>：快速入门 </p><p>（只是做了路径分发 通过路径可路由）</p><p>1–新建项目，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2–覆盖默认配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span>  <span class="comment"># 设置应用端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span>  <span class="comment"># 设置应用即微服务名称</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br></pre></td></tr></table></figure><p>3–引导类启用zuul组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.zuul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span>  <span class="comment">//启用zuul组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoaiZuulApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(XiaoaiZuulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804223010842-1498386785.png"></p><p>4–配置路由</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="comment"># 路由名称，可以随便写，习惯上用服务的名称，即之前自己定义的某个服务的名称。</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/service-provider/**</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://localhost:8081</span></span><br></pre></td></tr></table></figure><p>–通过zuul访问配置好的服务，可以正常访问<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804223431458-915036805.png"></p><p>–如未配置消费端路由，zuul访问其url<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804224048466-1001079166.png"><br>–配置消费服务端路由后，zuul访问其url</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="string">service-provider:**</span> <span class="comment"># 路由名称，可以随便写，习惯上用服务的名称，即之前自己定义的某个服务的名称。</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/service-provider/**</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://localhost:8081</span></span><br><span class="line">    <span class="attr">service-consumer:</span> <span class="comment"># 配置消费端路由</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/service-consumer/**</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://localhost:80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804224204444-1056325677.png"></p><p><strong>配置方式2</strong>：zuul注册到eureka容器 </p><p>（通过服务id可路由）</p><p>1–引入eureka启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入eureka--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2–把zuul注入eureka容器中,application配置文件配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http/localhost:10086/eureka</span></span><br></pre></td></tr></table></figure><p>3–引导类启用eureka</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.zuul;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span>  <span class="comment">//启用zuul组件</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//启用eureka客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoaiZuulApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(XiaoaiZuulApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4–配置文件可以修改路由，直接配置服务id即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="comment"># 路由名称，可以随便写，习惯上用服务的名称，即之前自己定义的某个服务的名称。</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/service-provider/**</span></span><br><span class="line"><span class="comment">#      url: http://localhost:8081  # 写死端口无法负载均衡</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">service-provider</span>  <span class="comment"># 把zuul注入到了eureka后，其可以拉取客户端服务，所以可以直接写服务id，即自己定义的名称，通过服务id，zuul也可以实现负载均衡</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http//localhost:10086/eureka</span></span><br></pre></td></tr></table></figure><p>–zuul访问提供服务端url可以正常访问<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804230734748-1475289561.png"></p><p><strong>配置方式3</strong>：路径直接配置在服务id后</p><p>–application配置文件配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="string">/service-provider/**</span> <span class="comment"># 路由名称，可以随便写，习惯上用服务的名称，即之前自己定义的某个服务的名称。</span></span><br><span class="line"><span class="comment">#      path: /service-provider/**</span></span><br><span class="line"><span class="comment">#      url: http://localhost:8081</span></span><br><span class="line"><span class="comment">#      serviceId: service-provider  # 把zuul注入到了eureka后，其可以拉取客户端服务，所以可以直接写服务id，即自己定义的名称，通过服务idzuul也可以实现负载均衡</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br></pre></td></tr></table></figure><p>–访问<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804231504404-1780727623.png"></p><p><strong>配置方式4</strong>： 加入eureka容器后 不配置任何路由  默认访问就是服务名加路径</p><p>–配置如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>–访问<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804231739572-1193410492.png"><br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804231842685-1635589126.png"></p><p>默认使用第三种配置方式，使用第三种可以修改路径 简化路径前缀 如配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="string">/user/**</span> <span class="comment"># 路由名称，可以随便写，习惯上用服务的名称，即之前自己定义的某个服务的名称。 路径可以使用服务id也可以修改自定义，这里改为user</span></span><br><span class="line">    <span class="attr">service-consumer:</span> <span class="string">/consumer/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br></pre></td></tr></table></figure><p>–访问<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804232313402-2135318801.png"><br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804232833469-1755329543.png"></p><p>在某个微服务中控制器减少一层路径 如提供端服务service-provider的控制类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.service.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.xiaoai.service.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.userService.queryUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>zuul的application配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="string">/user/**</span> <span class="comment"># 路由名称，可以随便写，习惯上用服务的名称，即之前自己定义的某个服务的名称。</span></span><br><span class="line">    <span class="attr">service-consumer:</span> <span class="string">/consumer/**</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br></pre></td></tr></table></figure><p>–访问<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804233428659-997765241.png"></p><h3 id="网关前缀"><a href="#网关前缀" class="headerlink" title="网关前缀"></a>网关前缀</h3><p>由于项目发布以后无法知道访问路径是否经过网关，可以在application配置文件中配置加入前缀来区分访问是否经过网关。如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoai_zuul</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">service-provider:</span> <span class="string">/user/**</span> <span class="comment"># 路由名称，可以随便写，习惯上用服务的名称，即之前自己定义的某个服务的名称。</span></span><br><span class="line">    <span class="attr">service-consumer:</span> <span class="string">/consumer/**</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 前缀用于区分访问是否经过网关，这里为api，可以自定义，默认一般使用api</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>–访问<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804234329419-988759955.png"><br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804234312260-1329190883.png"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>引入zuul的启动器</li><li>配置：<ul><li>zuul.routes.&lt;路由名称&gt;.path=/service-provider/**    zuul.routes.&lt;路由名称&gt;.url=<a href="http://localhosta:8081/">http://localhosta:8081</a></li><li>zuul.routes.&lt;路由名称&gt;.path=/service-provider/**    zuul.routes.&lt;路由名称&gt;.serviceId=service-provider</li><li>zuul.routes.服务名称=/service-provider/**</li><li>不用配置，默认就是服务id+路径</li></ul></li><li>引导类注解@EnableZuulProxy 开启zuul</li><li>引导类@EnableDiscoveryClient 开启eureka客户端</li></ul><hr><h3 id="zuul过滤器"><a href="#zuul过滤器" class="headerlink" title="zuul过滤器"></a>zuul过滤器</h3><p>Zuul作为网关的其中一个重要功能， 就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现</p><p>Zuul过滤器需实现接口：IZuulFilter</p><ul><li>方法shouldFilter() 返回值true==执行run方法，false==不执行</li><li>方法run()  过滤器业务逻辑的方法，是否拦截在该方法判断<br>默认有一些实现了IZuulFilter接口的类<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200804235701098-626307115.png"></li></ul><p>1–定义一个过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.zuul.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器类型选择：pro route post error</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行的顺序，返回值越小，优先级越高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否执行该过滤器 即run方法</span></span><br><span class="line"><span class="comment">     * true==执行</span></span><br><span class="line"><span class="comment">     * false==不执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编写过滤器的业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ZuulException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException &#123;</span><br><span class="line">        <span class="comment">//初始化context上下文对象，</span></span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">//获取request对象</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> context.getRequest();</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> (String) request.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token))&#123;</span><br><span class="line">            <span class="comment">//拦截 ,这里表示不转发请求</span></span><br><span class="line">            context.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//响应状态码，401-身份未认证</span></span><br><span class="line">            context.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="comment">//设置响应的提示</span></span><br><span class="line">            context.setResponseBody(<span class="string">&quot;request error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回值为null，表示该过滤器什么都不做</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2–访问<br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200805003018212-4639134.png"><br><img src="https://img2020.cnblogs.com/blog/1594818/202008/1594818-20200805002819310-1139528966.png"></p><h2 id="springCloud初识小结"><a href="#springCloud初识小结" class="headerlink" title="springCloud初识小结"></a>springCloud初识小结</h2><ul><li>eureka <ul><li>注册中心 </li><li>微服务容器</li></ul></li><li>ribbon <ul><li>负载均衡组件</li><li>eureka集成 feign集成 zuul集成</li><li>@LoadBalanced 开启负载均衡</li><li>this.restTemplate.getForObject(“<a href="http://service-provider/user/&quot;+id,User.class">http://service-provider/user/&quot;+id,User.class</a>) 实现负载均衡</li></ul></li><li>hystrix<ul><li>容错组件</li><li>降级：检查每次请求，是否请求超时，或连接池已满<ul><li>引入hystrix启动器</li><li>熔断时间，默认1s,</li><li>在引导类上添加了一个注解: @EnableCircuitBreaker @SpringCloudApplication</li><li>定义熔断方法:局部(要和被熔断的方法返回值和参数列表一致)全局 (返回值类型要被熔断的方法一致， 参数列表必须为空)<ul><li>@HystrixCommand (fallbackMethod=”局部熔断方法名”):声明被熔断的方法</li><li>@DefaultProperties (defaultFallback=”全局熔断方法名”)</li></ul></li></ul></li><li>熔断：不再发送请求<ul><li>close:闭合状态，所有请求正常方法</li><li>open:打开状态，所有请求都无法访问。如果在- -定时间内容，失败的比例不小于508或者次数不少于20次</li><li>half open: 半开状态，打开状态默认5s休眠期，在休眠期所有请求无法正常访问。过了休眠期会进入半开状态，放部分请求通过</li></ul></li></ul></li><li>feign<ul><li>引入openFeign启动器</li><li>feign.hystrix.enable=true,开启feign的熔断功能</li><li>在引导类上@EnableFeignClients启用feign</li><li>创建一一个接口，在接口添加eFeignClient (value=”微服务id”, fallback=实现类.class)</li><li>在接口中定义一些方法，这些方法的书写方式跟之前controller类似</li><li>创建了一个熔断类，实现feign接口，实现对应的方法，这些实现方法就是熔断方法</li></ul></li><li>zuul<ul><li>网关，路由分发</li><li>引入zuul的启动器</li><li>配置：4种方式<ul><li>zuul.routes.&lt;路由名称&gt;.path=/service-provider/**    zuul.routes.&lt;路由名称&gt;.url=<a href="http://localhosta:8081/">http://localhosta:8081</a></li><li>zuul.routes.&lt;路由名称&gt;.path=/service-provider/**    zuul.routes.&lt;路由名称&gt;.serviceId=service-provider</li><li>zuul.routes.服务名称=/service-provider/**</li><li>不用配置，默认就是服务id+路径</li></ul></li><li>引导类注解@EnableZuulProxy 开启zuul</li><li>引导类@EnableDiscoveryClient 开启eureka客户端</li><li>过滤器：<ul><li>创建一个类继承ZuulFilter基类</li><li>重写四个方法<ul><li>filterType： pro route post error</li><li>filterOrder：返回值越小优先值越高</li><li>shouldFilter：返回值判断是否执行run方法。true=执行 false=不执行</li><li>run：具体的拦截逻辑</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC</title>
      <link href="/aiyblog/2020/01/26/spring/springMVC/"/>
      <url>/aiyblog/2020/01/26/spring/springMVC/</url>
      
        <content type="html"><![CDATA[<h2 id="三层结构"><a href="#三层结构" class="headerlink" title="三层结构"></a>三层结构</h2><p><strong>框架</strong><br>    表现层(web层)：            springMVC<br>    业务层(service层)：        spring<br>    持久层(dao层)：            MyBatis<br><strong>表现层一般使用MVC设计模型</strong><br>    M：model模型            例如javaBean等<br>    V：view视图                例如jsp、html等<br>    C：Controller控制器     例如Servlet等</p><pre><code>springMVC：基于java实现MVC设计模型的请求驱动类型的轻量级Web框架，属于springFrameWork的后续产品</code></pre><h2 id="springMVC和Struts2区别"><a href="#springMVC和Struts2区别" class="headerlink" title="springMVC和Struts2区别"></a>springMVC和Struts2区别</h2><p><strong>相同</strong>：都是基于MVC模型编写、底层都离不开原始ServletAPI、处理请求机制都是一个核心控制器<br><strong>不同</strong>：</p><ul><li>1-springMVC入口是一个Servlet，struts2是Filter</li><li>2-springMVC基于方法设计，struts2是基于类，stuts2每次会创建一个动作类，所以springMVC快些</li><li>3-springMVC使用更简洁，同时支持JSR303，处理ajax请求更方便</li><li>4-struts2的OGNL表达式使页面开发效率更高些，但执行效率没比JSTL提升，尤其struts2表单标签远没有html执行效率高        </li></ul><h2 id="pringMVC入门程序"><a href="#pringMVC入门程序" class="headerlink" title="pringMVC入门程序"></a>pringMVC入门程序</h2><p>需求：index.jsp点击超链接转发到成功jsp页面<br><strong>搭建开发环境</strong></p><ul><li>1-导入jar包</li><li>2-web.xml配置springMVC核心控制器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span><span class="comment">&lt;!--初始化加载springmvc配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3-创建springmvc配置文件并配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置创建 spring 容器要扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xiaoai&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启spr ingMVC框架注解的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springMVC处理流程"><a href="#springMVC处理流程" class="headerlink" title="springMVC处理流程"></a>springMVC处理流程</h2><p>​    1-Request请求，然后进入DispatcherServlet<br>​    2-DispatcherServlet(前端控制器)<br>​        –》Handler(处理映射器)：返回控制类和对应方法<br>​        –》HandlerAdapter(处理适配器)： 执行方法后并获得请求页面封装成视图模型返回<br>​        –》ViewResolver(视图解析器)：解析视图模型并返回<br>​        渲染视图并把模型数据填充到request域中<br>​    3-DispatcherServlet最后response响应<br>​            </p><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a><strong>@RequestMapping</strong></h2><p><strong>注解属性：</strong></p><table><thead><tr><th align="left">属性</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">等于path，表示方法映射路径</td><td align="left">valu=”/hello”</td></tr><tr><td align="left">path</td><td align="left">表示方法映射路径</td><td align="left">path=”/hello”</td></tr><tr><td align="left">method</td><td align="left">表示请求的方式 需要一个对象 可以传多个值{}，通过RequestMethod.来获得对应方式</td><td align="left">method={RequestMethod.POST<br/>请求为post，方法才执行</td></tr><tr><td align="left">params</td><td align="left">请求必须携带的参数</td><td align="left">params={“username”} 请求必须携带username这个参数，方法才执行<br/>params={“username=heihei”} 请求必须携带username这个参数并且值为heihei，方法才执行</td></tr><tr><td align="left">heades=</td><td align="left">限制请求消息头的条件</td><td align="left">heades={“Accept”} 请求必须包含请求头Accept，方法才执行</td></tr></tbody></table><h2 id="请求参数的绑定："><a href="#请求参数的绑定：" class="headerlink" title="请求参数的绑定："></a>请求参数的绑定：</h2><p>1-直接在方法参数中定义与传递参数相同名称的参数，(底层通过反射获取方法参数绑定)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法：</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testParam()执行了&quot;</span>);</span><br><span class="line">    System.out.println(username+<span class="string">&quot;--&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//视图页面：</span></span><br><span class="line">&lt;a href=<span class="string">&quot;paramCTL/testParam?username=xiaoai&amp;&amp;password=111111&quot;</span>&gt;请求参数的绑定&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>2-绑定到JavaBean对象</p><ul><li>参数名称和bean对象的set方法去掉set首字母小写的名称一致</li><li>当JavaBean对象引用另一个JavaBean对象，则传参的名称可以多层引用，如：JavaBean对象引用了User对象则可以使用user.xx属性等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法：</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/saveAccount&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveAccount</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------saveAccount()执行了&quot;</span>);</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图页面：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/paramCTL/saveAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;金额&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user.uname&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户姓名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user.age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户年龄&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3-绑定到list或map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;paramCTL/saveAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;金额&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    list用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;list[0].uname&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户姓名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    list用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;list[0].age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户年龄&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    map用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;map[&#x27;one&#x27;].uname&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户姓名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    map用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;map[&#x27;one&#x27;].age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户年龄&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springMVC中文乱码的解决：-过滤器"><a href="#springMVC中文乱码的解决：-过滤器" class="headerlink" title="springMVC中文乱码的解决：(过滤器)"></a>springMVC中文乱码的解决：(过滤器)</h2><ul><li>web.xml中配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置解决中文乱码的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h2><p>例如：当属性为date类型传入了一个参数字符串为2020-11-11不符合date类型格式时会报错。此时需要用自定义类型转换器来完成</p><ul><li>1-先写程序：需要实现Converter接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String,Date&gt;&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> source 传入的字符串</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;请传入数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//把字符串转换日期</span></span><br><span class="line">            <span class="keyword">return</span> df.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;数据类型转换出现错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2-springMVC.xml配置文件中配置自定义类型转换器（注册）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义类型转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span><span class="comment">&lt;!--添加自定义的类型转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.xiaoai.utils.StringToDateConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3-使转换器生效</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启springMVC框架注解的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在核心控制器中拿到servlet原生api"><a href="#在核心控制器中拿到servlet原生api" class="headerlink" title="在核心控制器中拿到servlet原生api"></a>在核心控制器中拿到servlet原生api</h2><ul><li>直接在方法参数里获取即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServlet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;----------testServlet()执行了&quot;</span>);</span><br><span class="line">System.out.println(request);</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">    System.out.println(session);</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(response);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="【-RequestParam-】"><a href="#【-RequestParam-】" class="headerlink" title="【**@RequestParam**】"></a>【**@RequestParam**】</h3><p>把请求中指定名称的参数给控制器中形参赋值</p><ul><li>属性value：请求参数名称</li><li>属性required：请求参数中是否必须提供此参数。默认true，表示必须提供，不提供则报错。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法：</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestParam</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testRequestParam()执行了&quot;</span>);</span><br><span class="line">    System.out.println(username);<span class="comment">//输出：xioaai</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面视图：</span></span><br><span class="line">&lt;a href=<span class="string">&quot;anno/testRequestParam?name=xiaoai&quot;</span>&gt;RequestParam&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="【-RequestBody】"><a href="#【-RequestBody】" class="headerlink" title="【@RequestBody】"></a>【@RequestBody】</h3><p>用于获取请求体内容。直接使用得到是key=value&amp;key=value…..结构的数据  get请求方式不适用</p><ul><li>属性required：是否必须有请求体。默认true，get请求报错，为false，get请求到null。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testRequestBody()执行了&quot;</span>);</span><br><span class="line">    System.out.println(body);<span class="comment">//输出：username=xxx&amp;age=xxx。xxx为表单里对应的输入值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--页面视图：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;anno/testRequestBody&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户姓名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户年龄&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="【-RequestHeader】"><a href="#【-RequestHeader】" class="headerlink" title="【@RequestHeader】"></a>【@RequestHeader】</h3><p>用于获取请求消息头    注：实际开发中一般不怎么用</p><ul><li>属性value：指定消息头名称</li><li>属性required：是否必须有此消息头</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestHeader&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestHeader</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;Accept&quot;)</span> String header)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testRequestHeader()执行了&quot;</span>);</span><br><span class="line">    System.out.println(header);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【-PathVariable】"><a href="#【-PathVariable】" class="headerlink" title="【@PathVariable】"></a>【@PathVariable】</h3><p>绑定url中的占位符。例如：请求url中 /delete/{id},这个{id}就是url占位符。 </p><ul><li>属性vlue：用于指定url中占位符名称</li><li>属性required：是否必须提供占位符。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testPathVariable/&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPathVariable</span><span class="params">(<span class="meta">@PathVariable(name = &quot;sid&quot;)</span>String id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testPathVariable()执行了&quot;</span>);</span><br><span class="line">    System.out.println(id);<span class="comment">//输出10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">视图页面：</span><br><span class="line">&lt;a href=<span class="string">&quot;anno/testPathVariable/10&quot;</span>&gt;PathVariable&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="【-CookieValue】"><a href="#【-CookieValue】" class="headerlink" title="【@CookieValue】"></a>【@CookieValue】</h3><p>获取某个cookie的数据<br>    属性value：指定cookie名称<br>    属性required：是否必须有此cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">testCookieValue</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String cookieValue)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testCookieValue()执行了&quot;</span>);</span><br><span class="line">    System.out.println(cookieValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【-ModelAttribute】"><a href="#【-ModelAttribute】" class="headerlink" title="【@ModelAttribute】"></a>【@ModelAttribute】</h3><ul><li>属性value：用于获取数据的key。可是pojo的属性名称，也可是map结构的key。</li></ul><p>放在方法上：表示当前方法会在控制器的方法执行之前先执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAttribute&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelAttribute</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testCookieValue()执行了&quot;</span>);</span><br><span class="line">    System.out.println(user);<span class="comment">//输出：user信息并且date带有数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*由于该方法先执行，直接返回数据即可</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> uname</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">showUser</span><span class="params">(String uname)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------showUser()方法执行了。。&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">//通过用户查询数据库(模拟)</span></span><br><span class="line">    user.setUname(uname);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    user.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放在参数上：获取指定的数据给参数赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAttribute&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelAttribute</span><span class="params">(<span class="meta">@ModelAttribute(&quot;abc&quot;)</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testCookieValue()执行了&quot;</span>);</span><br><span class="line">    System.out.println(user);<span class="comment">//输出：user信息并且date带有数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*把数据存入map，再从map取数据复制赋值给参数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> uname</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showUser</span><span class="params">(String uname, Map&lt;String,User&gt; map)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------showUser()方法执行了。。&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">//通过用户查询数据库(模拟)</span></span><br><span class="line">    user.setUname(uname);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    user.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    map.put(<span class="string">&quot;abc&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">视图页面：</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;anno/testModelAttribute&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户姓名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户年龄&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="【-SessionAttribute】"><a href="#【-SessionAttribute】" class="headerlink" title="【@SessionAttribute】"></a>【@SessionAttribute】</h3><p>用于多次执行控制器方法间的参数共享。只能作用于类上</p><ul><li>属性value：指定存入的属性名称</li><li>属性type：指定存入数据的类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/anno&quot;)</span></span><br><span class="line"><span class="meta">@SessionAttributes(value = &#123;&quot;SessionAttribute-msg&quot;&#125;)</span> <span class="comment">//把SessionAttribute-msg=xiaoai存入到session域中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnoController</span> &#123;</span><br><span class="line">    <span class="comment">//存入信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testSessionAttribute&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testSessionAttribute</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------testSessionAttribute()执行了&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;SessionAttribute-msg&quot;</span>,<span class="string">&quot;xioaai&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getSessionAttribute&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSessionAttribute</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------getSessionAttribute()执行了&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">SessionAttribute_msg</span> <span class="operator">=</span> (String) modelMap.get(<span class="string">&quot;SessionAttribute-msg&quot;</span>);</span><br><span class="line">        System.out.println(SessionAttribute_msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除信息</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delSessionAttribute&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delSessionAttribute</span><span class="params">(SessionStatus status)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------delSessionAttribute()执行了&quot;</span>);</span><br><span class="line">        status.setComplete();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="REST风格URL："><a href="#REST风格URL：" class="headerlink" title="REST风格URL："></a>REST风格URL：</h2><p>通过请求方式来判断执行那一个方法</p><ul><li>当请求路径和请求方法一致时：通过url占位符来判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&quot;/user&quot;</span> method=<span class="string">&quot;get&quot;</span></span><br><span class="line">findAll()</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;/user/&#123;id&#125;&quot;</span> method=<span class="string">&quot;get&quot;</span></span><br><span class="line">findById()</span><br><span class="line"></span><br><span class="line">localhost:<span class="number">8080</span>/user/<span class="number">10</span> get  </span><br><span class="line">直接带变量<span class="number">10</span>访问即可 不用localhost:<span class="number">8080</span>/user?id=<span class="number">10</span> get</span><br><span class="line"><span class="meta">@PathVariable</span>注解即用来取占位符的值</span><br></pre></td></tr></table></figure><blockquote><p>restful优点：结构清晰、符合标准、易于理解、扩展方便</p></blockquote><h2 id="基于HiddentHttpMethodFilter过滤器"><a href="#基于HiddentHttpMethodFilter过滤器" class="headerlink" title="基于HiddentHttpMethodFilter过滤器"></a>基于HiddentHttpMethodFilter过滤器</h2><p>form表单只支持GET和POST请求，DELETE/PUT等并不支持，</p><ul><li><p>spring3.0添加了过滤器HiddentHttpMethodFilter可将浏览器请求改为指定请求方式</p></li><li><p>通过表单hidden隐藏标签，修改请求方式</p></li><li><p>其他类如WebClient使用静态方法发送请求，也可模拟各种请求</p></li></ul><h2 id="响应之返回值"><a href="#响应之返回值" class="headerlink" title="响应之返回值"></a>响应之返回值</h2><h3 id="1-String字符串"><a href="#1-String字符串" class="headerlink" title="1-String字符串"></a>1-String字符串</h3><p>  方法执行并跳转到名称为返回值字符串页面    底层最终也会选择ModelAndView的方式跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testString&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testString</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testString()执行了。。。&quot;</span>);</span><br><span class="line">    <span class="comment">//模拟从数据库中查询出User对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    <span class="comment">//model对象存入数据</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-void"><a href="#2-void" class="headerlink" title="2-void"></a>2-void</h3><p>方法执行，然后再次请求路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testVoid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVoid</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testVoid()执行了。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>跳转1</strong>—-可以在视图目录下创建最后一级目录为名称的视图<br><strong>跳转2</strong>—-请求转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testVoid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVoid</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                     HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testVoid()执行了。。。&quot;</span>);</span><br><span class="line">    <span class="comment">//编写请求转发的语句  请求转发：一次请求，不用编写项目的名称</span></span><br><span class="line">    <span class="comment">//请求转发不再调用视图解析器，如果有多级目录要手动加上</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;success.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>跳转3</strong>—-重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testVoid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVoid</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                     HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testVoid()执行了。。。&quot;</span>);</span><br><span class="line">    <span class="comment">//重定向</span></span><br><span class="line">    response.sendRedirect(request.getContextPath()+<span class="string">&quot;/success.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>跳转4</strong>—-直接响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testVoid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVoid</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                     HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testVoid()执行了。。。&quot;</span>);</span><br><span class="line">    <span class="comment">//直接进行响应</span></span><br><span class="line">    <span class="comment">//--设置中文乱码</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">    <span class="comment">//--响应</span></span><br><span class="line">    response.getWriter().print(<span class="string">&quot;你好。直接响应&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-返回值为ModelAndView类型"><a href="#3-返回值为ModelAndView类型" class="headerlink" title="3-返回值为ModelAndView类型"></a>3-返回值为ModelAndView类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testModelAndView()执行了。。。&quot;</span>);</span><br><span class="line">    <span class="comment">//创建ModelAndView对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//模拟从数据库中查询出User对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;xiaoai&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    <span class="comment">//把user对象存储到mv中，底层也会把user存入到request对象域中</span></span><br><span class="line">    mv.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="comment">//跳转到那个页面可以设置</span></span><br><span class="line">    mv.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应之使用forword和redirect"><a href="#响应之使用forword和redirect" class="headerlink" title="响应之使用forword和redirect"></a>响应之使用forword和redirect</h2><p>请求转发和重定向是用不了视图解析的，所以路径问题需要注意<br><strong>1–forward</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testForword&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForword</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testForword()执行了。。。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/susccess.jsp&quot;</span>;<span class="comment">//路径需要自己手动填写其准确路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2–redirect</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testRedirect()执行了。。。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/suscces.jsp&quot;</span>;<span class="comment">//通过关键字来重定向返回可以不加项目名，框架默认帮加 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应json数据"><a href="#响应json数据" class="headerlink" title="响应json数据"></a>响应json数据</h2><p>过滤静态资源</p><ul><li>默认核心控制器过滤掉了静态资源，需要解决：在springMVC配置文件中配置静态资源不拦截</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器，哪些静态资源不拦截--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- 样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/**&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模拟ajax异步请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="comment">//编写json格式，设置属性和值</span></span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;user/testAjax&quot;</span>,</span><br><span class="line">        <span class="attr">contentType</span>:<span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:<span class="string">&#x27;&#123;&quot;username&quot;:&quot;xiaoai&quot;,&quot;password&quot;:&quot;123&quot;,&quot;age&quot;:&quot;21&quot;&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="comment">//data表示服务器响应的json数据，进行解析</span></span><br><span class="line">            <span class="title function_">alert</span>(data);</span><br><span class="line">            <span class="title function_">alert</span>(data.<span class="property">username</span>);</span><br><span class="line">            <span class="title function_">alert</span>(data.<span class="property">password</span>);</span><br><span class="line">            <span class="title function_">alert</span>(data.<span class="property">age</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制器方法</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/testAjax&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> User <span class="title function_">testAjax</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testAjax()执行了。。。&quot;</span>);</span><br><span class="line">    <span class="comment">//客户端发送ajax异步请求，传递的是json字符串，后端把json字符串封装到user对象中</span></span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">//做响应，模拟查询数据库</span></span><br><span class="line">    user.setUsername(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">31</span>);</span><br><span class="line">    <span class="comment">//做响应</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springMVC提供的文件上传"><a href="#springMVC提供的文件上传" class="headerlink" title="springMVC提供的文件上传"></a>springMVC提供的文件上传</h2><h3 id="1–文件上传回顾"><a href="#1–文件上传回顾" class="headerlink" title="1–文件上传回顾"></a>1–文件上传回顾</h3><ul><li>a-form表单enctype(表单请求正文的类型)取值必须是multipart/form-data(默认为：application/x-www-form-urlencoded)</li><li>b-method属性必须为post    </li><li>c-提供一个文件选择域(<input type="file" /> )</li></ul><h3 id="2–上传原理分析"><a href="#2–上传原理分析" class="headerlink" title="2–上传原理分析"></a>2–上传原理分析</h3><ul><li><p>a-form表单enctype取值不是默认，request.getParameter()失效。</p></li><li><p>b-enctype=”application/x-www-form-urlencoded”时，form表单正文内容：key=value&amp;key=value&amp;….</p></li><li><p>c-enctype=”multipart/form-data”时，form表单正文内容：每部分都是MIME类型描述的正文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3--借助第三方组件实现文件上传-----------------------------7de1a433602ac   分界符 </span><br><span class="line">Content-Disposition: form-data; name=&quot;userName&quot;  协议头 </span><br><span class="line">aaa              协议的正文 </span><br><span class="line">-----------------------------7de1a433602ac </span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; </span><br><span class="line">filename=&quot;C:\Users\zhy\Desktop\fileupload_demofile\b.txt&quot; </span><br><span class="line">Content-Type: text/plain         协议的类型（MIME 类型） </span><br><span class="line"></span><br><span class="line">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb </span><br><span class="line">-----------------------------7de1a433602ac-- </span><br></pre></td></tr></table></figure></li></ul><h3 id="3–借助第三方组件实现文件上传"><a href="#3–借助第三方组件实现文件上传" class="headerlink" title="3–借助第三方组件实现文件上传"></a>3–借助第三方组件实现文件上传</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用 Commons-fileupload 组件实现文件上传，需要导入该组件相应的支撑 jar 包：</span><br><span class="line">Commons-fileupload</span><br><span class="line">commons-io。</span><br><span class="line">commons-io 不属于文件上传组件的开发 jar 文件，</span><br><span class="line">Commons-fileupload 组件从 1.1 版本开始，它工作时需要 commons-io 包的支持。 </span><br></pre></td></tr></table></figure><h3 id="传统方式文件上传"><a href="#传统方式文件上传" class="headerlink" title="传统方式文件上传"></a>传统方式文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/fileUpload1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fileUpload1</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------fileUpload1()执行了。。。文件上传&quot;</span>);</span><br><span class="line">    <span class="comment">//使用fileupload组件完成文件上传</span></span><br><span class="line">    <span class="comment">//1-文件上传位置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads/&quot;</span>);</span><br><span class="line">    <span class="comment">//2-判断该路径是否存在</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3-解析request对象，获取上传文件项</span></span><br><span class="line">    <span class="type">DiskFileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">    <span class="type">ServletFileUpload</span> <span class="variable">upload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(factory);</span><br><span class="line">    <span class="comment">//解析request</span></span><br><span class="line">    List&lt;FileItem&gt; items = upload.parseRequest(request);<span class="comment">//全是文件项</span></span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span> (FileItem item:items)&#123;</span><br><span class="line">        <span class="comment">//进行判断，当前item对象是否是上传文件项</span></span><br><span class="line">        <span class="keyword">if</span> (item.isFormField())&#123; <span class="comment">//说明是普通表单项</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//说明是上传文件项</span></span><br><span class="line">            <span class="comment">//获取上传文件名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> item.getName();</span><br><span class="line">            <span class="comment">//把文件名称设置为唯一值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">            <span class="comment">//完成文件上传</span></span><br><span class="line">            item.write(<span class="keyword">new</span> <span class="title class_">File</span>(path,fileName));<span class="comment">//写到某个路径下</span></span><br><span class="line">            item.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>视图页面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;fileUploadCTRL/fileUpload1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="springMVC方式文件上传"><a href="#springMVC方式文件上传" class="headerlink" title="springMVC方式文件上传"></a>springMVC方式文件上传</h3><p><strong>原理分析</strong></p><ul><li>文件 –》request –》前端控制器 –》配置的文件解析器：解析request，获取上传文件项项返回 –》前端控制器带着上传文件项 –》</li><li>请求方法：通过MultipartFile类上传</li></ul><p>springMVC配置文件配置组件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器 id名称必须为：multipartResolver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/fileUpload2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fileUpload2</span><span class="params">(HttpServletRequest request,MultipartFile upload)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------fileUpload2()执行了。。。文件上传&quot;</span>);</span><br><span class="line">    <span class="comment">//1-文件上传位置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads/&quot;</span>);</span><br><span class="line">    <span class="comment">//2-判断该路径是否存在</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取上传文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> upload.getOriginalFilename();</span><br><span class="line">    <span class="comment">//把文件名称设置为唯一值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">    <span class="comment">//完成文件上传</span></span><br><span class="line">    upload.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path,fileName));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图页面：    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;fileUploadCTRL/fileUpload2&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>&lt;%--方法参数名称必须和该name一致--%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="以前笔记记录的文件上传和下载"><a href="#以前笔记记录的文件上传和下载" class="headerlink" title="以前笔记记录的文件上传和下载"></a>以前笔记记录的文件上传和下载</h3><p><strong>例子1（传统上传）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//半框架实现上传</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/up&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">up</span><span class="params">(<span class="meta">@RequestParam(&quot;uploadFile&quot;)</span> MultipartFile uploadFile ,</span></span><br><span class="line"><span class="params">                 String desc,</span></span><br><span class="line"><span class="params">                 HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取文件上传的名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;photo&quot;</span>)+File.separator+fileName;</span><br><span class="line">    <span class="comment">//获取输入输出流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> uploadFile.getInputStream();</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    //一个一个字节上传</span></span><br><span class="line"><span class="comment">//int i=0;</span></span><br><span class="line"><span class="comment">//while ((i=is.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//os.write(i);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//字节数组上传</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] flush = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((i=is.read(flush))!=-<span class="number">1</span>) &#123;</span><br><span class="line">        os.write(flush,<span class="number">0</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    os.close();</span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子2（框架直接上传）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//利用框架实现上传</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/up_old&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">up_old</span><span class="params">(<span class="meta">@RequestParam(&quot;uploadFile&quot;)</span> MultipartFile uploadFile ,</span></span><br><span class="line"><span class="params">                     String desc,</span></span><br><span class="line"><span class="params">                     HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取文件上传的名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalFileName</span> <span class="operator">=</span> UUID.randomUUID()+fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));<span class="comment">//解决重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;photo&quot;</span>)+File.separator+finalFileName;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    uploadFile.transferTo(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例子（固定图片下载）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/down&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; down(HttpSession session ) <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">//获取下载文件的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> session.getServletContext().getRealPath(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> realPath + java.io.File.separator+<span class="string">&quot;日向雏田.jpg&quot;</span>;</span><br><span class="line">    <span class="comment">//读取要下载的文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(finalPath);</span><br><span class="line">    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];<span class="comment">//available()获取输入流所读取的文件的最大字节数</span></span><br><span class="line">    is.read(b);</span><br><span class="line">    <span class="comment">//设置请求头</span></span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=zzz.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    ResponseEntity&lt; <span class="type">byte</span>[]&gt; entity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;<span class="type">byte</span>[]&gt;(b, headers, statusCode);</span><br><span class="line">    is.close();</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="springMVC跨服务器方式的文件上传"><a href="#springMVC跨服务器方式的文件上传" class="headerlink" title="springMVC跨服务器方式的文件上传"></a>springMVC跨服务器方式的文件上传</h3><p>需要导入相应的jar包（该jar包由sun公司提供）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.sun.jersey:jersey-client:<span class="number">1.18</span><span class="number">.1</span></span><br><span class="line">com.sun.jersey:jersey-core:<span class="number">1.18</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/fileUpload3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fileUpload3</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------fileUpload3()执行了。。。跨服务器文件上传&quot;</span>);</span><br><span class="line">    <span class="comment">//定义上传文件服务器路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:9090/uploads/&quot;</span>;</span><br><span class="line">    <span class="comment">//2-判断该路径是否存在</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取上传文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> upload.getOriginalFilename();</span><br><span class="line">    <span class="comment">//把文件名称设置为唯一值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    fileName = uuid+<span class="string">&quot;_&quot;</span>+fileName;</span><br><span class="line">    <span class="comment">//完成文件上传，跨服务器上传</span></span><br><span class="line">    <span class="comment">//创建客户端的对象</span></span><br><span class="line">    <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> Client.create();</span><br><span class="line">    <span class="comment">//和图片服务器进行连接</span></span><br><span class="line">    <span class="type">WebResource</span> <span class="variable">webResource</span> <span class="operator">=</span> client.resource(path + fileName);</span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    webResource.put(upload.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="springMVC异常处理"><a href="#springMVC异常处理" class="headerlink" title="springMVC异常处理"></a>springMVC异常处理</h2><p> 产生的异常都是一层一层往上抛出的，不处理最后会抛出到浏览器。<br>异常处理器组件：不把异常抛出到浏览器，通过异常处理器处理异常（把友好错误提示页面响应到浏览器）</p><ul><li>1–编写自定义异常类（做提示信息）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="comment">//存储提示信息的</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2–编写异常处理器（需要实现HandlerExceptionResolver接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(</span></span><br><span class="line"><span class="params">        HttpServletRequest httpServletRequest, </span></span><br><span class="line"><span class="params">        HttpServletResponse httpServletResponse, </span></span><br><span class="line"><span class="params">        Object o, </span></span><br><span class="line"><span class="params">        Exception ex)</span> &#123;</span><br><span class="line">        <span class="comment">//获取异常对象</span></span><br><span class="line">        <span class="type">SysException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> SysException)&#123;</span><br><span class="line">            e = (SysException) ex;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e = <span class="keyword">new</span> <span class="title class_">SysException</span>(<span class="string">&quot;系统正在维护....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建modelAndView</span></span><br><span class="line">        <span class="type">ModelAndView</span>  <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mv.addObject(<span class="string">&quot;errorMsg&quot;</span>, e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">&quot;errorPage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3–配置异常处理器（跳转提示页面） springMVC配置文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sysExceptionResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xiaoai.exception.SysExceptionResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4–控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testException</span><span class="params">()</span> <span class="keyword">throws</span> SysException&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------testException()执行了。。。异常处理&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">//抛出自定义异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SysException</span>(<span class="string">&quot;服务器走丢了。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    5–视图页面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>异常处理页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;user/testException&quot;</span>&gt;</span>异常处理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>错误页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">$&#123;errorMsg&#125;&lt;%--打印错误信息--%&gt;</span><br></pre></td></tr></table></figure><h2 id="springMVC拦截器"><a href="#springMVC拦截器" class="headerlink" title="springMVC拦截器"></a>springMVC拦截器</h2><p>拦截器类似过滤器filter，可以一个或多个</p><ul><li>请求–》拦截器（执行放行前代码） –》controller –》拦截器（执行放行后代码）–》响应</li></ul><p>拦截器和过滤器区别</p><ul><li>过滤器是servlet规范一部分，任何java web工程都能用，拦截器是springMVC框架自己的，只有springMVC框架才能用</li><li>过滤器在url-pattern中配置/*后，所有访问的资源都拦截，拦截器只拦截访问的控制方法，访问的是jsp、html、css、image或js等不会进行拦截</li></ul><p><strong>自定义拦截器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写拦截器类（需要实现HandlerInterceptor接口）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line">    <span class="comment">/** 预处理，放行前执行的方法（controller方法执行前执行）   </span></span><br><span class="line"><span class="comment">    return false==不放行 </span></span><br><span class="line"><span class="comment">    true==放行 执行下一拦截器，</span></span><br><span class="line"><span class="comment">    没有则执行controller中方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                             HttpServletResponse response, </span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------MyInterceptor1拦截器执行了。。。。放行之前的代码&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//放行后执行的方法（controller方法执行后执行）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                           HttpServletResponse response, </span></span><br><span class="line"><span class="params">                           Object handler, </span></span><br><span class="line"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------MyInterceptor1拦截器执行了。。。。放行之后的代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后执行的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                                HttpServletResponse response, </span></span><br><span class="line"><span class="params">                                Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------MyInterceptor1拦截器执行了。。。。最后执行代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置拦截器（springMVC配置文件中配置）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要拦截的具体的方法  /**==所有方法都拦截  /user/*==user路径下所有方法拦截--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--不要拦截的方法--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mvc:exclude-mapping path=&quot;&quot;&gt;&lt;/mvc:exclude-mapping&gt;--&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注册拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myInterceptor1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xiaoai.interceptor.MyInterceptor1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当两个拦截器时执行顺序如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">----------MyInterceptor1拦截器执行了。。。。放行之前的代码</span><br><span class="line">----------MyInterceptor2拦截器执行了。。。。放行之前的代码</span><br><span class="line">----------testInterceptor()执行了。。。拦截器测试的控制器方法</span><br><span class="line">----------MyInterceptor2拦截器执行了。。。。放行之后的代码</span><br><span class="line">----------MyInterceptor1拦截器执行了。。。。放行之后的代码</span><br><span class="line">----------success.jsp执行了。。。</span><br><span class="line">----------MyInterceptor2拦截器执行了。。。。最后执行代码</span><br><span class="line">----------MyInterceptor1拦截器执行了。。。。最后执行代码</span><br></pre></td></tr></table></figure><h2 id="ssm整合"><a href="#ssm整合" class="headerlink" title="ssm整合"></a>ssm整合</h2><p>**表现层(web层)**：springMVC框架<br><strong>业务层</strong>：spring框架<br><strong>持久层</strong>：myBatis框架</p><blockquote><p>一定是用spring框架去整合其他两个框架    写配置文件或注解？怎么简单怎么来    选：配置文件*注解方式</p></blockquote><p><strong>整合步骤：</strong>先配置每个框架，框架可以正常使用。再通过spring整合。</p><h3 id="spring整合springMVC"><a href="#spring整合springMVC" class="headerlink" title="spring整合springMVC"></a>spring整合springMVC</h3><p><strong>思路</strong>：service交由spring管理，在控制器方法中可以注入service对象并调用其方法，方法正常使用即spring和springMVC整合成功</p><p><strong>实现</strong>：在web.xml中加载了springMVC的配置文件，但spring配置文件还没有被加载，所以通过监听器把spring配置文件一起加载进来，把service交由spring管理，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--web.xml配置文件中配置监听器加载spring配置文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置spring的监听器, 默认只加载WEB-INF目录下的applicationContext.xml文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置配置文件的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring整合myBatis"><a href="#spring整合myBatis" class="headerlink" title="spring整合myBatis"></a>spring整合myBatis</h3><p><strong>思路</strong>：在service层中可以注入dao层并调用其方法，dao层功能实现即spring和myBatis整合成功。<br><strong>实现</strong>：在spring配置文件中配置使得spring的ioc容器中有相关dao接口代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring整合myBatis。spring.xml配置文件中配置整合myBatis--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///ssm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置sqlSessionFactory对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AccountDao接口所在的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.xiaoai.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置spring框架声明式事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">pointcut</span>=<span class="string">&quot;execution(* cn.xiaoai.service.impl.*ServiceImpl.*(..))&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当myBatis的配置文件的配置已经通过spring配置完，则myBatis配置文件可删除。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger使用</title>
      <link href="/aiyblog/2020/01/26/swagger%E4%BD%BF%E7%94%A8/"/>
      <url>/aiyblog/2020/01/26/swagger%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>源文：<a href="https://mp.weixin.qq.com/s/0-c0MAgtyOeKx6qzmdUG0w">https://mp.weixin.qq.com/s/0-c0MAgtyOeKx6qzmdUG0w</a></p><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><p><strong>前后端分离</strong></p><p>前后端通过API进行交互，相对独立且松耦合</p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li></ul><p><strong>Swagger</strong></p><ul><li>流行的API框架</li><li>Restful Api 文档在线自动生成器 =&gt; API 文档 与API 定义同步更新</li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><h2 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h2><p>使用Swagger要求：jdk 1.8 + 否则swagger2无法运行</p><p><strong>导包</strong></p><ul><li>Springfox-swagger2</li><li>swagger-springmvc</li></ul><p><strong>步骤：</strong></p><p>1、新建一个SpringBoot-web项目<br>2、添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、编写HelloController，测试确保运行成功！<br>4、要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">// 开启Swagger2的自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；<br><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201205161226115-2023700992.png"></p><h2 id="swagger配置"><a href="#swagger配置" class="headerlink" title="swagger配置"></a>swagger配置</h2><h3 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3><p>1、Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//配置docket以配置Swagger具体参数</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、可以通过apiInfo()属性配置文档信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置文档信息</span></span><br><span class="line"><span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;联系人名字&quot;</span>, <span class="string">&quot;http://xxx.xxx.com/联系人访问链接&quot;</span>, <span class="string">&quot;联系人邮箱&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">           <span class="string">&quot;Swagger学习&quot;</span>, <span class="comment">// 标题</span></span><br><span class="line">           <span class="string">&quot;学习演示如何配置Swagger&quot;</span>, <span class="comment">// 描述</span></span><br><span class="line">           <span class="string">&quot;v1.0&quot;</span>, <span class="comment">// 版本</span></span><br><span class="line">           <span class="string">&quot;http://terms.service.url/组织链接&quot;</span>, <span class="comment">// 组织链接</span></span><br><span class="line">           contact, <span class="comment">// 联系人信息</span></span><br><span class="line">           <span class="string">&quot;Apach 2.0 许可&quot;</span>, <span class="comment">// 许可</span></span><br><span class="line">           <span class="string">&quot;许可链接&quot;</span>, <span class="comment">// 许可连接</span></span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()<span class="comment">// 扩展</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、Docket 实例关联上 apiInfo()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  看下效果；<br><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201205162636690-840827862.png"></p><h3 id="配置扫描接口"><a href="#配置扫描接口" class="headerlink" title="配置扫描接口"></a>配置扫描接口</h3><ul><li>1、构建Docket时通过select()方法配置怎么扫描接口。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kuang.swagger.controller&quot;</span>))<span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，这里注释一下所有的配置方式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扫描所有，项目中的所有接口都会被扫描到</span></span><br><span class="line">any() </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 不扫描接口   </span></span><br><span class="line">none() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求</span></span><br><span class="line">withMethodAnnotation(<span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口</span></span><br><span class="line">withClassAnnotation(<span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotation) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据包路径扫描接口</span></span><br><span class="line">basePackage(<span class="keyword">final</span> String basePackage) </span><br></pre></td></tr></table></figure></li><li>2、除此之外，我们还可以配置接口扫描过滤：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kuang.swagger.controller&quot;</span>)) <span class="comment">// 通过.select()方法去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">&quot;/ai/**&quot;</span>)) <span class="comment">// 接口扫描过滤：配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span></span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>5、接口扫描过滤可选值还有<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// any() // 任何请求都扫描</span><br><span class="line">// none() // 任何请求都不扫描</span><br><span class="line">// basePackage(String string) //扫描包</span><br><span class="line">// regex(final String pathRegex) // 通过正则表达式控制</span><br><span class="line">// ant(final String antPattern) // 通过ant()控制</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置Swagger开关"><a href="#配置Swagger开关" class="headerlink" title="配置Swagger开关"></a>配置Swagger开关</h3><p>1、通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(<span class="literal">false</span>) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">      .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kuang.swagger.controller&quot;</span>) <span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">&quot;/kuang/**&quot;</span>))  <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span></span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、如何动态配置当项目处于test、dev环境时显示swagger，处于prod时不显示？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">   <span class="comment">// 设置要显示swagger的环境</span></span><br><span class="line">   <span class="type">Profiles</span> <span class="variable">of</span> <span class="operator">=</span> Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">   <span class="comment">// 判断当前是否处于该环境</span></span><br><span class="line">   <span class="comment">// 通过environment.acceptsProfiles判断是否处在自己设定的环境当中,是则返回true</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> environment.acceptsProfiles(of);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .enable(b) <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问</span></span><br><span class="line">      .select().apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kuang.swagger.controller&quot;</span>))<span class="comment">// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span></span><br><span class="line">      .paths(PathSelectors.ant(<span class="string">&quot;/ai/**&quot;</span>)) <span class="comment">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span></span><br><span class="line">      .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、可以在项目中增加一个dev的配置文件查看效果！</p><h3 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h3><p>1、如果没有配置分组，默认是default。通过groupName()方法即可配置分组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .groupName(<span class="string">&quot;hello&quot;</span>) <span class="comment">// 配置分组</span></span><br><span class="line">       <span class="comment">// 省略配置....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、重启项目查看分组<br>3、如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket3</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、重启项目查看即可</p><h3 id="配置实体"><a href="#配置实体" class="headerlink" title="配置实体"></a>配置实体</h3><p>1、新建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String username;</span><br><span class="line">   <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、只要这个实体在请求接口的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、重启查看测试</p><blockquote><p>注：并不是因为@ApiModel这个注解让实体显示swagger，而是只要出现在接口方法的返回值上的实体都会显示在这里，@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。<br>@ApiModel 为类添加注释<br>@ApiModelProperty 为类属性添加注释</p></blockquote><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>Swagger的所有注解定义在io.swagger.annotations包下<br>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Swagger注解简单说明</span><br><span class="line"><span class="meta">@Api(tags = &quot;xxx模块说明&quot;)</span>作用在模块类上</span><br><span class="line"><span class="meta">@ApiOperation(&quot;xxx接口说明&quot;)</span>作用在接口方法上</span><br><span class="line"><span class="meta">@ApiModel(&quot;xxxPOJO说明&quot;)</span>作用在模型类上：如VO、BO</span><br><span class="line"><span class="meta">@ApiModelProperty(value = &quot;xxx属性说明&quot;,hidden = true)</span>作用在类方法和属性上，hidden设置为<span class="literal">true</span>可以隐藏该属性</span><br><span class="line"><span class="meta">@ApiParam(&quot;xxx参数说明&quot;)</span>作用在参数、方法和字段上，类似<span class="meta">@ApiModelProperty</span></span><br></pre></td></tr></table></figure><p>例如：可以给请求的接口配置一些注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;这是一个helloController类,提供各种hello接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@ApiOperation(&quot;小艾的接口&quot;)</span></span><br><span class="line">      <span class="meta">@PostMapping(&quot;/ai&quot;)</span></span><br><span class="line">      <span class="meta">@ResponseBody</span></span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">kuang</span><span class="params">(<span class="meta">@ApiParam(&quot;向该名字说hello&quot;)</span>String username)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;hello：&quot;</span>+username;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过注解可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p></li><li><p>Swagger是个优秀的工具，国内已经有很多的中小型互联网公司使用，</p></li><li><p>相较于传统的要先出Word接口文档再测试的方式，显然这样也更符合现在的快速迭代开发行情。</p></li><li><p>正式环境一般关闭Swagger，一来出于安全考虑二来也可以节省运行时内存。</p></li></ul><p><img src="https://img2020.cnblogs.com/blog/1594818/202012/1594818-20201205181340530-906738985.png"></p><h2 id="拓展：其他皮肤"><a href="#拓展：其他皮肤" class="headerlink" title="拓展：其他皮肤"></a>拓展：其他皮肤</h2><p>我们可以导入不同的包实现不同的皮肤定义：<br>1、默认的   访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、bootstrap-ui  访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、Layui-ui   访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /docs.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.caspar-chen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-ui-layer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、mg-ui   访问 <a href="http://localhost:8080/document.html">http://localhost:8080/document.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zyplayer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-mg-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring初识</title>
      <link href="/aiyblog/2020/01/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/aiyblog/2020/01/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><p>常用的也是简单的排序算法</p><p><strong>步骤：</strong></p><ul><li>往后对比、找最值、换最值<ul><li>第一层i循环次数就是要排序数组的个数</li><li>第二层j循环可以每次都从第一个数开始往后对比，如果大\小于就交换，保证对比值一直都是最值</li></ul></li></ul><blockquote><p>第二层循环条件中可以减去i，因为i每次循环后都会得一个最值往后面冒泡，即i下标后面的数已经是排序好的了不用再次对比了</p></blockquote><p><strong>是否递归：</strong>否</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">9</span>,-<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//标识变量，表示一轮对比中是否发生交换</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="comment">//j为什么要减i，因为第i次循环时，已经有i个最大的数在后面从小到大排好了。</span></span><br><span class="line">            <span class="comment">// 为什么要减1：因为需要留出一个，让当前数和后面的对比。不减1，当当前元素即j到达最后一个，由于后面没有元素则会溢出</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])&#123; <span class="comment">//即通过前后两个数对比，大于就交换，让当前一直保持最大直到比到最后，</span></span><br><span class="line">                    temp =arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、插入排序"><a href="#二、插入排序" class="headerlink" title="二、插入排序"></a>二、插入排序</h2><p><strong>步骤：</strong></p><ul><li>往前对比，找合适插入位置、记录当前值、移位、当前值插入合适位置<ul><li>第一层i循环次数也是要排序数组的个数</li></ul></li></ul><p><strong>是否递归：</strong>否</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">9</span>,-<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">        insertSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> preIndex;</span><br><span class="line">        <span class="type">int</span> current;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            preIndex = i; <span class="comment">//当前元素下标</span></span><br><span class="line">            current = arr[i];<span class="comment">//当前元素值</span></span><br><span class="line">            <span class="keyword">while</span> (preIndex&gt;<span class="number">0</span>  &amp;&amp; arr[preIndex-<span class="number">1</span>] &gt; current)&#123;</span><br><span class="line">                arr[preIndex] = arr[preIndex-<span class="number">1</span>];<span class="comment">//把数往前移动一位</span></span><br><span class="line">                preIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//移动完后把当前值插入到对应位置</span></span><br><span class="line">            arr[preIndex] = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、选择排序"><a href="#三、选择排序" class="headerlink" title="三、选择排序"></a>三、选择排序</h2><p><strong>步骤：</strong></p><ul><li>往后对比，标志最小值和最小值的下标，一轮循环后，交换最小值到前面<ul><li>第一层i循环次数也是要排序数组的个数</li></ul></li></ul><p><strong>是否递归：</strong>否</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">9</span>,-<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">        selectSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> minIndex; <span class="comment">//假定最小数下标</span></span><br><span class="line">        <span class="type">int</span> min;      <span class="comment">//存储最小值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            minIndex = i; <span class="comment">//假定最小值下标等于循环时第一个元素的下标</span></span><br><span class="line">            min = arr[i]; <span class="comment">//假定最小值为循环中的第一个元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; min)&#123; <span class="comment">//arr[i] 相当于是最小值</span></span><br><span class="line">                    min = arr[j];</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把最小值交换到前面。</span></span><br><span class="line">            <span class="keyword">if</span> (minIndex != i)&#123;</span><br><span class="line">                arr[minIndex] = arr[i];</span><br><span class="line">                arr[i] = min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、归并排序"><a href="#四、归并排序" class="headerlink" title="四、归并排序"></a>四、归并排序</h2><ul><li>一直分成两组，不断向下递归，直到单组元素等于1个，然后左右两组对比排序后向上递归进行合并。</li></ul><p><strong>是否递归：</strong>是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergetSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        mergetSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>,temp);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分+合的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergetSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left&lt;right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//向左递归分解</span></span><br><span class="line">            mergetSort(arr,left,mid,temp);</span><br><span class="line">            <span class="comment">//向右递归分解</span></span><br><span class="line">            mergetSort(arr,mid+<span class="number">1</span>,right,temp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分解一次就合并一次</span></span><br><span class="line">            merget(arr,left,mid,right,temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//合并两个有序数组的方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr  数组原始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 左边有序数组的初始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid  中间索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边数组索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp 中转数组--即合并两个数组的有序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merget</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right ,<span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left; <span class="comment">//初始化i，左边初始索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> mid+<span class="number">1</span>; <span class="comment">//右边初始索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先把左右两边(有序)数组按照规则填充到temp</span></span><br><span class="line">        <span class="comment">//左右两边有序数组，有一边处理完成，则把另一边的直接拷贝就行了</span></span><br><span class="line">        <span class="keyword">while</span> (l  &lt;= mid &amp;&amp; r&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[l] &lt;= arr[r]) &#123; <span class="comment">//左数组元素比右数组元素小</span></span><br><span class="line">                temp[t] = arr[l];  <span class="comment">//左边元素加入数组</span></span><br><span class="line">                t+=<span class="number">1</span>; <span class="comment">//有序数组下标加1</span></span><br><span class="line">                l+=<span class="number">1</span>; <span class="comment">//左边数组下标加1</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">//反之，右边数组元素比左数组元素小</span></span><br><span class="line">                temp[t] = arr[r];  <span class="comment">//左边元素加入数组</span></span><br><span class="line">                t+=<span class="number">1</span>; <span class="comment">//有序数组下标加1</span></span><br><span class="line">                r+=<span class="number">1</span>; <span class="comment">//左边数组下标加1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右边数组遍历完，但是左边没有遍历完</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= mid)&#123;</span><br><span class="line">            temp[t] = arr[l];  <span class="comment">//左边元素加入数组</span></span><br><span class="line">            t+=<span class="number">1</span>; <span class="comment">//有序数组下标加1</span></span><br><span class="line">            l+=<span class="number">1</span>; <span class="comment">//左边数组下标加1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左边数组遍历完，但是右边没有遍历完</span></span><br><span class="line">        <span class="keyword">while</span> (r &lt;= right)&#123;</span><br><span class="line">            temp[t] = arr[r];  <span class="comment">//左边元素加入数组</span></span><br><span class="line">            t+=<span class="number">1</span>; <span class="comment">//有序数组下标加1</span></span><br><span class="line">            r+=<span class="number">1</span>; <span class="comment">//左边数组下标加1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把temp数组元素拷贝到arr</span></span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tempLeft</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="keyword">while</span> (tempLeft &lt;= right)&#123; <span class="comment">//把排序好的数组拷贝回原数组</span></span><br><span class="line">            arr[tempLeft] = temp[t];</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">            tempLeft += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、快速排序"><a href="#五、快速排序" class="headerlink" title="五、快速排序"></a>五、快速排序</h2><ul><li>选择一个中轴值，小在左，大在右，一直分治</li></ul><p><strong>是否递归：</strong>是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">101</span>,<span class="number">34</span>,<span class="number">119</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">90</span>,<span class="number">123</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;<span class="comment">//记录最右边</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right;<span class="comment">//记录最左边</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1-基于基准值交换----快速排序就是找一个基准值，把小的放基准值前面，大的放基准值后面</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[l];<span class="comment">//获取基准值=第一个元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//临时变量，交换使用</span></span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">            <span class="comment">//由于是在同一个数组操作，所以需要左右两边一起操作</span></span><br><span class="line">            <span class="comment">//由于要把基准值交换，所以右边最后一定是小于基准值的，所以需要优先判断，即从右边走</span></span><br><span class="line">            <span class="keyword">while</span> (arr[r] &gt;= pivot &amp;&amp; l&lt;r)&#123;</span><br><span class="line">                <span class="comment">//右边如果小于基准值，下标减1</span></span><br><span class="line">                r--;<span class="comment">//保证下标r的值小于基准值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (arr[l] &lt;= pivot &amp;&amp; l&lt;r)&#123;</span><br><span class="line">                <span class="comment">//左边如果小于基准值，下标加1</span></span><br><span class="line">                l++; <span class="comment">//保证下标l的值大于基准值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//因为找到了左边大于基准值，右边小于基准值的两个值，所有左右两边值进行交换</span></span><br><span class="line">            <span class="keyword">if</span> (l&lt;r)&#123;</span><br><span class="line">                temp = arr[l];</span><br><span class="line">                arr[l] = arr[r];</span><br><span class="line">                arr[r] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2-基准值归位-----循环结束后l肯定等于r，并且由于是从右边开始走的所以最后下标r的值一定小于基准值，直接交换即可</span></span><br><span class="line">        arr[left] = arr[r];</span><br><span class="line">        arr[r] = pivot;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3-递归----最后左右递归一直分治，基准值已经在合适的位置了就不用参与排序了</span></span><br><span class="line">        <span class="comment">//左递归</span></span><br><span class="line">        quickSort(arr,left,r-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//右递归</span></span><br><span class="line">        quickSort(arr,r+<span class="number">1</span>,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、基数排序"><a href="#六、基数排序" class="headerlink" title="六、基数排序"></a>六、基数排序</h2><p><strong>是否递归：</strong>否</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基数排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">53</span>,<span class="number">3</span>,<span class="number">542</span>,<span class="number">748</span>,<span class="number">14</span>,<span class="number">214</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">        radixSort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基数排序方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1-得到最大位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2-得到最大数是几位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> (max+<span class="string">&quot;&quot;</span>).length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个二维数组，表示10个桶.每一行即一维数组表示一个桶</span></span><br><span class="line">        <span class="comment">// 为了防止放入数的时候，数据溢出，则每个一维数组（），大小定位arr.length</span></span><br><span class="line">        <span class="comment">// 明确：基数排序是使用空间换时间。</span></span><br><span class="line">        <span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">        <span class="comment">//为了记录每个桶中实际存放多少个数据，定义一个一维数组来记录各个桶放入数据的个数</span></span><br><span class="line">        <span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]; <span class="comment">//对应存放十个桶中，最后一个元素的下标，即桶存储了几个数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3-循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,n=<span class="number">1</span>; i &lt; maxLength; i++,n*=<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">//针对每个元素对应位进行排序处理 ，第一是个位，第二是百位，第三是千位 .......</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">//取出每个元素个位数，相当于要存放桶的下标</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">digitaOfElement</span> <span class="operator">=</span> arr[j]/n % <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//放入对应的桶中</span></span><br><span class="line">                <span class="comment">//bucketElementCounts[digitaOfElement] 即存放在一行（桶）中的哪个位置</span></span><br><span class="line">                bucket[digitaOfElement][bucketElementCounts[digitaOfElement]] = arr[j];</span><br><span class="line">                <span class="comment">//对应桶元素下标后移一位，也相当于对应桶记录元素个数数组加1</span></span><br><span class="line">                bucketElementCounts[digitaOfElement]++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//按照桶的顺序依次取出数据放入原来的数组</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class="line">                <span class="comment">//如果桶中有数据，才放入原数组中</span></span><br><span class="line">                <span class="keyword">if</span> (bucketElementCounts[k] != <span class="number">0</span>)&#123; <span class="comment">//桶对应记录!=0,即记录的下标不为0，即该桶不为空</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class="line">                        <span class="comment">//取出元素放入到原数组</span></span><br><span class="line">                        arr[index++] = bucket[k][l];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//一轮处理后，需要将每个bucketElementCounts[k] = 0，即指向每个桶对应记录数组的下标都置会0，即初始</span></span><br><span class="line">                bucketElementCounts[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、桶排序"><a href="#七、桶排序" class="headerlink" title="七、桶排序"></a>七、桶排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="八、希尔排序"><a href="#八、希尔排序" class="headerlink" title="八、希尔排序"></a>八、希尔排序</h2><p><strong>是否递归：</strong>否</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">        shellSort2(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希尔排序----交换法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123; <span class="comment">// 分组，每组一半</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length ; i++) &#123; <span class="comment">//从gap开始往前对应一个元素对比  这里是gap开始</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-gap; j &gt;= <span class="number">0</span>; j-=gap) &#123; <span class="comment">//这里是gap对应的元素</span></span><br><span class="line">                    <span class="comment">//如果当前元素大于加上步长后的那个元素，就要交换</span></span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &gt; arr[j+gap])&#123;</span><br><span class="line">                        temp = arr[j];</span><br><span class="line">                        arr[j] = arr[j+gap];</span><br><span class="line">                        arr[j+gap] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//希尔排序----移位法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort2</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123; <span class="comment">// 分组，每组一半</span></span><br><span class="line">            <span class="comment">// 从gap个元素，逐个对其所在的组进行直接插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length ; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">                temp = arr[j]; <span class="comment">//存放当前值</span></span><br><span class="line"><span class="comment">//                if (arr[i] &lt; arr[j-gap])&#123;</span></span><br><span class="line">                    <span class="keyword">while</span> (j-gap &gt;= <span class="number">0</span> &amp;&amp; arr[j-gap] &gt; temp)&#123;</span><br><span class="line">                        <span class="comment">//移动</span></span><br><span class="line">                        arr[j] = arr[j-gap];</span><br><span class="line">                        j-=gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//当退出循环，说明找到插入位置</span></span><br><span class="line">                    arr[j] = temp;</span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-static关键字</title>
      <link href="/aiyblog/2020/01/26/java/java-static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/aiyblog/2020/01/26/java/java-static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiaoai.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_static</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String name; <span class="comment">//非静态变量，每个对象拥有各自的变量，变量不被共享，在内存中会创建多个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> age;  <span class="comment">//静态变量，在内存中只会创建一次，所有对象共享，随着类的加载而存在，随着类文件的消失而消失</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sttc_1</span><span class="params">()</span>&#123; <span class="comment">//静态方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;静态&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">static_syso</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;静态方法中---输出&quot;</span>);</span><br><span class="line"><span class="comment">//可以引用静态变量</span></span><br><span class="line">age = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//--无法引用this</span></span><br><span class="line"><span class="comment">//this.name = &quot;xiaoai&quot;;</span></span><br><span class="line"><span class="comment">//--无法引用非静态变量</span></span><br><span class="line"><span class="comment">//name = &quot;nihao&quot;;</span></span><br><span class="line"><span class="comment">//--无法引用非静态方法</span></span><br><span class="line"><span class="comment">//sys1();</span></span><br><span class="line"><span class="comment">//--可以引用静态方法</span></span><br><span class="line">sttc_1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sys1</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;非静态方法中---输出&quot;</span>);</span><br><span class="line"><span class="comment">//可以引用this和非静态变量</span></span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;xiaoai&quot;</span>;</span><br><span class="line"><span class="comment">//可以引用静态变量</span></span><br><span class="line">age = <span class="number">12</span>;</span><br><span class="line"><span class="comment">//可以引用静态方法</span></span><br><span class="line">sttc_1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Test_static [name=&quot;</span> + name + <span class="string">&quot;,age=&quot;</span> +age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test_static</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test_static</span>();</span><br><span class="line"></span><br><span class="line">t1.sys1();<span class="comment">//可引用，对象可以调用非静态方法</span></span><br><span class="line">t1.static_syso();<span class="comment">//可引用，对象可以调用静态方法，但是不推荐</span></span><br><span class="line">System.out.println(t1);</span><br><span class="line"><span class="comment">//Test_static.sys1(); //不可引用，类名不可直接调用非静态方法</span></span><br><span class="line">Test_static.static_syso(); <span class="comment">//可引用，类名可直接调用静态方法</span></span><br><span class="line"></span><br><span class="line">System.out.println(t1.name); <span class="comment">//可引用，非静态变量可以被对象.引用</span></span><br><span class="line"><span class="comment">//System.out.println(Test_static.name); //不可引用，非静态变量无法直接类名.引用</span></span><br><span class="line"></span><br><span class="line">System.out.println(t1.age); <span class="comment">// 可引用,静态变量可以被对象.引用</span></span><br><span class="line">System.out.println(Test_static.age); <span class="comment">//可引用，静态变量可以直接类名.引用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果截图<br><img src="https://img2020.cnblogs.com/blog/1594818/202009/1594818-20200924172657053-139323223.png"></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>静态函数可直接访问静态成员变量，不能直接访问非静态成员变量。<blockquote><p>静态函数可使用类名直接调用，这时候可能还没有存在对象，而非静态成员数据是随对象的存在而存在。</p></blockquote></li><li>为什么非静态函数可直接访问静态与非静态成员变量。静态函数不能访问非静态的成员数据？<blockquote><p>非静态函数只能由对象调用，对象存在时，说明非静态与静态的数据都已加载好了，所以非静态函数可随便调用。<br>静态函数不能访问非静态成员，是因为静态成员数据随对象存在而存在，静态函数可直接由类名调用，此时可能没有对象创建，也就没有非静态成员数据，所以静态函数无法访问非静态成员。<br>*静态函数只要存在有对象，那么也可以访问非静态的数据，只是不能直接访问而已。</p></blockquote></li><li>为什么静态函数不能使用this或super关键字。<blockquote><p>因为静态的函数可用类名调用，类名调用时可能不存在对象，而this关键字代表了一个函数的调用者对象，这时就产生了冲突。</p></blockquote></li></ul><p><strong>个人结论：</strong></p><ul><li>静态无法调用非静态，非静态可随意调用静态</li><li>静态相当于没有实例对象，即无法调用非静态</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据库</title>
      <link href="/aiyblog/2020/01/26/java/java%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/aiyblog/2020/01/26/java/java%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="java数据库"><a href="#java数据库" class="headerlink" title="java数据库"></a>java数据库</h2><h3 id="一、事务："><a href="#一、事务：" class="headerlink" title="一、事务："></a>一、事务：</h3><ul><li>事务四大特征：</li></ul><table><thead><tr><th align="left">特征</th><th align="left"></th></tr></thead><tbody><tr><td align="left">原子性</td><td align="left">是不可分割的最小操作单位，要么同时成功，要么同时失败。</td></tr><tr><td align="left">持久性</td><td align="left">当事务提交或回滚后，数据库会持久化的保存数据。</td></tr><tr><td align="left">隔离性</td><td align="left">当事务提交或回滚后，数据库会持久化的保存数据。</td></tr><tr><td align="left">一致性</td><td align="left">事务操作前后，数据总量不变</td></tr></tbody></table><ul><li>事务隔离级别</li></ul><p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p><table><thead><tr><th align="left">存在问题：</th><th align="left"></th></tr></thead><tbody><tr><td align="left">脏读</td><td align="left">一个事务，读取到另一个事务中没有提交的数据</td></tr><tr><td align="left">不可重复读(虚读)</td><td align="left">在同一个事务中，两次读取到的数据不一样。</td></tr><tr><td align="left">幻读</td><td align="left">一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</td></tr></tbody></table><table><thead><tr><th align="left">隔离级别：</th><th align="left"></th></tr></thead><tbody><tr><td align="left">【read uncommitted】读未提交</td><td align="left">产生的问题：脏读、不可重复读、幻读</td></tr><tr><td align="left">【read committed】读已提交 （Oracle）</td><td align="left">产生的问题：不可重复读、幻读</td></tr><tr><td align="left">【repeatable read】可重复读 （MySQL默认）</td><td align="left">产生的问题：幻读</td></tr><tr><td align="left">【serializable】串行化</td><td align="left">可以解决所有的问题</td></tr></tbody></table><pre><code>    ### 二、数据库连接池</code></pre><p><strong>【C3P0】</strong>  数据库连接池技术</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 导入jar包 (两个)</span><br><span class="line">c3p0-<span class="number">0.9</span><span class="number">.5</span><span class="number">.2</span>.jar </span><br><span class="line">mchange-commons-java-<span class="number">0.2</span><span class="number">.12</span>.jar</span><br><span class="line">不要忘记导入数据库驱动jar包</span><br><span class="line"></span><br><span class="line"># 定义配置文件</span><br><span class="line">c3p0-config.xml</span><br><span class="line"></span><br><span class="line">#创建核心对象</span><br><span class="line">数据库连接池对象 ComboPooledDataSource</span><br><span class="line"><span class="comment">//默认使用默认配置，</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line"><span class="comment">//使用自定义配置,otherc3p0为在配置文件定义的名称</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;otherc3p0&quot;</span>);</span><br><span class="line"></span><br><span class="line"># 获取连接： </span><br><span class="line">getConnection</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br></pre></td></tr></table></figure><p><strong>【Druid】</strong>    数据库连接池实现技术，由阿里巴巴提供的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#　导入jar包 </span><br><span class="line">druid-<span class="number">1.0</span><span class="number">.9</span>.jar</span><br><span class="line"></span><br><span class="line"># 定义配置文件：</span><br><span class="line">properties形式的,可以叫任意名称，可以放在任意目录下</span><br><span class="line"></span><br><span class="line"># 加载配置文件。 Properties</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>(); <span class="comment">//c创建配置流对象</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DruidDemo.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">pro.load(is);</span><br><span class="line"></span><br><span class="line"># 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line"># 获取连接：getConnection</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br></pre></td></tr></table></figure><p><strong>【JdbcTemplate对象】</strong>    Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 导入jar包</span><br><span class="line">spring-beans-<span class="number">5.0</span><span class="number">.0</span>.RELEASE.jar</span><br><span class="line">spring-core-<span class="number">5.0</span><span class="number">.0</span>.RELEASE.jar</span><br><span class="line">spring-jdbc-<span class="number">5.0</span><span class="number">.0</span>.RELEASE.jar</span><br><span class="line">spring-tx-<span class="number">5.0</span><span class="number">.0</span>.RELEASE.jar</span><br><span class="line"></span><br><span class="line"># 获取模板对象</span><br><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(DataSource对象);</span><br><span class="line">参数：</span><br><span class="line">sql封装对象的RowMapper</span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;类型&gt;(类型.class)) </span><br><span class="line">占位符数据</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">update()</td><td align="left">执行DML语句。增、删、改语句</td></tr><tr><td align="left">query()</td><td align="left">查询结果，将结果封装为JavaBean对象</td></tr><tr><td align="left">queryForMap()</td><td align="left">查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合 这个方法查询的结果集长度只能是1</td></tr><tr><td align="left">queryForList()</td><td align="left">查询结果将结果集封装为list集合    将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</td></tr><tr><td align="left">queryForObject()</td><td align="left">查询结果，将结果封装为对象</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaIO流</title>
      <link href="/aiyblog/2020/01/26/java/JavaIO%E6%B5%81/"/>
      <url>/aiyblog/2020/01/26/java/JavaIO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="javaIO流"><a href="#javaIO流" class="headerlink" title="javaIO流"></a>javaIO流</h2><p><em><strong>流的关闭原则：先开后关，后开先关。</strong></em></p><h3 id="一、字节流-一切皆为字节"><a href="#一、字节流-一切皆为字节" class="headerlink" title="一、字节流  一切皆为字节"></a>一、字节流  一切皆为字节</h3><p><strong>【字节输出流OutputStream】</strong></p><p>字节输出流的所有类的超类，将指定的字节信息写出到目的地</p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">public void close()</td><td align="left">关闭此输出流并释放与此流相关联的任何系统资源。</td></tr><tr><td align="left">public void flush()</td><td align="left">刷新此输出流并强制任何缓冲的输出字节被写出。</td></tr><tr><td align="left">public void write(byte[] b)</td><td align="left">将 b.length字节从指定的字节数组写入此输出流。</td></tr><tr><td align="left">public void write(byte[] b, int off, int len)</td><td align="left">从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</td></tr><tr><td align="left">public abstract void write(int b)</td><td align="left">将指定的字节输出流。</td></tr></tbody></table><ul><li>FileOutputStream类</li></ul><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">public FileOutputStream(File file)</td><td align="left">创建文件输出流以写入由指定的 File对象表示的文件。</td></tr><tr><td align="left">public FileOutputStream(String name)</td><td align="left">创建文件输出流以指定的名称写入文件。</td></tr><tr><td align="left">public FileOutputStream(File file, boolean append)</td><td align="left">创建文件输出流以写入由指定的 File对象表示的文件。</td></tr><tr><td align="left">public FileOutputStream(String name, boolean append)</td><td align="left">创建文件输出流以指定的名称写入文件。</td></tr></tbody></table><p><strong>【字节输入流InputStream】</strong></p><p>读取字符流的所有类的超类，读取字节信息到内存中。</p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">public void close()</td><td align="left">关闭此输入流并释放与此流相关联的任何系统资源。</td></tr><tr><td align="left">public abstract int read()</td><td align="left">从输入流读取数据的下一个字节。</td></tr><tr><td align="left">public int read(byte[] b)</td><td align="left">从输入流中读取一些字节数，并将它们存储到字节数组 b中。</td></tr></tbody></table><ul><li>leInputStream类</li></ul><table><thead><tr><th align="left">方法</th><th></th></tr></thead><tbody><tr><td align="left">FileInputStream(File file)</td><td>通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</td></tr><tr><td align="left">FileInputStream(String name)</td><td>通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</td></tr></tbody></table><h3 id="二、字符流"><a href="#二、字符流" class="headerlink" title="二、字符流"></a>二、字符流</h3><p><strong>【字符输入流Reader】</strong></p><p>读取字符流的所有类的超类，可以读取字符信息到内存中</p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">public void close()</td><td align="left">关闭此流并释放与此流相关联的任何系统资源。</td></tr><tr><td align="left">public int read()</td><td align="left">从输入流读取一个字符。</td></tr><tr><td align="left">public int read(char[] cbuf)</td><td align="left">从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</td></tr></tbody></table><ul><li>FileReader类</li></ul><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">FileReader(File file)</td><td align="left">创建一个新的 FileReader ，给定要读取的File对象。</td></tr><tr><td align="left">FileReader(String fileName)</td><td align="left">创建一个新的 FileReader ，给定要读取的文件的名称。</td></tr><tr><td align="left">read()</td><td align="left">方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取</td></tr><tr><td align="left">read(char[] cbuf)</td><td align="left">每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code></td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>【字符输出流Writer】</strong></p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">void write(int c)</td><td align="left">写入单个字符。</td></tr><tr><td align="left">void write(char[] cbuf)</td><td align="left">写入字符数组。</td></tr><tr><td align="left">abstract  void write(char[] cbuf, int off, int len)</td><td align="left">写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</td></tr><tr><td align="left">void write(String str)</td><td align="left">写入字符串。</td></tr><tr><td align="left">void write(String str, int off, int len)</td><td align="left">写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</td></tr><tr><td align="left">void flush()</td><td align="left">刷新该流的缓冲。</td></tr><tr><td align="left">void close()</td><td align="left">关闭此流，但要先刷新它。</td></tr></tbody></table><ul><li>FileWriter类</li></ul><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">FileWriter(File file)</td><td align="left">创建一个新的 FileWriter，给定要读取的File对象。</td></tr><tr><td align="left">FileWriter(String fileName)</td><td align="left">创建一个新的 FileWriter，给定要读取的文件的名称。</td></tr><tr><td align="left">write(int b)</td><td align="left">每次可以写出一个字符数据</td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">注意：关闭资源时,与FileOutputStream不同。 如果不关闭,数据只是保存到缓冲区，并未保存到文件。因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要`flush` 方法了。</span><br><span class="line"></span><br><span class="line">flush    刷新缓冲区，流对象可以继续使用。</span><br><span class="line">close    先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</span><br><span class="line"></span><br><span class="line">还可以使用JDK7优化后的`try-with-resource` 语句，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。</span><br><span class="line">try (创建流对象语句，如果多个,使用&#x27;;&#x27;隔开) &#123;</span><br><span class="line">// 读写数据</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、属性集"><a href="#三、属性集" class="headerlink" title="三、属性集"></a>三、属性集</h3><p><strong>【Properties类】</strong></p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">public new Properties()</td><td align="left">创建一个空的属性列表。</td></tr><tr><td align="left">public Object setProperty(String key, String value)</td><td align="left">创建一个空的属性列表。</td></tr><tr><td align="left">public String getProperty(String key)</td><td align="left">使用此属性列表中指定的键搜索属性值。</td></tr><tr><td align="left">public Set<String> stringPropertyNames()</td><td align="left">所有键的名称的集合。</td></tr><tr><td align="left">public void load(InputStream inStream)</td><td align="left">从字节输入流中读取键值对。</td></tr><tr><td align="left">public void store(字节/字符输入流, “注释说明”)</td><td align="left">把集合中的临时数据,持久化写入到硬盘中存储</td></tr></tbody></table><h3 id="四、-缓冲流"><a href="#四、-缓冲流" class="headerlink" title="四、 缓冲流"></a>四、 缓冲流</h3><p>基本原理：在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><p><strong>【字节缓冲流BufferedInputStream】</strong></p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">public BufferedInputStream(InputStream in)</td><td align="left">创建一个新的缓冲输入流。</td></tr><tr><td align="left">public BufferedOutputStream(OutputStream out)</td><td align="left">创建一个新的缓冲输出流。</td></tr></tbody></table><p><strong>【字符缓冲流BufferedReader】</strong></p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">public BufferedReader(Reader in)</td><td align="left">创建一个 新的缓冲输入流。</td></tr><tr><td align="left">public BufferedWriter(Writer out)</td><td align="left">创建一个新的缓冲输出流。</td></tr></tbody></table><h3 id="五、转换流"><a href="#五、转换流" class="headerlink" title="五、转换流"></a>五、转换流</h3><p><strong>【InputStreamReader类】</strong></p><p>Reader的子类，是从字节流到字符流的桥梁</p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">InputStreamReader(InputStream in)</td><td align="left">创建一个使用默认字符集的字符流。</td></tr><tr><td align="left">InputStreamReader(InputStream in, String charsetName)</td><td align="left">创建一个指定字符集的字符流。</td></tr></tbody></table><p><strong>【OutputStreamWriter类】</strong></p><p>Writer的子类，是从字符流到字节流的桥梁</p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">OutputStreamWriter(OutputStream in)</td><td align="left">创建一个使用默认字符集的字符流。</td></tr><tr><td align="left">OutputStreamWriter(OutputStream in, String charsetName)</td><td align="left">创建一个指定字符集的字符流。</td></tr></tbody></table><h3 id="六、对象流（序列化）"><a href="#六、对象流（序列化）" class="headerlink" title="六、对象流（序列化）"></a>六、对象流（序列化）</h3><p><strong>一个对象要想序列化，必须满足两个条件:</strong></p><ul><li><p>该类必须实现<code>java.io.Serializable </code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</p></li><li><p>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</p></li></ul><p><strong>说明</strong></p><ul><li><p>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常</p></li><li><p>当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常</p><pre><code>- 该类的序列版本号与从流中读取的类描述符的版本号不匹配 - 该类包含未知数据类型 - 该类没有可访问的无参数构造方法 </code></pre></li><li><p>Serializable接口给需要序列化的类，提供了一个序列版本号。</p><ul><li>serialVersionUID` 该版本号的目的在于验证序列化的对象和对应类是否版本匹</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vate <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><p><strong>【ObjectOutputStream类】</strong></p><p>序列化流，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">public ObjectOutputStream(OutputStream out)</td><td align="left">创建一个指定OutputStream的ObjectOutputStream。</td></tr><tr><td align="left">public final void writeObject (Object obj)</td><td align="left">将指定的对象写出。</td></tr></tbody></table><p><strong>【ObjectInputStream类】</strong></p><p>反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p><table><thead><tr><th align="left">方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">public ObjectInputStream(InputStream in)</td><td align="left">创建一个指定InputStream的ObjectInputStream。</td></tr><tr><td align="left">public final Object readObject ()</td><td align="left">读取一个对象。</td></tr></tbody></table><h3 id="七、打印流"><a href="#七、打印流" class="headerlink" title="七、打印流"></a>七、打印流</h3><p><strong>【PrintStream类】</strong></p><p>public PrintStream(String fileName)     使用指定的文件名创建一个新的打印流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建打印流指定打印位置</span></span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;ps.txt&quot;</span>)；</span><br><span class="line"><span class="comment">//设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">System.setOut(ps);</span><br></pre></td></tr></table></figure><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p><strong>ASCII字符集</strong></p><ul><li><p>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</p></li><li><p>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</p></li></ul><p><strong>ISO-8859-1字符集</strong></p><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul><p><strong>GBxxx字符集</strong></p><ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li></ul><table><thead><tr><th align="left">字符集</th><th align="left"></th></tr></thead><tbody><tr><td align="left">GB2312</td><td align="left">简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码， 这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</td></tr><tr><td align="left">GBK</td><td align="left">最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</td></tr><tr><td align="left">GB18030</td><td align="left">最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</td></tr></tbody></table><p><strong>Unicode字符集</strong></p><ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li></ul><table><thead><tr><th align="left">字符集</th><th align="left"></th></tr></thead><tbody><tr><td align="left">UTF-8</td><td align="left">可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码</td></tr></tbody></table><p>UTF-8编码规则：</p><pre><code>1. 128个US-ASCII字符，只需一个字节编码。2. 拉丁文等字符，需要二个字节编码。 3. 大部分常用字（含中文），使用三个字节编码。4. 其他极少使用的Unicode辅助字符，使用四字节编码。</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-BIO、NIO、AIO</title>
      <link href="/aiyblog/2020/01/26/java/java-BIO%E3%80%81NIO%E3%80%81AIO/"/>
      <url>/aiyblog/2020/01/26/java/java-BIO%E3%80%81NIO%E3%80%81AIO/</url>
      
        <content type="html"><![CDATA[<h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><p>BIO(blocking I/O) ： 同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善(实现多个客户连接服务器)</p><p><img src="D:\Users\xiaoaiying\Typora\img\image-20210912003659878.png" alt="image-20210912003659878"></p><p><strong>BIO  编程流程的梳理</strong></p><ol><li>服务器端启动一个 <strong>ServerSocket</strong>，注册端口，调用accpet方法监听客户端的Socket连接。</li><li>客户端启动 <strong>Socket</strong> 对服务器进行通信，默认情况下服务器端需要对每个客户 建立一个线程与之通讯</li></ol><p>基于BIO模式下的通信，客户端 - 服务端是完全同步，完全耦合的</p><h3 id="bio基本网络编程"><a href="#bio基本网络编程" class="headerlink" title="bio基本网络编程"></a>bio基本网络编程</h3><ul><li>单客户端：单收单发</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(os);</span><br><span class="line">        ps.println(<span class="string">&quot;hello world! 服务端，您好！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====服务端1启动=====&quot;</span>);</span><br><span class="line">        ServerSocket ss;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">                <span class="comment">// 监听客户端</span></span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">                String msg;</span><br><span class="line">                <span class="keyword">if</span> ((msg = bis.readLine()) != <span class="literal">null</span> )&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;服务器接收到：&quot;</span> + msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单客户端：多发和多收消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;客户端2：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(os);</span><br><span class="line">            ps.println(msg);</span><br><span class="line">            ps.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====服务端2启动=====&quot;</span>);</span><br><span class="line">        ServerSocket ss;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">                <span class="comment">// 监听客户端</span></span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">                String msg;</span><br><span class="line">                <span class="keyword">while</span> ((msg = bis.readLine()) != <span class="literal">null</span> )&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;服务器接收到：&quot;</span> + msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多客户端模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">serverThreadReader</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">serverThreadReader</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">            String msg;</span><br><span class="line">            <span class="keyword">while</span> ((msg = bis.readLine()) != <span class="literal">null</span> )&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;服务器接收到[&quot;</span>+socket.toString()+<span class="string">&quot;]：&quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====服务端3启动=====&quot;</span>);</span><br><span class="line">        ServerSocket ss;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">                <span class="comment">// 监听客户端</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">                    <span class="comment">// 创建独立线程处理客户端请求</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">serverThreadReader</span>(socket).start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;客户端3：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(os);</span><br><span class="line">            ps.println(msg);</span><br><span class="line">            ps.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪异步I-O编程"><a href="#伪异步I-O编程" class="headerlink" title="伪异步I/O编程"></a>伪异步I/O编程</h3><ul><li><p>客户端的并发访问增加时。服务端将呈现1:1的线程开销，访问量越大，系统将发生线程栈溢出，线程创建失败，最终导致进程宕机或者僵死，从而不能对外提供服务。</p></li><li><p>一个伪异步I/O的通信框架，采用线程池和任务队列实现，当客户端接入时，将客户端的Socket封装成一个Task(该任务实现java.lang.Runnable线程任务接口)交给后端的线程池中进行处理。</p></li><li><p>JDK的线程池维护一个消息队列和N个活跃的线程，对消息队列中Socket任务进行处理，由于线程池可以设置消息队列的大小和最大线程数，因此，它的资源占用是可控的，无论多少个客户端并发访问，都不会导致资源的耗尽和宕机。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程池执行任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerSockerServerPool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService executorService;</span><br><span class="line">    <span class="comment">// 创建类对象时初始化线程池对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HandlerSockerServerPool</span><span class="params">(<span class="type">int</span> maxThreadNum, <span class="type">int</span> queueSize)</span>&#123;</span><br><span class="line">        executorService = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">3</span>,maxThreadNum,<span class="number">120</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(queueSize));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable target)</span>&#123;</span><br><span class="line">        executorService.execute(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerRunnableTarget</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerRunnableTarget</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">            String msg;</span><br><span class="line">            <span class="keyword">while</span> ((msg = bis.readLine()) != <span class="literal">null</span> )&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;服务器接收到:&quot;</span>+<span class="string">&quot;[&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;][&quot;</span>+socket.toString()+<span class="string">&quot;]：&quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====服务端4启动-伪异步=====&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">            <span class="type">HandlerSockerServerPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HandlerSockerServerPool</span>(<span class="number">3</span>,<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">                <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerRunnableTarget</span>(socket);</span><br><span class="line">                pool.execute(target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;客户端4：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(os);</span><br><span class="line">            ps.println(msg);</span><br><span class="line">            ps.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerReaderThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerReaderThread</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到数据输入流读取客户端发送的数据</span></span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="comment">// 读取客户端发送的文件类型</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">            System.out.println(<span class="string">&quot;服务端接收到文件类型：&quot;</span> + suffix);</span><br><span class="line">            <span class="comment">// 定义一个字节输入管道</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileName);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = dis.read(buffer))&gt; <span class="number">0</span>)&#123;</span><br><span class="line">                os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            os.close();</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;服务端接收文件保存成功！file：[%s]&quot;</span>,fileName));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====服务端启动：file=====&quot;</span>);</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServerReaderThread</span>(socket).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(socket.getOutputStream());</span><br><span class="line">            dos.writeUTF(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mv.png&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                dos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            dos.flush();</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerReaderThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerReaderThread</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到数据输入流读取客户端发送的数据</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">            String msg;</span><br><span class="line">            <span class="keyword">while</span> ((msg = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;服务器收到[&quot;</span>+socket.toString()+<span class="string">&quot;]msg：&quot;</span>+msg);</span><br><span class="line">                sendMsgToAllClient(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;当前有人下线：[%s]&quot;</span>,</span><br><span class="line">                    socket.toString()));</span><br><span class="line">            Server.allSocketOnLine.remove(socket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendMsgToAllClient</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">for</span> (Socket sk : Server.allSocketOnLine) &#123;</span><br><span class="line">            <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(sk.getOutputStream());</span><br><span class="line">            ps.println(socket.toString() + <span class="string">&quot;:&quot;</span> + msg);</span><br><span class="line">            ps.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Socket&gt; allSocketOnLine = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====服务端启动：端口转发=====&quot;</span>);</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ss = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">                <span class="comment">// 登录客户端添加到列表中</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[&quot;</span>+socket.toString()+<span class="string">&quot;]上线...&quot;</span>);</span><br><span class="line">                allSocketOnLine.add(socket);</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServerReaderThread</span>(socket).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="comment">// ----接收消息客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">                String msg;</span><br><span class="line">                <span class="keyword">while</span> ((msg = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端收到msg：\n&quot;</span> + msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----发送消息客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMsgClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;客户端：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(os);</span><br><span class="line">            ps.println(msg);</span><br><span class="line">            ps.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><ul><li>Java NIO（New IO）也有人称之为 java non-blocking IO是从Java 1.4版本开始引入的一个新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面<strong>向缓冲区</strong>的、基于<strong>通道</strong>的IO操作。NIO将以更加高效的方式进行文件的读写操作。NIO可以理解为非阻塞IO,传统的IO的read和write只能阻塞执行，线程在读写IO期间不能干其他事情，比如调用socket.read()时，如果服务器一直没有数据传输过来，线程就一直阻塞，而NIO中可以配置socket为非阻塞模式。</li><li>NIO 相关类都被放在 java.nio 包及子包下，并且对原 java.io 包中的很多类进行改写。</li><li>NIO 有三大核心部分：<strong>Channel( 通道) ，Buffer( 缓冲区), Selector( 选择器)</strong></li><li>Java NIO 的非阻塞模式，使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</li><li>通俗理解：NIO 是可以做到用一个线程来处理多个操作的。假设有 1000 个请求过来,根据实际情况，可以分配20 或者 80个线程来处理。不像之前的阻塞 IO 那样，非得分配 1000 个。</li></ul><h3 id="bio与nio对比"><a href="#bio与nio对比" class="headerlink" title="bio与nio对比"></a>bio与nio对比</h3><table><thead><tr><th>NIO</th><th>BIO</th></tr></thead><tbody><tr><td>面向缓冲区（Buffer）</td><td>面向流（Stream）</td></tr><tr><td>非阻塞（Non Blocking IO）</td><td>阻塞IO(Blocking IO)</td></tr><tr><td>选择器（Selectors）</td><td></td></tr></tbody></table><h3 id="NIO三大核心："><a href="#NIO三大核心：" class="headerlink" title="NIO三大核心："></a>NIO三大核心：</h3><p>NIO 有三大核心部分：<strong>Channel( 通道) ，Buffer( 缓冲区), Selector( 选择器)</strong></p><p><img src="D:\Users\xiaoaiying\Typora\img\image-20210911225735122.png" alt="image-20210911225735122"></p><ul><li>每个 channel 都会对应一个 Buffer</li><li>一个线程对应Selector ，一个Selector对应多个 channel(连接)</li><li>程序切换到哪个 channel 是由事件决定的</li><li>Selector 会根据不同的事件，在各个通道上切换</li><li>Buffer 就是一个内存块 ， 底层是一个数组</li><li>数据的读取写入是通过 Buffer完成的 , BIO 中要么是输入流，或者是输出流, 不能双向，但是 NIO 的 Buffer 是可以读也可以写。</li><li>Java NIO系统的核心在于：通道(Channel)和缓冲区 (Buffer)。通道表示打开到 IO 设备(例如：文件、 套接字)的连接。若需要使用 NIO 系统，需要获取 用于连接 IO 设备的通道以及用于容纳数据的缓冲 区。然后操作缓冲区，对数据进行处理。简而言之，Channel 负责传输， Buffer 负责存取数据</li></ul><h4 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer( 缓冲区)"></a>Buffer( 缓冲区)</h4><p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。相比较直接对数组的操作，Buffer API更加容易操作和管理。</p><h5 id="Buffer-类及其子类"><a href="#Buffer-类及其子类" class="headerlink" title="Buffer 类及其子类"></a><strong>Buffer 类及其子类</strong></h5><ul><li><p>ByteBuffer、CharBuffer 、ShortBuffer 、IntBuffer 、LongBuffer 、FloatBuffer 、DoubleBuffer </p></li><li><p>获取对应buffer对象</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> xxBuffer.allocate(<span class="type">int</span> capacity) : 创建一个容量为capacity 的 xxBuffer对象</span><br></pre></td></tr></table></figure><h5 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h5><ul><li><strong>容量 (capacity)</strong> ：作为一个内存块，Buffer具有一定的固定大小，也称为”容量”，缓冲区容量不能为负，并且创建后不能更改。 </li><li>**限制 (limit)**：表示缓冲区中可以操作数据的大小（limit 后数据不能进行读写）。缓冲区的限制不能为负，并且不能大于其容量。 <ul><li>写入模式，限制等于buffer的容量。</li><li>读取模式下，limit等于写入的数据量。</li></ul></li><li>**位置 (position)**：下一个要读取或写入的数据的索引。缓冲区的位置不能为 负，并且不能大于其限制 </li><li>**标记 (mark)与重置 (reset)**：标记是一个索引，通过 Buffer 中的 mark() 方法 指定 Buffer 中一个特定的 position，之后可以通过调用 reset() 方法恢复到这 个 position.</li></ul><blockquote><p><strong>标记、位置、限制、容量遵守以下不变式： 0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</strong></p></blockquote><h5 id="常见api"><a href="#常见api" class="headerlink" title="常见api"></a>常见api</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Buffer <span class="title function_">clear</span><span class="params">()</span> 清空缓冲区并返回对缓冲区的引用</span><br><span class="line">Buffer <span class="title function_">flip</span><span class="params">()</span> 为 将缓冲区的界限设置为当前位置，并将当前位置充值为 <span class="number">0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">capacity</span><span class="params">()</span> 返回 Buffer 的 capacity 大小</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasRemaining</span><span class="params">()</span> 判断缓冲区中是否还有元素</span><br><span class="line"><span class="type">int</span> <span class="title function_">limit</span><span class="params">()</span> 返回 Buffer 的界限(limit) 的位置</span><br><span class="line">Buffer <span class="title function_">limit</span><span class="params">(<span class="type">int</span> n)</span> 将设置缓冲区界限为 n, 并返回一个具有新 limit 的缓冲区对象</span><br><span class="line">Buffer <span class="title function_">mark</span><span class="params">()</span> 对缓冲区设置标记</span><br><span class="line"><span class="type">int</span> <span class="title function_">position</span><span class="params">()</span> 返回缓冲区的当前位置 position</span><br><span class="line">Buffer <span class="title function_">position</span><span class="params">(<span class="type">int</span> n)</span> 将设置缓冲区的当前位置为 n , 并返回修改后的 Buffer 对象</span><br><span class="line"><span class="type">int</span> <span class="title function_">remaining</span><span class="params">()</span> 返回 position 和 limit 之间的元素个数</span><br><span class="line">Buffer <span class="title function_">reset</span><span class="params">()</span> 将位置 position 转到以前设置的 mark 所在的位置</span><br><span class="line">Buffer <span class="title function_">rewind</span><span class="params">()</span> 将位置设为为 <span class="number">0</span>， 取消设置的 mark</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//---------- 数据操作常见api</span></span><br><span class="line">Buffer 所有子类提供了两个用于数据操作的方法：get()put() 方法</span><br><span class="line">取获取 Buffer中的数据</span><br><span class="line">get() ：读取单个字节</span><br><span class="line">get(<span class="type">byte</span>[] dst)：批量读取多个字节到 dst 中</span><br><span class="line">get(<span class="type">int</span> index)：读取指定索引位置的字节(不会移动 position)</span><br><span class="line">    </span><br><span class="line">放到 入数据到 Buffer 中 中</span><br><span class="line">put(<span class="type">byte</span> b)：将给定单个字节写入缓冲区的当前位置</span><br><span class="line">put(<span class="type">byte</span>[] src)：将 src 中的字节写入缓冲区的当前位置</span><br><span class="line">put(<span class="type">int</span> index, <span class="type">byte</span> b)：将指定字节写入缓冲区的索引位置(不会移动 position)</span><br></pre></td></tr></table></figure><h4 id="Channel-通道"><a href="#Channel-通道" class="headerlink" title="Channel( 通道)"></a>Channel( 通道)</h4><p>Java NIO的通道类似流，但又有些不同：既可以从通道中读取数据，又可以写数据到通道。但流的（input或output)读写通常是单向的。 通道可以非阻塞读取和写入通道，通道可以支持读取或写入缓冲区，也支持异步地读写。</p><ul><li>NIO的通道类似于流，但有些区别如下:<ul><li>通道可以同时进行读写，而流只能读或者只能写</li><li>通道可以实现异步读写数据</li><li>通道可以从缓冲读数据，也可以写数据到缓冲:</li></ul></li><li>BlO 中的stream是单向的，例如FileInputStream对象只能进行读取数据的操作，而NIO中的通道(Channel)是双向的，可以读操作，也可以写操作。</li><li>Channel在 NIO中是一个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">channel</span> <span class="keyword">extends</span> <span class="title class_">closeable</span>&#123;</span><br></pre></td></tr></table></figure><h5 id="常用的Channel实现类"><a href="#常用的Channel实现类" class="headerlink" title="常用的Channel实现类"></a>常用的Channel实现类</h5><ul><li>FileChannel:用于读取、写入、映射和操作文件的通道。</li><li>DatagramChannel:通过UDP读写网络中的数据通道。</li><li>SocketChannel:通过TCP读写网络中的数据。</li><li>ServerSocketChannel:可以监听新进来的TCP 连接，对每一个新进来的连接都会创建一个SocketChannel。</li></ul><blockquote><p>【ServerSocketChanne类似ServerSocket , SocketChannel类似 Socket】</p></blockquote><h5 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(ByteBuffer dst)</span> 从 Channel 中读取数据到  ByteBuffer</span><br><span class="line"><span class="type">long</span> <span class="title function_">read</span><span class="params">(ByteBuffer[] dsts)</span> 将 Channel中的数据“分散”到  ByteBuffer[]</span><br><span class="line"><span class="type">int</span> <span class="title function_">write</span><span class="params">(ByteBuffer src)</span> 将 ByteBuffer 中的数据写入到  Channel</span><br><span class="line"><span class="type">long</span> <span class="title function_">write</span><span class="params">(ByteBuffer[] srcs)</span> 将 ByteBuffer[] 中的数据“聚集”到  Channel</span><br><span class="line"><span class="type">long</span> <span class="title function_">position</span><span class="params">()</span> 返回此通道的文件位置</span><br><span class="line">FileChannel <span class="title function_">position</span><span class="params">(<span class="type">long</span> p)</span> 设置此通道的文件位置</span><br><span class="line"><span class="type">long</span> <span class="title function_">size</span><span class="params">()</span> 返回此通道的文件的当前大小</span><br><span class="line">FileChannel <span class="title function_">truncate</span><span class="params">(<span class="type">long</span> s)</span> 将此通道的文件截取为给定大小</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">force</span><span class="params">(<span class="type">boolean</span> metaData)</span> 强制将所有对此通道的文件更新写入到存储设备中</span><br></pre></td></tr></table></figure><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><ul><li>读写操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写文件</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data01.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取channel</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> fos.getChannel();</span><br><span class="line">        <span class="comment">// 定义缓冲区</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        buffer.put(<span class="string">&quot;hello,world!&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// 将缓冲区改为写模式</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">// 通过channel写出数据</span></span><br><span class="line">        channel.write(buffer);</span><br><span class="line">        channel.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;数据写出到文件!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data01.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取channel</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> fis.getChannel();</span><br><span class="line">        <span class="comment">// 定义缓冲区</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 读取数据到缓冲区</span></span><br><span class="line">        channel.read(buffer);</span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining());</span><br><span class="line">        System.out.println(<span class="string">&quot;读取文件数据：&quot;</span>+rs);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件复制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;1f913498-65f5-4683-98fe-1a9025a2bd87.png&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;new_1f913498-65f5-4683-98fe-1a9025a2bd87.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">isChannel</span> <span class="operator">=</span> fis.getChannel();</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">osChannel</span> <span class="operator">=</span> fos.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分配缓冲区</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 读取数据前应先清空缓冲区</span></span><br><span class="line">            buffer.clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开始读一次数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> isChannel.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (flag == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 读取数据后把缓冲区切换为可读模式</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">// 数据写出</span></span><br><span class="line">            osChannel.write(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">        isChannel.close();</span><br><span class="line">        osChannel.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;复制完成！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分散读取、集聚写入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分散和聚集</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">raf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;data01.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="comment">//1. 获取通道</span></span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel1</span> <span class="operator">=</span> raf1.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 分配指定大小的缓冲区</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buf1</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buf2</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 分散读取</span></span><br><span class="line">    ByteBuffer[] bufs = &#123;buf1, buf2&#125;;</span><br><span class="line">    channel1.read(bufs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ByteBuffer byteBuffer : bufs) &#123;</span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bufs[<span class="number">0</span>].array(), <span class="number">0</span>, bufs[<span class="number">0</span>].limit()));</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bufs[<span class="number">1</span>].array(), <span class="number">0</span>, bufs[<span class="number">1</span>].limit()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 聚集写入</span></span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">raf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;data02.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel2</span> <span class="operator">=</span> raf2.getChannel();</span><br><span class="line">    channel2.write(bufs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----结果</span></span><br><span class="line">hello,worl</span><br><span class="line">-----------------</span><br><span class="line">d！</span><br></pre></td></tr></table></figure><ul><li>文件复制：nio内置方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 1、字节输入管道</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data01.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">isChannel</span> <span class="operator">=</span> is.getChannel();</span><br><span class="line">    <span class="comment">// 2、字节输出流管道</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data03.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">osChannel</span> <span class="operator">=</span> fos.getChannel();</span><br><span class="line">    <span class="comment">// 3、复制</span></span><br><span class="line">    osChannel.transferFrom(isChannel,isChannel.position(),isChannel.size());</span><br><span class="line">    isChannel.close();</span><br><span class="line">    osChannel.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferTo</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 1、字节输入管道</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data01.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">isChannel</span> <span class="operator">=</span> is.getChannel();</span><br><span class="line">    <span class="comment">// 2、字节输出流管道</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data04.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">osChannel</span> <span class="operator">=</span> fos.getChannel();</span><br><span class="line">    <span class="comment">// 3、复制</span></span><br><span class="line">    isChannel.transferTo(isChannel.position() , isChannel.size() , osChannel);</span><br><span class="line">    isChannel.close();</span><br><span class="line">    osChannel.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Selector-选择器"><a href="#Selector-选择器" class="headerlink" title="Selector( 选择器)"></a>Selector( 选择器)</h4><p>Selector是 一个Java NIO组件，可以能够检查一个或多个 NIO 通道，并确定哪些通道已经准备好进行读取或写入。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接，提高效率</p><p>选择器（(Selector)是SelectableChannle对象的多路复用器，Selector可以同时监控多个SelectableChannel的IO状况，也就是说，利用Selector可使一个单独的线程管理多个Channel。Selector是非阻塞lO的核心</p><p><img src="D:\Users\xiaoaiying\Typora\img\image-20210911232823111.png" alt="image-20210911232823111"></p><ul><li>Java的NIO，用非阻塞的IO方式。可以用一个线程，处理多个的客户端连接，就会使用到Selector(选择器)</li><li>Selector能够检测多个注册的通道上是否有事件发生(注意:多个Channel以事件的方式可以注册到同一个Selector)，如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。</li><li>只有在连接/通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程</li><li>避免了多线程之间的上下文切换导致的开销</li></ul><h5 id="选择器的应用"><a href="#选择器的应用" class="headerlink" title="选择器的应用"></a>选择器的应用</h5><p>创建 Selector ：通过调用 Selector.open() 方法创建一个 Selector。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br></pre></td></tr></table></figure><p>向选择器注册通道：SelectableChannel.register(Selector sel, int ops)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取通道</span></span><br><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">ssChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"><span class="comment">//2. 切换非阻塞模式</span></span><br><span class="line">ssChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//3. 绑定连接</span></span><br><span class="line">ssChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9898</span>));</span><br><span class="line"><span class="comment">//4. 获取选择器</span></span><br><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line"><span class="comment">//5. 将通道注册到选择器上, 并且指定“监听接收事件”</span></span><br><span class="line">ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure><p>当调用 register(Selector sel, int ops) 将通道注册选择器时，选择器对通道的监听事件，需要通过第二个参数 ops 指定。可以监听的事件类型（用 可使用 SelectionKey  的四个常量 表示）：</p><ul><li>读 : SelectionKey.OP_READ （1）</li><li>写 : SelectionKey.OP_WRITE （4）</li><li>连接 : SelectionKey.OP_CONNECT （8）</li><li>接收 : SelectionKey.OP_ACCEPT （16）</li><li>若注册时不止监听一个事件，则可以使用“位或”操作符连接。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">interestSet</span> <span class="operator">=</span> SelectionKey.OP_READ | SelectionKey.OP_WRITE </span><br></pre></td></tr></table></figure><h3 id="NIO非阻塞式网络通信原理分析"><a href="#NIO非阻塞式网络通信原理分析" class="headerlink" title="NIO非阻塞式网络通信原理分析"></a>NIO非阻塞式网络通信原理分析</h3><p>Selector可以实现： 一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 I/O 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</p><h4 id="服务端流程"><a href="#服务端流程" class="headerlink" title="服务端流程"></a>服务端流程</h4><p>当客户端连接服务端时，服务端会通过 ServerSocketChannel 得到 SocketChannel：</p><ul><li><p>1、获取通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">ssChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br></pre></td></tr></table></figure></li><li><p>2、切换非阻塞模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssChannel.configureBlocking(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>3、绑定连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>));</span><br></pre></td></tr></table></figure></li><li><p>4、 获取选择器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br></pre></td></tr></table></figure></li><li><p>5、 将通道注册到选择器上, 并且指定“监听接收事件”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure></li><li><p>6、轮询式的获取选择器上已经“准备就绪”的事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//轮询式的获取选择器上已经“准备就绪”的事件</span></span><br><span class="line"> <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;轮一轮&quot;</span>);</span><br><span class="line">        <span class="comment">//7. 获取当前选择器中所有注册的“选择键(已就绪的监听事件)”</span></span><br><span class="line">        Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="comment">//8. 获取准备“就绪”的是事件</span></span><br><span class="line">            <span class="type">SelectionKey</span> <span class="variable">sk</span> <span class="operator">=</span> it.next();</span><br><span class="line">            <span class="comment">//9. 判断具体是什么事件准备就绪</span></span><br><span class="line">            <span class="keyword">if</span> (sk.isAcceptable()) &#123;</span><br><span class="line">                <span class="comment">//10. 若“接收就绪”，获取客户端连接</span></span><br><span class="line">                <span class="type">SocketChannel</span> <span class="variable">sChannel</span> <span class="operator">=</span> ssChannel.accept();</span><br><span class="line">                <span class="comment">//11. 切换非阻塞模式</span></span><br><span class="line">                sChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                <span class="comment">//12. 将该通道注册到选择器上</span></span><br><span class="line">                sChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sk.isReadable()) &#123;</span><br><span class="line">                <span class="comment">//13. 获取当前选择器上“读就绪”状态的通道</span></span><br><span class="line">                <span class="type">SocketChannel</span> <span class="variable">sChannel</span> <span class="operator">=</span> (SocketChannel) sk.channel();</span><br><span class="line">                <span class="comment">//14. 读取数据</span></span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((len = sChannel.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    buf.flip();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf.array(), <span class="number">0</span>, len));</span><br><span class="line">                    buf.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//15. 取消选择键 SelectionKey</span></span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="客户端流程"><a href="#客户端流程" class="headerlink" title="客户端流程"></a>客户端流程</h4><ul><li><p>获取通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SocketChannel</span> <span class="variable">sChannel</span> <span class="operator">=</span> SocketChannel.open(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>));</span><br></pre></td></tr></table></figure></li><li><p>切换非阻塞模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sChannel.configureBlocking(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>分配指定大小的缓冲区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(1024);</span><br></pre></td></tr></table></figure></li><li><p>发送数据给服务端</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scan.nextLine();</span><br><span class="line">buf.put((<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>).format(System.currentTimeMillis())</span><br><span class="line">+ <span class="string">&quot;\n&quot;</span> + str).getBytes());</span><br><span class="line">buf.flip();</span><br><span class="line">sChannel.write(buf);</span><br><span class="line">buf.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭通道</span></span><br><span class="line">sChannel.close();</span><br></pre></td></tr></table></figure><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><p>需求：服务端接收客户端的连接请求，并接收多个客户端发送过来的事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//1. 获取通道</span></span><br><span class="line"><span class="type">SocketChannel</span> <span class="variable">sChannel</span> <span class="operator">=</span> SocketChannel.open(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>));</span><br><span class="line"><span class="comment">//2. 切换非阻塞模式</span></span><br><span class="line">sChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//3. 分配指定大小的缓冲区</span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"><span class="comment">//4. 发送数据给服务端</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scan.nextLine();</span><br><span class="line">buf.put((<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>).format(System.currentTimeMillis())</span><br><span class="line">+ <span class="string">&quot;\n&quot;</span> + str).getBytes());</span><br><span class="line">buf.flip();</span><br><span class="line">sChannel.write(buf);</span><br><span class="line">buf.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5. 关闭通道</span></span><br><span class="line">sChannel.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 获取通道</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">ssChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//2. 切换非阻塞模式</span></span><br><span class="line">        ssChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//3. 绑定连接</span></span><br><span class="line">        ssChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>));</span><br><span class="line">        <span class="comment">//4. 获取选择器</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        <span class="comment">//5. 将通道注册到选择器上, 并且指定“监听接收事件”</span></span><br><span class="line">        ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="comment">//6. 轮询式的获取选择器上已经“准备就绪”的事件</span></span><br><span class="line">        <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;轮一轮&quot;</span>);</span><br><span class="line">            <span class="comment">//7. 获取当前选择器中所有注册的“选择键(已就绪的监听事件)”</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="comment">//8. 获取准备“就绪”的是事件</span></span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">sk</span> <span class="operator">=</span> it.next();</span><br><span class="line">                <span class="comment">//9. 判断具体是什么事件准备就绪</span></span><br><span class="line">                <span class="keyword">if</span> (sk.isAcceptable()) &#123;</span><br><span class="line">                    <span class="comment">//10. 若“接收就绪”，获取客户端连接</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">sChannel</span> <span class="operator">=</span> ssChannel.accept();</span><br><span class="line">                    <span class="comment">//11. 切换非阻塞模式</span></span><br><span class="line">                    sChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">//12. 将该通道注册到选择器上</span></span><br><span class="line">                    sChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sk.isReadable()) &#123;</span><br><span class="line">                    <span class="comment">//13. 获取当前选择器上“读就绪”状态的通道</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">sChannel</span> <span class="operator">=</span> (SocketChannel) sk.channel();</span><br><span class="line">                    <span class="comment">//14. 读取数据</span></span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((len = sChannel.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        buf.flip();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buf.array(), <span class="number">0</span>, len));</span><br><span class="line">                        buf.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//15. 取消选择键 SelectionKey</span></span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="群聊系统"><a href="#群聊系统" class="headerlink" title="群聊系统"></a>群聊系统</h4><ul><li>编写一个 NIO 群聊系统，实现客户端与客户端的通信需求（非阻塞）</li><li>服务器端：可以监测用户上线，离线，并实现消息转发功能</li><li>客户端：通过 channel 可以无阻塞发送消息给其它所有客户端用户，同时可以接受其它客户端用户通过服务端转发来的消息</li></ul><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel ssChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//初始化工作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Server</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、获取通道</span></span><br><span class="line">            ssChannel = ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">// 2、切换为非阻塞模式</span></span><br><span class="line">            ssChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 3、绑定连接的端口</span></span><br><span class="line">            ssChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(PORT));</span><br><span class="line">            <span class="comment">// 4、获取选择器Selector</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            <span class="comment">// 5、将通道都注册到选择器上去，并且开始指定监听接收事件</span></span><br><span class="line">            ssChannel.register(selector , SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听线程: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;开始一轮事件处理~~~&quot;</span>);</span><br><span class="line">                <span class="comment">// 7、获取选择器中的所有注册的通道中已经就绪好的事件</span></span><br><span class="line">                Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="comment">// 8、开始遍历这些准备好的事件</span></span><br><span class="line">                <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">                    <span class="comment">// 提取当前这个事件</span></span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">sk</span> <span class="operator">=</span> it.next();</span><br><span class="line">                    <span class="comment">// 9、判断这个事件具体是什么</span></span><br><span class="line">                    <span class="keyword">if</span>(sk.isAcceptable())&#123;</span><br><span class="line">                        <span class="comment">// 10、直接获取当前接入的客户端通道</span></span><br><span class="line">                        <span class="type">SocketChannel</span> <span class="variable">schannel</span> <span class="operator">=</span> ssChannel.accept();</span><br><span class="line">                        <span class="comment">// 11 、切换成非阻塞模式</span></span><br><span class="line">                        schannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                        <span class="comment">// 12、将本客户端通道注册到选择器</span></span><br><span class="line">                        System.out.println(schannel.getRemoteAddress() + <span class="string">&quot; 上线 &quot;</span>);</span><br><span class="line">                        schannel.register(selector , SelectionKey.OP_READ);</span><br><span class="line">                        <span class="comment">//提示</span></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sk.isReadable())&#123;</span><br><span class="line">                        <span class="comment">//处理读 (专门写方法..)</span></span><br><span class="line">                        readData(sk);</span><br><span class="line">                    &#125;</span><br><span class="line">                    it.remove(); <span class="comment">// 处理完毕之后需要移除当前事件</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//发生异常处理....</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取客户端消息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readData</span><span class="params">(SelectionKey key)</span> &#123;</span><br><span class="line">        <span class="comment">//取到关联的channle</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//得到channel</span></span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//创建buffer</span></span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> channel.read(buffer);</span><br><span class="line">            <span class="comment">//根据count的值做处理</span></span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//把缓存区的数据转成字符串</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array());</span><br><span class="line">                <span class="comment">//输出该消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;form 客户端: &quot;</span> + msg);</span><br><span class="line">                <span class="comment">//向其它的客户端转发消息(去掉自己), 专门写一个方法来处理</span></span><br><span class="line">                sendInfoToOtherClients(msg, channel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(channel.getRemoteAddress() + <span class="string">&quot; 离线了..&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="comment">//取消注册</span></span><br><span class="line">                key.cancel();</span><br><span class="line">                <span class="comment">//关闭通道</span></span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e2) &#123;</span><br><span class="line">                e2.printStackTrace();;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发消息给其它客户(通道)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendInfoToOtherClients</span><span class="params">(String msg, SocketChannel self )</span> <span class="keyword">throws</span>  IOException&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器转发消息中...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器转发数据给客户端线程: &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="comment">//遍历 所有注册到selector 上的 SocketChannel,并排除 self</span></span><br><span class="line">        <span class="keyword">for</span>(SelectionKey key: selector.keys()) &#123;</span><br><span class="line">            <span class="comment">//通过 key  取出对应的 SocketChannel</span></span><br><span class="line">            <span class="type">Channel</span> <span class="variable">targetChannel</span> <span class="operator">=</span> key.channel();</span><br><span class="line">            <span class="comment">//排除自己</span></span><br><span class="line">            <span class="keyword">if</span>(targetChannel <span class="keyword">instanceof</span>  SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line">                <span class="comment">//转型</span></span><br><span class="line">                <span class="type">SocketChannel</span> <span class="variable">dest</span> <span class="operator">=</span> (SocketChannel)targetChannel;</span><br><span class="line">                <span class="comment">//将msg 存储到buffer</span></span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">                <span class="comment">//将buffer 的数据写入 通道</span></span><br><span class="line">                dest.write(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建服务器对象</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">groupChatServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">        groupChatServer.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="comment">//定义相关的属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">// 服务器的ip</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PORT</span> <span class="operator">=</span> <span class="number">9999</span>; <span class="comment">//服务器端口</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器, 完成初始化工作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Client</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        socketChannel = socketChannel.open(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, PORT));</span><br><span class="line">        <span class="comment">//设置非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//将channel 注册到selector</span></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        <span class="comment">//得到username</span></span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        System.out.println(username + <span class="string">&quot; is ok...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向服务器发送消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendInfo</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        info = username + <span class="string">&quot; 说：&quot;</span> + info;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(info.getBytes()));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取从服务器端回复的消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">readChannels</span> <span class="operator">=</span> selector.select();</span><br><span class="line">            <span class="keyword">if</span>(readChannels &gt; <span class="number">0</span>) &#123;<span class="comment">//有可以用的通道</span></span><br><span class="line"></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                    <span class="keyword">if</span>(key.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">//得到相关的通道</span></span><br><span class="line">                       <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                       <span class="comment">//得到一个Buffer</span></span><br><span class="line">                        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        <span class="comment">//读取</span></span><br><span class="line">                        sc.read(buffer);</span><br><span class="line">                        <span class="comment">//把读到的缓冲区的数据转成字符串</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer.array());</span><br><span class="line">                        System.out.println(msg.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove(); <span class="comment">//删除当前的selectionKey, 防止重复操作</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//System.out.println(&quot;没有可以用的通道...&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//启动我们客户端</span></span><br><span class="line">        <span class="type">Client</span> <span class="variable">chatClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Client</span>();</span><br><span class="line">        <span class="comment">//启动一个线程, 每个3秒，读取从服务器发送数据</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    chatClient.readInfo();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送数据给服务器端</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            chatClient.sendInfo(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2><ul><li>Java AIO(NIO.2) ： 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AIO</span><br><span class="line">异步非阻塞，基于NIO的，可以称之为NIO2<span class="number">.0</span></span><br><span class="line">    BIO                   NIO                              AIO        </span><br><span class="line">Socket                SocketChannel                    AsynchronousSocketChannel</span><br><span class="line">ServerSocket          ServerSocketChannel       AsynchronousServerSocketChannel</span><br></pre></td></tr></table></figure><p>与NIO不同，当进行读写操作时，只须直接调用API的read或write方法即可, 这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入read方法的缓冲区,对于写操作而言，当操作系统将write方法传递的流写入完毕时，操作系统主动通知应用程序</p><p>即可以理解为，read/write方法都是异步的，完成后会主动调用回调函数。在JDK1.7中，这部分内容被称作NIO.2，主要在Java.nio.channels包下增加了下面四个异步通道：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousSocketChannel</span><br><span class="line">AsynchronousServerSocketChannel</span><br><span class="line">AsynchronousFileChannel</span><br><span class="line">AsynchronousDatagramChannel</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>BIO、NIO、AIO：</strong></p><ul><li>Java BIO ： 同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。</li><li>Java NIO ： 同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。</li><li>Java AIO(NIO.2) ： 异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。</li></ul><p><strong>BIO、NIO、AIO适用场景分析:</strong></p><ul><li>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</li><li>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</li><li>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。Netty!</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
